{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "image_project_sub.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "ETU_n-NCN6BX",
        "bOmN6xaIN6Bt",
        "movnBuSy-5xY",
        "Cv5rJVZ2P-Hq",
        "yEarIxtM_cf4",
        "Nrbm4v_K9SXr",
        "ESzWeTn19kii",
        "Y2LnEcbj9w7l",
        "zs94IYJA90cB",
        "Q2XK8nUDBri9",
        "UsuYpDf8D2l_",
        "C1vfD7WbEEWD",
        "0Ans7APFKoHY",
        "Cbp_n2GnN6EV",
        "ncKwVsBvN6Ed",
        "f04wJ1xXN6Ee"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HappyBearDay/Deep_Learning_Image_Multi_label/blob/master/image_project_sub.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "o5cz6o5sN6BV"
      },
      "cell_type": "markdown",
      "source": [
        "# DATA20001 Deep Learning - Group Project\n",
        "## Image project\n",
        "\n",
        "**Due Thursday, December 13, before 23:59.**\n",
        "\n",
        "The task is to learn to assign the correct labels to a set of images.  The images are originally from a photo-sharing site and released under Creative Commons-licenses allowing sharing.  The training set contains 20 000 images. We have resized them and cropped them to 128x128 to make the task a bit more manageable.\n",
        "\n",
        "We're only giving you the code for downloading the data. The rest you'll have to do yourselves.\n",
        "\n",
        "Some comments and hints particular to the image project:\n",
        "\n",
        "- One image may belong to many classes in this problem, i.e., it's a multi-label classification problem. In fact there are images that don't belong to any of our classes, and you should also be able to handle these correctly. Pay careful attention to how you design the outputs of the network (e.g., what activation to use) and what loss function should be used.\n",
        "\n",
        "- As the dataset is pretty imbalanced, don't focus too strictly on the outputs being probabilistic. (Meaning that the right threshold for selecting the label might not be 0.5.)\n",
        "\n",
        "- Image files can be loaded as numpy matrices for example using `imread` from `matplotlib.pyplot`. Most images are color, but a few grayscale. You need to handle the grayscale ones somehow as they would have a different number of color channels (depth) than the color ones.\n",
        "\n",
        "- In the exercises we used e.g., `torchvision.datasets.MNIST` to handle the loading of the data in suitable batches. Here, you need to handle the dataloading yourself.  The easiest way is probably to create a custom `Dataset`. [See for example here for a tutorial](https://github.com/utkuozbulak/pytorch-custom-dataset-examples)."
      ]
    },
    {
      "metadata": {
        "id": "GYeYsZmqE5MP",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "iMioZJz0OGWX",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "! pip install torch torchvision torchsummary sklearn"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "wAnheWovPhsl",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!pip install pillow==4.1.1\n",
        "%reload_ext autoreload\n",
        "%autoreload"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "ETU_n-NCN6BX"
      },
      "cell_type": "markdown",
      "source": [
        "## Download the data"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "8HPeRa7JN6BY",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import os\n",
        "import torch\n",
        "import torchvision\n",
        "from torchvision.datasets.utils import download_url\n",
        "import zipfile"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "lRKFdNkGN6Bd",
        "outputId": "38ca48ac-c41e-46cf-a44f-8d9696e3973f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "train_path = 'train'\n",
        "dl_file = 'dl2018-image-proj.zip'\n",
        "dl_url = 'https://users.aalto.fi/mvsjober/misc/'\n",
        "\n",
        "zip_path = os.path.join(train_path, dl_file)\n",
        "if not os.path.isfile(zip_path):\n",
        "    download_url(dl_url + dl_file, root=train_path, filename=dl_file, md5=None)\n",
        "\n",
        "with zipfile.ZipFile(zip_path) as zip_f:\n",
        "    zip_f.extractall(train_path)\n",
        "    #os.unlink(zip_path)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading https://users.aalto.fi/mvsjober/misc/dl2018-image-proj.zip to train/dl2018-image-proj.zip\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "SYucMUzKN6Bh",
        "outputId": "5e7db143-fe03-4b7b-a5aa-2a77569ff885",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "if torch.cuda.is_available():\n",
        "    print('Using GPU!')\n",
        "    device = torch.device('cuda')\n",
        "else:\n",
        "    print('Using CPU')\n",
        "    device = torch.device('cpu')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using GPU!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "e4OBeshoN6Bn"
      },
      "cell_type": "markdown",
      "source": [
        "The above command downloaded and extracted the data files into the `train` subdirectory.\n",
        "\n",
        "The images can be found in `train/images`, and are named as `im1.jpg`, `im2.jpg` and so on until `im20000.jpg`.\n",
        "\n",
        "The class labels, or annotations, can be found in `train/annotations` as `CLASSNAME.txt`, where CLASSNAME is one of the fourteen classes: *baby, bird, car, clouds, dog, female, flower, male, night, people, portrait, river, sea,* and *tree*.\n",
        "\n",
        "Each annotation file is a simple text file that lists the images that depict that class, one per line. The images are listed with their number, not the full filename. For example `5969` refers to the image `im5969.jpg`."
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "p7NS0wddN6Bp"
      },
      "cell_type": "markdown",
      "source": [
        "## Your stuff goes here ..."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "CBSFUnlrN6Bq",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import os\n",
        "from os import listdir\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random as rd\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torchvision import datasets, transforms\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "img_path = \"./train/images/\"\n",
        "labels_path = \"./train/annotations/\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "bOmN6xaIN6Bt"
      },
      "cell_type": "markdown",
      "source": [
        "### Data preprocessing"
      ]
    },
    {
      "metadata": {
        "id": "QOMJuyOlLiTt",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "images_path = \"train/images/\" \n",
        "image_files = [(images_path+f) for f in os.listdir(images_path) \\\n",
        "                if os.path.isfile(os.path.join(images_path, f))]\n",
        "images = []\n",
        "for current_img_path in image_files:\n",
        "    current_img_vector =  plt.imread( current_img_path )\n",
        "    filename_without_extension = os.path.basename(current_img_path)[:-4] # :-4 to drop the extension\n",
        "    img_num = filename_without_extension[2:] # drop the heading \"im\"\n",
        "    images += [img_num]\n",
        "del image_files"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "IUx_enEdN6By",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "data=images\n",
        "labels = [[] for _ in range(len(data))] # Empty list of labels\n",
        "annotations_path = \"train/annotations/\"\n",
        "annotations_files = [(annotations_path+f) for f in os.listdir(annotations_path) \\\n",
        "        if os.path.isfile(os.path.join(annotations_path, f))]\n",
        "for file in annotations_files:\n",
        "    label = os.path.basename(file)[:-4] # :-4 to drop the extension\n",
        "    with open(file) as f: # file is the name of the label currently read\n",
        "        img_nums = f.read().split()\n",
        "    for img_num in img_nums:\n",
        "        if img_num not in data:\n",
        "            continue\n",
        "        labels[data.index(img_num)].append(label)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "xlpZq0l6N6B3",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class OneHotTransformer:\n",
        "    def __init__(self):\n",
        "        annotations_files = [(annotations_path+f) for f in os.listdir(annotations_path) \\\n",
        "                    if os.path.isfile(os.path.join(annotations_path, f))]\n",
        "        self.vocabulary = []\n",
        "        for file in annotations_files:\n",
        "            label = os.path.basename(file)[:-4] # :-4 to drop the extension\n",
        "            self.vocabulary.append(label)\n",
        "    def toOneHot(self, labels):\n",
        "        res = [0]*len(self.vocabulary)\n",
        "        for i, voc in enumerate(self.vocabulary):\n",
        "            if voc in labels:\n",
        "                res[i] = 1\n",
        "        return np.array(res)\n",
        "    def toVocabulary(self, onehot):\n",
        "        res = []\n",
        "        for i, n in enumerate(onehot):\n",
        "            if n: res.append(self.vocabulary[i])\n",
        "        return res\n",
        "oneHotTransformer = OneHotTransformer()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "69SbHK3SN6B6",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Files to pytorch dataset\n",
        "# Inspired from https://github.com/pytorch/vision/blob/master/torchvision/datasets/mnist.py\n",
        "from torch.utils.data.dataset import Dataset\n",
        "from torchvision import datasets, transforms\n",
        "from PIL import Image\n",
        "\n",
        "#merging_method : \n",
        "# 0 : Convert  a colored image to grey image\n",
        "# 1 : Complete a grey    image with zeros   to a have colored image\n",
        "# 2 : Complete a grey    image with himself to a have colored image\n",
        "\n",
        "\n",
        "class imageDataset(Dataset):\n",
        "    def __init__(self, data_basenames, merging_method = 2, channels = 3, height = 128, width = 128, transforms = transforms.ToTensor(), processing = False, trans = transforms.Compose([\n",
        "        transforms.Resize(256),\n",
        "        transforms.CenterCrop(224),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ])):\n",
        "        \"\"\"\n",
        "        data_basenames is a list of id of image, such as [\"9885\", \"9886\"]\n",
        "        transforms is a list of transformation. it last element should be transforms.ToTensor()\n",
        "        \"\"\"\n",
        "        def parse_labels(data_paths):\n",
        "            \"\"\" Parse to one hot \"\"\"\n",
        "            labels = [[] for _ in range(len(data_paths))] # Empty list of labels\n",
        "            annotations_path = \"train/annotations/\"\n",
        "            annotations_files = [(annotations_path+f) for f in os.listdir(annotations_path) \\\n",
        "                    if os.path.isfile(os.path.join(annotations_path, f))]\n",
        "            vocabulary = []\n",
        "            for file in annotations_files:\n",
        "                label = os.path.basename(file)[:-4] # :-4 to drop the extension\n",
        "                vocabulary.append(label)\n",
        "                with open(file) as f: # file is the name of the label currently read\n",
        "                    img_nums = f.read().split()\n",
        "                for img_num in img_nums:\n",
        "                    if img_num not in data_paths:\n",
        "                        continue\n",
        "                    labels[data_paths.index(img_num)].append(label)\n",
        "            return labels\n",
        "          \n",
        "        self.data = data_basenames\n",
        "        self.labels = parse_labels(data_basenames)\n",
        "        self.channels = channels\n",
        "        self.height = height\n",
        "        self.width = width\n",
        "        self.transforms = transforms\n",
        "        self.data_len = len(data_basenames)\n",
        "        self.merging_method = merging_method\n",
        "        self.trans = trans\n",
        "        self.processing = processing\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        img_path = \"train/images/im\" + self.data[index] + \".jpg\"\n",
        "        data = Image.open(img_path)\n",
        "        \n",
        "        if self.processing:\n",
        "             img = self.trans(data)\n",
        "        \n",
        "        elif self.transforms is not None:\n",
        "            img = self.transforms(data)\n",
        "        #labels = np.array(self.labels[index])\n",
        "        #print(self.labels[index])\n",
        "        \n",
        "        if(self.merging_method == 0 ):\n",
        "            \n",
        "            if img.shape[0] == 3:\n",
        "              img = img[0] + img[1] + img[2]\n",
        "              img /= 3\n",
        "              img = img.reshape((1, self.height, self.width))\n",
        "              \n",
        "        elif(self.merging_method == 1):\n",
        "          \n",
        "            if img.shape[0] == 1:  # change graysclae images to RGB\n",
        "                zeros_torser = torch.zeros([1, self.height, self.width])\n",
        "                img = torch.cat((img,zeros_torser, zeros_torser),0)\n",
        "                \n",
        "        elif(self.merging_method == 2):  \n",
        "            if img.shape[0] == 1:  # change graysclae images to RGB\n",
        "                img = torch.cat((img,img, img),0)\n",
        "        \n",
        "            \n",
        "        labels = self.labels[index]\n",
        "        one_hot_labels = oneHotTransformer.toOneHot(labels)\n",
        "        return img, one_hot_labels\n",
        "\n",
        "    def __len__(self):\n",
        "        return self.data_len\n",
        "\n",
        "    \n",
        "import random\n",
        "random.shuffle(images) # So we make sure test data has all kinds of label, in case\n",
        "                                 # the repartition is not even according to label names\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "065_mN1snExD",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "batch_size = 16\n",
        "\n",
        "# 80% train, 20% test\n",
        "index_cut =  int(len(images)*0.8)\n",
        "\n",
        "train_dataset_0 = imageDataset(images[:index_cut], merging_method = 0)\n",
        "train_loader_0 = torch.utils.data.DataLoader(dataset=train_dataset_0,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)\n",
        "test_dataset_0 = imageDataset(images[index_cut:], merging_method = 0)\n",
        "test_loader_0 = torch.utils.data.DataLoader(dataset=test_dataset_0,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)\n",
        "\n",
        "train_dataset_1 = imageDataset(images[:index_cut], merging_method = 1)\n",
        "train_loader_1 = torch.utils.data.DataLoader(dataset=train_dataset_1,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)\n",
        "test_dataset_1 = imageDataset(images[index_cut:], merging_method = 1)\n",
        "test_loader_1 = torch.utils.data.DataLoader(dataset=test_dataset_1,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)\n",
        "\n",
        "train_dataset_2 = imageDataset(images[:index_cut], merging_method = 2)\n",
        "train_loader_2 = torch.utils.data.DataLoader(dataset=train_dataset_2,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)\n",
        "test_dataset_2 = imageDataset(images[index_cut:], merging_method = 2)\n",
        "test_loader_2 = torch.utils.data.DataLoader(dataset=test_dataset_2,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)\n",
        "\n",
        "train_dataset_3 = imageDataset(images[:index_cut], merging_method = 2, processing = True)\n",
        "train_loader_3 = torch.utils.data.DataLoader(dataset=train_dataset_3,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)\n",
        "test_dataset_3 = imageDataset(images[index_cut:], merging_method = 2, processing = True)\n",
        "test_loader_3 = torch.utils.data.DataLoader(dataset=test_dataset_3,\n",
        "                                          batch_size=batch_size,\n",
        "                                          shuffle=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "pNMm0PheN6B-",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "data0, target0 = next(train_loader_0.__iter__()) # Iteration works!\n",
        "data1, target1 = next(train_loader_1.__iter__())\n",
        "data2, target2 = next(train_loader_2.__iter__())\n",
        "data3, target3 = next(train_loader_3.__iter__())"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "-N71pB9TKKPK",
        "colab_type": "code",
        "outputId": "b12f0e67-019a-4479-df01-a29ac0191bf4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        }
      },
      "cell_type": "code",
      "source": [
        "# 3 channel show: merging method 2\n",
        "data2, target2 = next(train_loader_2.__iter__()) # Iteration works!\n",
        "\n",
        "d0 = data2[0]\n",
        "t0 = target2[0]\n",
        "\n",
        "f, axs = plt.subplots(1,3)\n",
        "axs[0].imshow(d0[0])\n",
        "axs[1].imshow(d0[1])\n",
        "axs[2].imshow(d0[2])\n",
        "plt.show()\n",
        "\n",
        "arr_ = d0.transpose(0,-1)\n",
        "arr_ = np.rot90(arr_, 3)\n",
        "arr_ = np.flip(arr_, axis=1)\n",
        "plt.imshow(arr_)\n",
        "plt.grid(None)\n",
        "plt.show()\n",
        "print(t0)\n",
        "print(\"labels:\", oneHotTransformer.toVocabulary(t0))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d62b4ef0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\niBEjRmYg5kfUiBEjRmYg5kfUiBEjRmYg5kfUiBEjRmYgs0px+tKXvkTbt28ny7LolltuodWrV5/8\nolmUL3/5y/Tiiy9SqVSi6667jlatWkU33XQTlctlampqojvuuIP8fv/JbzQLksvl6M1vfjN9rteD\nSgAABYtJREFU7GMfo3PPPfc10+8NGzbQD3/4Q7Jtm2644QZaunTpa6Lv6XSabr75ZorH41QsFun6\n66+npqYmuu2224iIaOnSpfT5z39+djs5Sfbv308f+9jH6Nprr6X169dTf3//tHO9YcMGuuuuu8jj\n8dDVV19NV1111Wx3fdq+f/rTn6ZSqUS2bdMdd9xBTU1Nf56+O7Mkmzdvdj7ykY84juM43d3dztVX\nXz1bXfmTZNOmTc7f/u3fOo7jOGNjY86FF17ofOpTn3IeeeQRx3Ec56tf/arz05/+dDa7+Iryta99\nzXn729/u3H///a+Zfo+NjTmXXnqpk0wmncHBQefWW299zfT97rvvdr7yla84juM4AwMDzmWXXeas\nX7/e2b59u+M4jvOJT3zC2bhx42x2cYKk02ln/fr1zq233urcfffdjuM40851Op12Lr30UieRSDjZ\nbNa54oornPHx8dns+rR9v+mmm5xf//rXjuM4zj333OPcfvvtf7a+z5o6v2nTJnrjG99IRKhbH4/H\nKZVKneSq2ZOzzjqL7rzzTiIiqq6upmw2S5s3b/7/2rt7kNT+OI7jH/Eh8SHM8ARGSbi4iBYNWRZF\n1B2itpaQ5p6ozTQig4YyHAIbirIxKgx6WCoahAYbRJAKGmoqpQclMSwF9f8fpHOJe+oO3jjnwO+1\n+TsZb0/5xTN4fujs7AQAdHR0IBgMspn4pdvbW9zc3KC9vR0AeNMdDAZhsVigUChAURTm5uZ4015R\nUYFksnhn/FQqBZVKhWg0Sl9tca1dIpFgbW0NFEXRa0znOhKJwGg0QqlUQiqVoqGhAeFwmK1sAMzt\nLpcLv34Vt/n++Fv8VDtrQzQej6Oi4vcOkmq1Gs/Pz988g11CoRAyWfHmvn6/H21tbXh/f6cvJSsr\nKznb73a74XA46Md86b6/v0cmk8HQ0BAGBgYQDAZ5097T04NYLIauri7YbDbY7XaUl5fTx7nWLhKJ\nIJVKP60xnet4PA61Wk3/DBfet0ztMpkMQqEQ+Xwem5ub6O3t/bF2zmyZ/B9PvgJ6enoKv9+PjY0N\ndHd30+tc7d/b24PZbEZNTQ3jca52f0gmk1heXkYsFsPg4OCnXi637+/vQ6vVwufz4fr6GqOjo1Aq\nlfRxLrcz+aqXy68jn8/DbrejqakJFosFh4eHn47/q3bWhihFUYjH4/Tjp6cnaDSab57BvrOzM6ys\nrGB9fR1KpRIymQyZTAZSqRSPj4+fLie4IhAI4O7uDoFAAA8PD5BIJLzoBoqffurr6yESiVBbWwu5\nXA6hUMiL9nA4DKu1uDe9wWBANptFLvf7jlFcbv/A9H/C9L41m80sVn7N6XRCp9NhbGwMAPPM+Rft\nrF3Ot7S04Pj4GABwdXUFiqKgUCjYyvmr19dXLC4uYnV1FSqVCgDQ3NxMv4aTkxO0traymchoaWkJ\nu7u72NnZQX9/P0ZGRnjRDQBWqxXn5+coFAp4eXnB29sbb9p1Oh0ikQgAIBqNQi6XQ6/XIxQq7rbK\n5fYPTOfaZDLh4uICqVQK6XQa4XAYjY2NLJf+6eDgAGKxGOPj4/TaT7Wzej9Rj8eDUCgEgUAAl8sF\ng8HAVspfbW9vw+v1oq6ujl5bWFjA9PQ0stkstFot5ufnIRaLv/kt7PJ6vaiurobVasXk5CQvure2\ntuD3+wEAw8PDMBqNvGhPp9OYmppCIpFALpfDxMQENBoNZmZmUCgUYDKZ4HQ62c6kXV5ewu12IxqN\nQiQSoaqqCh6PBw6H449zfXR0BJ/PB4FAAJvNhr6+Ps61JxIJlJWV0R/M9Ho9Zmdnf6Sd1SFKEATB\nd+QbSwRBECUgQ5QgCKIEZIgSBEGUgAxRgiCIEpAhShAEUQIyRAmCIEpAhihBEEQJyBAlCIIowf82\nx6zk/LzwGgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d6460c88>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "tensor([0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0])\n",
            "labels: ['female', 'portrait', 'male', 'people']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "movnBuSy-5xY",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Define train, validate and evaluate functions"
      ]
    },
    {
      "metadata": {
        "id": "clj57fqh_AOD",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def train_net(model, train_loader, epoch, trainLoss, interval = 100):\n",
        "    # set model to train\n",
        "    model.train()\n",
        "    loss = 0\n",
        "    \n",
        "    for batch_idx, (data, target) in enumerate(train_loader):\n",
        "        \n",
        "        data = data.to(device) # to GPU\n",
        "        target = target.float().to(device) # to GPU, \".float()\" is improtant, otherwise got error.\n",
        "        \n",
        "        # set zero gradient buffer\n",
        "        optimizer.zero_grad()\n",
        "        \n",
        "        # compute the output and Loss\n",
        "        output = model(data)\n",
        "        Loss = criterion(output, target)\n",
        "        \n",
        "        # back prop\n",
        "        Loss.backward()\n",
        "        \n",
        "        # update weights\n",
        "        optimizer.step()\n",
        "        \n",
        "        # print information\n",
        "        if batch_idx % interval == 0:\n",
        "            print(\"Train Epoch: {} [{}/{} {:.0f}%]\\tLoss: {:.6f}\".format(epoch, len(data)*batch_idx, len(train_loader)*len(data), batch_idx/len(train_loader)*100, Loss.data.item()))   \n",
        "       \n",
        "        loss += Loss\n",
        "    loss/=len(train_loader)\n",
        "    trainLoss.append(loss)\n",
        "\n",
        "def validate(model, test_loader, lossv, verbose=True):\n",
        "  loss, acc, prec, rec = 0,0,0,0\n",
        "  for i, sample in enumerate(test_loader):\n",
        "    inputv, targetv = sample\n",
        "    inputv = inputv.to(device)\n",
        "    output = model(inputv)\n",
        "   \n",
        "    loss += criterion(output, targetv.data.to(device).float()).data.item()\n",
        "  \n",
        "  loss /= len(test_loader)\n",
        "  \n",
        "  lossv.append(loss)\n",
        "  \n",
        "  if verbose:\n",
        "    print('Validation set: Average loss: {:.4f}\\n'.format(\n",
        "            loss))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "635drMuJGsNI",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def evaluate(model, test_loader, treshold, lossv, accv, precv, recv, verbose=True):\n",
        "  loss, acc, prec, rec = 0,0,0,0\n",
        "  for i, sample in enumerate(test_loader):\n",
        "    inputv, targetv = sample\n",
        "    inputv = inputv.to(device)\n",
        "    output = model(inputv)\n",
        "    \n",
        "    pred = torch.sigmoid(output).data.gt(treshold) # Activated output\n",
        "    \n",
        "    loss += criterion(output, targetv.data.to(device).float()).data.item()\n",
        "    # confusion matrix (true/false negative/positive)\n",
        "    tp = (pred + targetv.data.to(device).byte()).eq(2).sum()\n",
        "    fp = (pred - targetv.data.to(device).byte()).eq(1).sum()\n",
        "    fn = (pred - targetv.data.to(device).byte()).eq(-1).sum()\n",
        "    tn = (pred + targetv.data.to(device).byte()).eq(0).sum()\n",
        "    acc += (tp + tn).float() / (tp + tn + fp + fn)\n",
        "\n",
        "    if tp+fp!=0:\n",
        "      prec += tp.float() / (tp + fp)\n",
        "    else:\n",
        "      prec += 0.0\n",
        "    if tp+fn != 0:\n",
        "      rec += tp.float() / (tp + fn)\n",
        "    else:\n",
        "      rec += 0.0\n",
        "  loss /= len(test_loader)\n",
        "  acc /= len(test_loader)\n",
        "  prec /= len(test_loader)\n",
        "  rec /= len(test_loader)\n",
        "  lossv.append(loss)\n",
        "  accv.append(acc)\n",
        "  precv.append(prec)\n",
        "  recv.append(rec)\n",
        "  if verbose:\n",
        "    print('Validation set: Average loss: {:.4f}, Accuracy: {:.2f}%, Precision: {:.2f}%, Recall: {:.2f}%'.format(\n",
        "            loss, acc*100, prec*100, rec*100))\n",
        "    print(\"\\t\\tF1 score : {:.2f}%\\n\".format(100*2*(prec*rec)/(prec+rec)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Cv5rJVZ2P-Hq"
      },
      "cell_type": "markdown",
      "source": [
        "### Models"
      ]
    },
    {
      "metadata": {
        "id": "yEarIxtM_cf4",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### a) Simple CNN models"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "0AJm-4rdP8TA",
        "outputId": "6fe54da6-73f1-4d2d-9d93-588900f86cde",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        }
      },
      "cell_type": "code",
      "source": [
        "class simple_cnn2_drop(nn.Module):\n",
        "    def __init__(self, nclass = 14):\n",
        "        super(simple_cnn2_drop,self).__init__()\n",
        "        self.layer1 = nn.Sequential(\n",
        "            nn.Conv2d(3,64,kernel_size = 11,padding = 0,stride = 4),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size = 3, stride = 2)\n",
        "        )\n",
        "        self.layer2 = nn.Sequential(\n",
        "            nn.Conv2d(64,128,kernel_size = 5,padding = 0,stride = 2),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size = 3, stride = 2)\n",
        "        )\n",
        "        self.dropout = nn.Dropout(0.5)\n",
        "        self.fc1 = nn.Linear(2*2*128, 128)\n",
        "        self.fc2 = nn.Linear(128, nclass)\n",
        "        \n",
        "    def forward(self,x):\n",
        "        out = self.layer1(x)\n",
        "        out = self.layer2(out)\n",
        "        out = self.dropout(out)\n",
        "        out = out.view(out.size(0),-1)\n",
        "        out = F.relu(self.fc1(out))\n",
        "        out = self.fc2(out)\n",
        "        return out\n",
        "\n",
        "from torchsummary import summary\n",
        "summary(model, (3, 128, 128))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 64, 30, 30]          23,296\n",
            "       BatchNorm2d-2           [-1, 64, 30, 30]             128\n",
            "              ReLU-3           [-1, 64, 30, 30]               0\n",
            "         MaxPool2d-4           [-1, 64, 14, 14]               0\n",
            "            Conv2d-5            [-1, 128, 5, 5]         204,928\n",
            "       BatchNorm2d-6            [-1, 128, 5, 5]             256\n",
            "              ReLU-7            [-1, 128, 5, 5]               0\n",
            "         MaxPool2d-8            [-1, 128, 2, 2]               0\n",
            "           Dropout-9            [-1, 128, 2, 2]               0\n",
            "           Linear-10                  [-1, 128]          65,664\n",
            "           Linear-11                   [-1, 14]           1,806\n",
            "================================================================\n",
            "Total params: 296,078\n",
            "Trainable params: 296,078\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.19\n",
            "Forward/backward pass size (MB): 1.50\n",
            "Params size (MB): 1.13\n",
            "Estimated Total Size (MB): 2.81\n",
            "----------------------------------------------------------------\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "2ZI5QMUqANkP",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model = simple_cnn2_drop().to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = 0.01) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss() "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "mm-n0PZmA-3x",
        "colab_type": "code",
        "outputId": "6ca2bd60-0f50-4ccb-d2df-dcd44c9dab5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        }
      },
      "cell_type": "code",
      "source": [
        "class simple_cnn3(nn.Module):\n",
        "    def __init__(self, nclass = 14):\n",
        "        super(simple_cnn3,self).__init__()\n",
        "        self.layer1 = nn.Sequential(\n",
        "            nn.Conv2d(3,16,kernel_size = 11,padding = 0,stride = 4),\n",
        "            nn.BatchNorm2d(16),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size = 3, stride = 2)\n",
        "        )\n",
        "        self.layer2 = nn.Sequential(\n",
        "            nn.Conv2d(16,32,kernel_size = 5,padding = 0,stride = 2),\n",
        "            nn.BatchNorm2d(32),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size = 3, stride = 2)\n",
        "        )\n",
        "        self.dropout = nn.Dropout(0.5)\n",
        "        self.fc1 = nn.Linear(2*2*32, nclass)\n",
        "        \n",
        "    def forward(self,x):\n",
        "        out = self.layer1(x)\n",
        "        out = self.layer2(out)\n",
        "        out = self.dropout(out)\n",
        "        out = out.view(out.size(0),-1)\n",
        "        out = self.fc1(out)\n",
        "        return out\n",
        "      \n",
        "model = simple_cnn3().to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = 0.01) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss() \n",
        "from torchsummary import summary\n",
        "summary(model, (3, 128, 128))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 16, 30, 30]           5,824\n",
            "       BatchNorm2d-2           [-1, 16, 30, 30]              32\n",
            "              ReLU-3           [-1, 16, 30, 30]               0\n",
            "         MaxPool2d-4           [-1, 16, 14, 14]               0\n",
            "            Conv2d-5             [-1, 32, 5, 5]          12,832\n",
            "       BatchNorm2d-6             [-1, 32, 5, 5]              64\n",
            "              ReLU-7             [-1, 32, 5, 5]               0\n",
            "         MaxPool2d-8             [-1, 32, 2, 2]               0\n",
            "           Dropout-9             [-1, 32, 2, 2]               0\n",
            "           Linear-10                   [-1, 14]           1,806\n",
            "================================================================\n",
            "Total params: 20,558\n",
            "Trainable params: 20,558\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.19\n",
            "Forward/backward pass size (MB): 0.37\n",
            "Params size (MB): 0.08\n",
            "Estimated Total Size (MB): 0.64\n",
            "----------------------------------------------------------------\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "splqCVmnBXcq",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model = simple_cnn3().to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = 0.01) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss() "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ni4Phn9CA1-z",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### b) Deep CNN"
      ]
    },
    {
      "metadata": {
        "id": "9P5jmw1GDwK8",
        "colab_type": "code",
        "outputId": "5ff4ea47-f5f4-49a8-b56e-175def4deef5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        }
      },
      "cell_type": "code",
      "source": [
        "class deep_cnn(nn.Module):\n",
        "    def __init__(self, input_channels=3):\n",
        "        super().__init__()\n",
        "        self.conv1 = nn.Sequential(\n",
        "            nn.Conv2d(input_channels, 16, kernel_size=5),\n",
        "            nn.BatchNorm2d(16),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(5, stride=3)\n",
        "        )\n",
        "        self.conv2 = nn.Sequential(\n",
        "            nn.Conv2d(16, 32, kernel_size=5),\n",
        "            nn.BatchNorm2d(32),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(5, stride=3)\n",
        "        )\n",
        "        self.conv3 = nn.Sequential(\n",
        "            nn.Conv2d(32, 64, kernel_size=5),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(5, stride=3)\n",
        "        )\n",
        "        self.conv4 = nn.Sequential(\n",
        "            nn.Conv2d(64, 128, kernel_size=5),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(10, stride=3)\n",
        "        )\n",
        "        #self.fc1 = nn.Linear(4096, 20)\n",
        "        self.lastlayer = nn.Sequential(\n",
        "   #         nn.Dropout(p=0.5),\n",
        "            nn.Linear(4096//64, 14)\n",
        "        )\n",
        "        \n",
        "    def forward(self, x):\n",
        "        out = self.conv1(x)\n",
        "        out = self.conv2(out)\n",
        "        out = self.conv3(out)\n",
        "        #out = self.conv4(out)\n",
        "        out = out.view(out.size(0),-1)\n",
        "        out = self.lastlayer(out)\n",
        "        return out\n",
        "      \n",
        "summary(model, (3, 128, 128))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1         [-1, 16, 124, 124]           1,216\n",
            "       BatchNorm2d-2         [-1, 16, 124, 124]              32\n",
            "              ReLU-3         [-1, 16, 124, 124]               0\n",
            "         MaxPool2d-4           [-1, 16, 40, 40]               0\n",
            "            Conv2d-5           [-1, 32, 36, 36]          12,832\n",
            "       BatchNorm2d-6           [-1, 32, 36, 36]              64\n",
            "              ReLU-7           [-1, 32, 36, 36]               0\n",
            "         MaxPool2d-8           [-1, 32, 11, 11]               0\n",
            "            Conv2d-9             [-1, 64, 7, 7]          51,264\n",
            "      BatchNorm2d-10             [-1, 64, 7, 7]             128\n",
            "             ReLU-11             [-1, 64, 7, 7]               0\n",
            "        MaxPool2d-12             [-1, 64, 1, 1]               0\n",
            "           Linear-13                   [-1, 14]             910\n",
            "================================================================\n",
            "Total params: 66,446\n",
            "Trainable params: 66,446\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.19\n",
            "Forward/backward pass size (MB): 6.88\n",
            "Params size (MB): 0.25\n",
            "Estimated Total Size (MB): 7.32\n",
            "----------------------------------------------------------------\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "DJQDr0WgAtDy",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model = deep_cnn().to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = 0.01) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "DSLH57APBaZv",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Analysis with different data processing methods (train on deep_cnn)"
      ]
    },
    {
      "metadata": {
        "id": "Nrbm4v_K9SXr",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### a) Merge 1"
      ]
    },
    {
      "metadata": {
        "id": "29aSsknsBWx2",
        "colab_type": "code",
        "outputId": "9b91ab8c-5536-47ec-edc8-79259bc6bcd4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 6388
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "model = deep_cnn().to(device)\n",
        "epoch = 30\n",
        "\n",
        "#learning_rate = 0.000001 # for sim_cnn_v1\n",
        "learning_rate = 0.0001 # for deep_cnn\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()\n",
        "#criterion = nn.BCELoss()\n",
        "train_loss, val_loss = [], []\n",
        "for i in range(1,1+epoch):\n",
        "    train_net(model, train_loader_0,i, train_loss)\n",
        "    validate(model, test_loader_0, val_loss)\n",
        "    torch.save(model.state_dict(), '/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn0_epoch'+str(i)+'.pkl')\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Epoch: 1 [0/16000 0%]\tLoss: 0.743971\n",
            "Train Epoch: 1 [1600/16000 10%]\tLoss: 0.553688\n",
            "Train Epoch: 1 [3200/16000 20%]\tLoss: 0.436291\n",
            "Train Epoch: 1 [4800/16000 30%]\tLoss: 0.334922\n",
            "Train Epoch: 1 [6400/16000 40%]\tLoss: 0.271802\n",
            "Train Epoch: 1 [8000/16000 50%]\tLoss: 0.255924\n",
            "Train Epoch: 1 [9600/16000 60%]\tLoss: 0.229531\n",
            "Train Epoch: 1 [11200/16000 70%]\tLoss: 0.167977\n",
            "Train Epoch: 1 [12800/16000 80%]\tLoss: 0.251539\n",
            "Train Epoch: 1 [14400/16000 90%]\tLoss: 0.232335\n",
            "Validation set: Average loss: 0.2162\n",
            "\n",
            "Train Epoch: 2 [0/16000 0%]\tLoss: 0.197368\n",
            "Train Epoch: 2 [1600/16000 10%]\tLoss: 0.184391\n",
            "Train Epoch: 2 [3200/16000 20%]\tLoss: 0.205732\n",
            "Train Epoch: 2 [4800/16000 30%]\tLoss: 0.194156\n",
            "Train Epoch: 2 [6400/16000 40%]\tLoss: 0.280689\n",
            "Train Epoch: 2 [8000/16000 50%]\tLoss: 0.201463\n",
            "Train Epoch: 2 [9600/16000 60%]\tLoss: 0.195850\n",
            "Train Epoch: 2 [11200/16000 70%]\tLoss: 0.151470\n",
            "Train Epoch: 2 [12800/16000 80%]\tLoss: 0.155236\n",
            "Train Epoch: 2 [14400/16000 90%]\tLoss: 0.162306\n",
            "Validation set: Average loss: 0.2012\n",
            "\n",
            "Train Epoch: 3 [0/16000 0%]\tLoss: 0.193243\n",
            "Train Epoch: 3 [1600/16000 10%]\tLoss: 0.161532\n",
            "Train Epoch: 3 [3200/16000 20%]\tLoss: 0.279966\n",
            "Train Epoch: 3 [4800/16000 30%]\tLoss: 0.197357\n",
            "Train Epoch: 3 [6400/16000 40%]\tLoss: 0.156325\n",
            "Train Epoch: 3 [8000/16000 50%]\tLoss: 0.233965\n",
            "Train Epoch: 3 [9600/16000 60%]\tLoss: 0.198419\n",
            "Train Epoch: 3 [11200/16000 70%]\tLoss: 0.220080\n",
            "Train Epoch: 3 [12800/16000 80%]\tLoss: 0.233290\n",
            "Train Epoch: 3 [14400/16000 90%]\tLoss: 0.157577\n",
            "Validation set: Average loss: 0.1968\n",
            "\n",
            "Train Epoch: 4 [0/16000 0%]\tLoss: 0.142799\n",
            "Train Epoch: 4 [1600/16000 10%]\tLoss: 0.147795\n",
            "Train Epoch: 4 [3200/16000 20%]\tLoss: 0.185294\n",
            "Train Epoch: 4 [4800/16000 30%]\tLoss: 0.259091\n",
            "Train Epoch: 4 [6400/16000 40%]\tLoss: 0.217656\n",
            "Train Epoch: 4 [8000/16000 50%]\tLoss: 0.175461\n",
            "Train Epoch: 4 [9600/16000 60%]\tLoss: 0.268069\n",
            "Train Epoch: 4 [11200/16000 70%]\tLoss: 0.125732\n",
            "Train Epoch: 4 [12800/16000 80%]\tLoss: 0.126016\n",
            "Train Epoch: 4 [14400/16000 90%]\tLoss: 0.170780\n",
            "Validation set: Average loss: 0.1951\n",
            "\n",
            "Train Epoch: 5 [0/16000 0%]\tLoss: 0.154446\n",
            "Train Epoch: 5 [1600/16000 10%]\tLoss: 0.236534\n",
            "Train Epoch: 5 [3200/16000 20%]\tLoss: 0.193325\n",
            "Train Epoch: 5 [4800/16000 30%]\tLoss: 0.167143\n",
            "Train Epoch: 5 [6400/16000 40%]\tLoss: 0.184024\n",
            "Train Epoch: 5 [8000/16000 50%]\tLoss: 0.195498\n",
            "Train Epoch: 5 [9600/16000 60%]\tLoss: 0.217506\n",
            "Train Epoch: 5 [11200/16000 70%]\tLoss: 0.170148\n",
            "Train Epoch: 5 [12800/16000 80%]\tLoss: 0.166394\n",
            "Train Epoch: 5 [14400/16000 90%]\tLoss: 0.167480\n",
            "Validation set: Average loss: 0.1930\n",
            "\n",
            "Train Epoch: 6 [0/16000 0%]\tLoss: 0.137164\n",
            "Train Epoch: 6 [1600/16000 10%]\tLoss: 0.207168\n",
            "Train Epoch: 6 [3200/16000 20%]\tLoss: 0.190320\n",
            "Train Epoch: 6 [4800/16000 30%]\tLoss: 0.277002\n",
            "Train Epoch: 6 [6400/16000 40%]\tLoss: 0.152179\n",
            "Train Epoch: 6 [8000/16000 50%]\tLoss: 0.217047\n",
            "Train Epoch: 6 [9600/16000 60%]\tLoss: 0.199204\n",
            "Train Epoch: 6 [11200/16000 70%]\tLoss: 0.244110\n",
            "Train Epoch: 6 [12800/16000 80%]\tLoss: 0.220084\n",
            "Train Epoch: 6 [14400/16000 90%]\tLoss: 0.165588\n",
            "Validation set: Average loss: 0.1923\n",
            "\n",
            "Train Epoch: 7 [0/16000 0%]\tLoss: 0.135945\n",
            "Train Epoch: 7 [1600/16000 10%]\tLoss: 0.177581\n",
            "Train Epoch: 7 [3200/16000 20%]\tLoss: 0.226028\n",
            "Train Epoch: 7 [4800/16000 30%]\tLoss: 0.141237\n",
            "Train Epoch: 7 [6400/16000 40%]\tLoss: 0.172496\n",
            "Train Epoch: 7 [8000/16000 50%]\tLoss: 0.188886\n",
            "Train Epoch: 7 [9600/16000 60%]\tLoss: 0.153265\n",
            "Train Epoch: 7 [11200/16000 70%]\tLoss: 0.180523\n",
            "Train Epoch: 7 [12800/16000 80%]\tLoss: 0.161648\n",
            "Train Epoch: 7 [14400/16000 90%]\tLoss: 0.177390\n",
            "Validation set: Average loss: 0.1910\n",
            "\n",
            "Train Epoch: 8 [0/16000 0%]\tLoss: 0.217172\n",
            "Train Epoch: 8 [1600/16000 10%]\tLoss: 0.163572\n",
            "Train Epoch: 8 [3200/16000 20%]\tLoss: 0.167980\n",
            "Train Epoch: 8 [4800/16000 30%]\tLoss: 0.168318\n",
            "Train Epoch: 8 [6400/16000 40%]\tLoss: 0.149488\n",
            "Train Epoch: 8 [8000/16000 50%]\tLoss: 0.196782\n",
            "Train Epoch: 8 [9600/16000 60%]\tLoss: 0.198963\n",
            "Train Epoch: 8 [11200/16000 70%]\tLoss: 0.191213\n",
            "Train Epoch: 8 [12800/16000 80%]\tLoss: 0.195092\n",
            "Train Epoch: 8 [14400/16000 90%]\tLoss: 0.150382\n",
            "Validation set: Average loss: 0.1900\n",
            "\n",
            "Train Epoch: 9 [0/16000 0%]\tLoss: 0.216312\n",
            "Train Epoch: 9 [1600/16000 10%]\tLoss: 0.171561\n",
            "Train Epoch: 9 [3200/16000 20%]\tLoss: 0.160039\n",
            "Train Epoch: 9 [4800/16000 30%]\tLoss: 0.121653\n",
            "Train Epoch: 9 [6400/16000 40%]\tLoss: 0.149574\n",
            "Train Epoch: 9 [8000/16000 50%]\tLoss: 0.161465\n",
            "Train Epoch: 9 [9600/16000 60%]\tLoss: 0.110784\n",
            "Train Epoch: 9 [11200/16000 70%]\tLoss: 0.191934\n",
            "Train Epoch: 9 [12800/16000 80%]\tLoss: 0.141310\n",
            "Train Epoch: 9 [14400/16000 90%]\tLoss: 0.154599\n",
            "Validation set: Average loss: 0.1895\n",
            "\n",
            "Train Epoch: 10 [0/16000 0%]\tLoss: 0.207396\n",
            "Train Epoch: 10 [1600/16000 10%]\tLoss: 0.134885\n",
            "Train Epoch: 10 [3200/16000 20%]\tLoss: 0.208751\n",
            "Train Epoch: 10 [4800/16000 30%]\tLoss: 0.147811\n",
            "Train Epoch: 10 [6400/16000 40%]\tLoss: 0.175637\n",
            "Train Epoch: 10 [8000/16000 50%]\tLoss: 0.151843\n",
            "Train Epoch: 10 [9600/16000 60%]\tLoss: 0.221244\n",
            "Train Epoch: 10 [11200/16000 70%]\tLoss: 0.324297\n",
            "Train Epoch: 10 [12800/16000 80%]\tLoss: 0.192522\n",
            "Train Epoch: 10 [14400/16000 90%]\tLoss: 0.162198\n",
            "Validation set: Average loss: 0.1878\n",
            "\n",
            "Train Epoch: 11 [0/16000 0%]\tLoss: 0.141697\n",
            "Train Epoch: 11 [1600/16000 10%]\tLoss: 0.149689\n",
            "Train Epoch: 11 [3200/16000 20%]\tLoss: 0.164650\n",
            "Train Epoch: 11 [4800/16000 30%]\tLoss: 0.101684\n",
            "Train Epoch: 11 [6400/16000 40%]\tLoss: 0.137819\n",
            "Train Epoch: 11 [8000/16000 50%]\tLoss: 0.222252\n",
            "Train Epoch: 11 [9600/16000 60%]\tLoss: 0.195160\n",
            "Train Epoch: 11 [11200/16000 70%]\tLoss: 0.141238\n",
            "Train Epoch: 11 [12800/16000 80%]\tLoss: 0.218730\n",
            "Train Epoch: 11 [14400/16000 90%]\tLoss: 0.201384\n",
            "Validation set: Average loss: 0.1873\n",
            "\n",
            "Train Epoch: 12 [0/16000 0%]\tLoss: 0.152964\n",
            "Train Epoch: 12 [1600/16000 10%]\tLoss: 0.122042\n",
            "Train Epoch: 12 [3200/16000 20%]\tLoss: 0.199352\n",
            "Train Epoch: 12 [4800/16000 30%]\tLoss: 0.141736\n",
            "Train Epoch: 12 [6400/16000 40%]\tLoss: 0.116373\n",
            "Train Epoch: 12 [8000/16000 50%]\tLoss: 0.176768\n",
            "Train Epoch: 12 [9600/16000 60%]\tLoss: 0.221867\n",
            "Train Epoch: 12 [11200/16000 70%]\tLoss: 0.225526\n",
            "Train Epoch: 12 [12800/16000 80%]\tLoss: 0.170327\n",
            "Train Epoch: 12 [14400/16000 90%]\tLoss: 0.162425\n",
            "Validation set: Average loss: 0.1881\n",
            "\n",
            "Train Epoch: 13 [0/16000 0%]\tLoss: 0.156266\n",
            "Train Epoch: 13 [1600/16000 10%]\tLoss: 0.125804\n",
            "Train Epoch: 13 [3200/16000 20%]\tLoss: 0.231378\n",
            "Train Epoch: 13 [4800/16000 30%]\tLoss: 0.157247\n",
            "Train Epoch: 13 [6400/16000 40%]\tLoss: 0.165072\n",
            "Train Epoch: 13 [8000/16000 50%]\tLoss: 0.225392\n",
            "Train Epoch: 13 [9600/16000 60%]\tLoss: 0.126654\n",
            "Train Epoch: 13 [11200/16000 70%]\tLoss: 0.160911\n",
            "Train Epoch: 13 [12800/16000 80%]\tLoss: 0.163983\n",
            "Train Epoch: 13 [14400/16000 90%]\tLoss: 0.164243\n",
            "Validation set: Average loss: 0.1882\n",
            "\n",
            "Train Epoch: 14 [0/16000 0%]\tLoss: 0.213646\n",
            "Train Epoch: 14 [1600/16000 10%]\tLoss: 0.138714\n",
            "Train Epoch: 14 [3200/16000 20%]\tLoss: 0.171267\n",
            "Train Epoch: 14 [4800/16000 30%]\tLoss: 0.212666\n",
            "Train Epoch: 14 [6400/16000 40%]\tLoss: 0.121983\n",
            "Train Epoch: 14 [8000/16000 50%]\tLoss: 0.110377\n",
            "Train Epoch: 14 [9600/16000 60%]\tLoss: 0.136729\n",
            "Train Epoch: 14 [11200/16000 70%]\tLoss: 0.154037\n",
            "Train Epoch: 14 [12800/16000 80%]\tLoss: 0.163165\n",
            "Train Epoch: 14 [14400/16000 90%]\tLoss: 0.129572\n",
            "Validation set: Average loss: 0.1876\n",
            "\n",
            "Train Epoch: 15 [0/16000 0%]\tLoss: 0.239902\n",
            "Train Epoch: 15 [1600/16000 10%]\tLoss: 0.145637\n",
            "Train Epoch: 15 [3200/16000 20%]\tLoss: 0.260654\n",
            "Train Epoch: 15 [4800/16000 30%]\tLoss: 0.194306\n",
            "Train Epoch: 15 [6400/16000 40%]\tLoss: 0.124528\n",
            "Train Epoch: 15 [8000/16000 50%]\tLoss: 0.197389\n",
            "Train Epoch: 15 [9600/16000 60%]\tLoss: 0.167884\n",
            "Train Epoch: 15 [11200/16000 70%]\tLoss: 0.220132\n",
            "Train Epoch: 15 [12800/16000 80%]\tLoss: 0.152342\n",
            "Train Epoch: 15 [14400/16000 90%]\tLoss: 0.167888\n",
            "Validation set: Average loss: 0.1864\n",
            "\n",
            "Train Epoch: 16 [0/16000 0%]\tLoss: 0.127857\n",
            "Train Epoch: 16 [1600/16000 10%]\tLoss: 0.115053\n",
            "Train Epoch: 16 [3200/16000 20%]\tLoss: 0.139455\n",
            "Train Epoch: 16 [4800/16000 30%]\tLoss: 0.127049\n",
            "Train Epoch: 16 [6400/16000 40%]\tLoss: 0.162807\n",
            "Train Epoch: 16 [8000/16000 50%]\tLoss: 0.194939\n",
            "Train Epoch: 16 [9600/16000 60%]\tLoss: 0.159781\n",
            "Train Epoch: 16 [11200/16000 70%]\tLoss: 0.128426\n",
            "Train Epoch: 16 [12800/16000 80%]\tLoss: 0.125281\n",
            "Train Epoch: 16 [14400/16000 90%]\tLoss: 0.129003\n",
            "Validation set: Average loss: 0.1867\n",
            "\n",
            "Train Epoch: 17 [0/16000 0%]\tLoss: 0.132515\n",
            "Train Epoch: 17 [1600/16000 10%]\tLoss: 0.216687\n",
            "Train Epoch: 17 [3200/16000 20%]\tLoss: 0.137828\n",
            "Train Epoch: 17 [4800/16000 30%]\tLoss: 0.140084\n",
            "Train Epoch: 17 [6400/16000 40%]\tLoss: 0.218033\n",
            "Train Epoch: 17 [8000/16000 50%]\tLoss: 0.179851\n",
            "Train Epoch: 17 [9600/16000 60%]\tLoss: 0.134955\n",
            "Train Epoch: 17 [11200/16000 70%]\tLoss: 0.147592\n",
            "Train Epoch: 17 [12800/16000 80%]\tLoss: 0.158324\n",
            "Train Epoch: 17 [14400/16000 90%]\tLoss: 0.192782\n",
            "Validation set: Average loss: 0.1873\n",
            "\n",
            "Train Epoch: 18 [0/16000 0%]\tLoss: 0.118764\n",
            "Train Epoch: 18 [1600/16000 10%]\tLoss: 0.139922\n",
            "Train Epoch: 18 [3200/16000 20%]\tLoss: 0.173888\n",
            "Train Epoch: 18 [4800/16000 30%]\tLoss: 0.114867\n",
            "Train Epoch: 18 [6400/16000 40%]\tLoss: 0.198687\n",
            "Train Epoch: 18 [8000/16000 50%]\tLoss: 0.165040\n",
            "Train Epoch: 18 [9600/16000 60%]\tLoss: 0.089843\n",
            "Train Epoch: 18 [11200/16000 70%]\tLoss: 0.136192\n",
            "Train Epoch: 18 [12800/16000 80%]\tLoss: 0.143003\n",
            "Train Epoch: 18 [14400/16000 90%]\tLoss: 0.144216\n",
            "Validation set: Average loss: 0.1859\n",
            "\n",
            "Train Epoch: 19 [0/16000 0%]\tLoss: 0.141610\n",
            "Train Epoch: 19 [1600/16000 10%]\tLoss: 0.146105\n",
            "Train Epoch: 19 [3200/16000 20%]\tLoss: 0.173428\n",
            "Train Epoch: 19 [4800/16000 30%]\tLoss: 0.144919\n",
            "Train Epoch: 19 [6400/16000 40%]\tLoss: 0.140545\n",
            "Train Epoch: 19 [8000/16000 50%]\tLoss: 0.129964\n",
            "Train Epoch: 19 [9600/16000 60%]\tLoss: 0.143979\n",
            "Train Epoch: 19 [11200/16000 70%]\tLoss: 0.111086\n",
            "Train Epoch: 19 [12800/16000 80%]\tLoss: 0.150104\n",
            "Train Epoch: 19 [14400/16000 90%]\tLoss: 0.107154\n",
            "Validation set: Average loss: 0.1876\n",
            "\n",
            "Train Epoch: 20 [0/16000 0%]\tLoss: 0.170366\n",
            "Train Epoch: 20 [1600/16000 10%]\tLoss: 0.170019\n",
            "Train Epoch: 20 [3200/16000 20%]\tLoss: 0.147054\n",
            "Train Epoch: 20 [4800/16000 30%]\tLoss: 0.124607\n",
            "Train Epoch: 20 [6400/16000 40%]\tLoss: 0.134075\n",
            "Train Epoch: 20 [8000/16000 50%]\tLoss: 0.111189\n",
            "Train Epoch: 20 [9600/16000 60%]\tLoss: 0.141590\n",
            "Train Epoch: 20 [11200/16000 70%]\tLoss: 0.194118\n",
            "Train Epoch: 20 [12800/16000 80%]\tLoss: 0.123442\n",
            "Train Epoch: 20 [14400/16000 90%]\tLoss: 0.196638\n",
            "Validation set: Average loss: 0.1887\n",
            "\n",
            "Train Epoch: 21 [0/16000 0%]\tLoss: 0.138975\n",
            "Train Epoch: 21 [1600/16000 10%]\tLoss: 0.093194\n",
            "Train Epoch: 21 [3200/16000 20%]\tLoss: 0.090847\n",
            "Train Epoch: 21 [4800/16000 30%]\tLoss: 0.126593\n",
            "Train Epoch: 21 [6400/16000 40%]\tLoss: 0.184936\n",
            "Train Epoch: 21 [8000/16000 50%]\tLoss: 0.147356\n",
            "Train Epoch: 21 [9600/16000 60%]\tLoss: 0.139843\n",
            "Train Epoch: 21 [11200/16000 70%]\tLoss: 0.127299\n",
            "Train Epoch: 21 [12800/16000 80%]\tLoss: 0.141527\n",
            "Train Epoch: 21 [14400/16000 90%]\tLoss: 0.180594\n",
            "Validation set: Average loss: 0.1885\n",
            "\n",
            "Train Epoch: 22 [0/16000 0%]\tLoss: 0.133020\n",
            "Train Epoch: 22 [1600/16000 10%]\tLoss: 0.147837\n",
            "Train Epoch: 22 [3200/16000 20%]\tLoss: 0.161609\n",
            "Train Epoch: 22 [4800/16000 30%]\tLoss: 0.114614\n",
            "Train Epoch: 22 [6400/16000 40%]\tLoss: 0.145908\n",
            "Train Epoch: 22 [8000/16000 50%]\tLoss: 0.157454\n",
            "Train Epoch: 22 [9600/16000 60%]\tLoss: 0.139642\n",
            "Train Epoch: 22 [11200/16000 70%]\tLoss: 0.108733\n",
            "Train Epoch: 22 [12800/16000 80%]\tLoss: 0.178998\n",
            "Train Epoch: 22 [14400/16000 90%]\tLoss: 0.132066\n",
            "Validation set: Average loss: 0.1884\n",
            "\n",
            "Train Epoch: 23 [0/16000 0%]\tLoss: 0.105981\n",
            "Train Epoch: 23 [1600/16000 10%]\tLoss: 0.181732\n",
            "Train Epoch: 23 [3200/16000 20%]\tLoss: 0.173914\n",
            "Train Epoch: 23 [4800/16000 30%]\tLoss: 0.153018\n",
            "Train Epoch: 23 [6400/16000 40%]\tLoss: 0.111624\n",
            "Train Epoch: 23 [8000/16000 50%]\tLoss: 0.125965\n",
            "Train Epoch: 23 [9600/16000 60%]\tLoss: 0.114204\n",
            "Train Epoch: 23 [11200/16000 70%]\tLoss: 0.115367\n",
            "Train Epoch: 23 [12800/16000 80%]\tLoss: 0.133300\n",
            "Train Epoch: 23 [14400/16000 90%]\tLoss: 0.171550\n",
            "Validation set: Average loss: 0.1890\n",
            "\n",
            "Train Epoch: 24 [0/16000 0%]\tLoss: 0.149128\n",
            "Train Epoch: 24 [1600/16000 10%]\tLoss: 0.119790\n",
            "Train Epoch: 24 [3200/16000 20%]\tLoss: 0.163438\n",
            "Train Epoch: 24 [4800/16000 30%]\tLoss: 0.144607\n",
            "Train Epoch: 24 [6400/16000 40%]\tLoss: 0.185538\n",
            "Train Epoch: 24 [8000/16000 50%]\tLoss: 0.107607\n",
            "Train Epoch: 24 [9600/16000 60%]\tLoss: 0.134761\n",
            "Train Epoch: 24 [11200/16000 70%]\tLoss: 0.201482\n",
            "Train Epoch: 24 [12800/16000 80%]\tLoss: 0.226683\n",
            "Train Epoch: 24 [14400/16000 90%]\tLoss: 0.131171\n",
            "Validation set: Average loss: 0.1890\n",
            "\n",
            "Train Epoch: 25 [0/16000 0%]\tLoss: 0.163282\n",
            "Train Epoch: 25 [1600/16000 10%]\tLoss: 0.150101\n",
            "Train Epoch: 25 [3200/16000 20%]\tLoss: 0.157884\n",
            "Train Epoch: 25 [4800/16000 30%]\tLoss: 0.114658\n",
            "Train Epoch: 25 [6400/16000 40%]\tLoss: 0.088704\n",
            "Train Epoch: 25 [8000/16000 50%]\tLoss: 0.118727\n",
            "Train Epoch: 25 [9600/16000 60%]\tLoss: 0.096807\n",
            "Train Epoch: 25 [11200/16000 70%]\tLoss: 0.162142\n",
            "Train Epoch: 25 [12800/16000 80%]\tLoss: 0.156293\n",
            "Train Epoch: 25 [14400/16000 90%]\tLoss: 0.134761\n",
            "Validation set: Average loss: 0.1922\n",
            "\n",
            "Train Epoch: 26 [0/16000 0%]\tLoss: 0.142091\n",
            "Train Epoch: 26 [1600/16000 10%]\tLoss: 0.141214\n",
            "Train Epoch: 26 [3200/16000 20%]\tLoss: 0.100638\n",
            "Train Epoch: 26 [4800/16000 30%]\tLoss: 0.133392\n",
            "Train Epoch: 26 [6400/16000 40%]\tLoss: 0.152044\n",
            "Train Epoch: 26 [8000/16000 50%]\tLoss: 0.198417\n",
            "Train Epoch: 26 [9600/16000 60%]\tLoss: 0.105115\n",
            "Train Epoch: 26 [11200/16000 70%]\tLoss: 0.161881\n",
            "Train Epoch: 26 [12800/16000 80%]\tLoss: 0.122585\n",
            "Train Epoch: 26 [14400/16000 90%]\tLoss: 0.142876\n",
            "Validation set: Average loss: 0.1893\n",
            "\n",
            "Train Epoch: 27 [0/16000 0%]\tLoss: 0.123203\n",
            "Train Epoch: 27 [1600/16000 10%]\tLoss: 0.101594\n",
            "Train Epoch: 27 [3200/16000 20%]\tLoss: 0.114350\n",
            "Train Epoch: 27 [4800/16000 30%]\tLoss: 0.137287\n",
            "Train Epoch: 27 [6400/16000 40%]\tLoss: 0.179412\n",
            "Train Epoch: 27 [8000/16000 50%]\tLoss: 0.123810\n",
            "Train Epoch: 27 [9600/16000 60%]\tLoss: 0.164901\n",
            "Train Epoch: 27 [11200/16000 70%]\tLoss: 0.230502\n",
            "Train Epoch: 27 [12800/16000 80%]\tLoss: 0.086421\n",
            "Train Epoch: 27 [14400/16000 90%]\tLoss: 0.111709\n",
            "Validation set: Average loss: 0.1900\n",
            "\n",
            "Train Epoch: 28 [0/16000 0%]\tLoss: 0.105627\n",
            "Train Epoch: 28 [1600/16000 10%]\tLoss: 0.147708\n",
            "Train Epoch: 28 [3200/16000 20%]\tLoss: 0.102316\n",
            "Train Epoch: 28 [4800/16000 30%]\tLoss: 0.078530\n",
            "Train Epoch: 28 [6400/16000 40%]\tLoss: 0.100596\n",
            "Train Epoch: 28 [8000/16000 50%]\tLoss: 0.120942\n",
            "Train Epoch: 28 [9600/16000 60%]\tLoss: 0.094845\n",
            "Train Epoch: 28 [11200/16000 70%]\tLoss: 0.142726\n",
            "Train Epoch: 28 [12800/16000 80%]\tLoss: 0.172748\n",
            "Train Epoch: 28 [14400/16000 90%]\tLoss: 0.112420\n",
            "Validation set: Average loss: 0.1910\n",
            "\n",
            "Train Epoch: 29 [0/16000 0%]\tLoss: 0.117079\n",
            "Train Epoch: 29 [1600/16000 10%]\tLoss: 0.138243\n",
            "Train Epoch: 29 [3200/16000 20%]\tLoss: 0.111528\n",
            "Train Epoch: 29 [4800/16000 30%]\tLoss: 0.118705\n",
            "Train Epoch: 29 [6400/16000 40%]\tLoss: 0.118948\n",
            "Train Epoch: 29 [8000/16000 50%]\tLoss: 0.108943\n",
            "Train Epoch: 29 [9600/16000 60%]\tLoss: 0.164995\n",
            "Train Epoch: 29 [11200/16000 70%]\tLoss: 0.091735\n",
            "Train Epoch: 29 [12800/16000 80%]\tLoss: 0.135846\n",
            "Train Epoch: 29 [14400/16000 90%]\tLoss: 0.178414\n",
            "Validation set: Average loss: 0.1914\n",
            "\n",
            "Train Epoch: 30 [0/16000 0%]\tLoss: 0.117857\n",
            "Train Epoch: 30 [1600/16000 10%]\tLoss: 0.139152\n",
            "Train Epoch: 30 [3200/16000 20%]\tLoss: 0.143370\n",
            "Train Epoch: 30 [4800/16000 30%]\tLoss: 0.114512\n",
            "Train Epoch: 30 [6400/16000 40%]\tLoss: 0.120098\n",
            "Train Epoch: 30 [8000/16000 50%]\tLoss: 0.159645\n",
            "Train Epoch: 30 [9600/16000 60%]\tLoss: 0.138059\n",
            "Train Epoch: 30 [11200/16000 70%]\tLoss: 0.146385\n",
            "Train Epoch: 30 [12800/16000 80%]\tLoss: 0.116965\n",
            "Train Epoch: 30 [14400/16000 90%]\tLoss: 0.107605\n",
            "Validation set: Average loss: 0.1937\n",
            "\n",
            "CPU times: user 16min 41s, sys: 1min 33s, total: 18min 15s\n",
            "Wall time: 18min 18s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "v24S2DQVCcmK",
        "colab_type": "code",
        "outputId": "467d87b1-3f1c-4f05-c69d-322a3f21314b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "loss_0t = train_loss\n",
        "loss_0v = val_loss\n",
        "\n",
        "plt.title(\"Deep cnn Model loss with merging method 1\")\n",
        "plt.plot(train_loss, label=\"train\")\n",
        "plt.plot(val_loss, label=\"validation\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfsAAAFnCAYAAAChL+DqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xl8U1Xe+PHPzdYkbdI2JaFshVIp\n1LIzwij7piL4uIKIijo+Oj6DCzoq0OcnZWYEFJVnxGVGdMZldMZq7SguWEQRGUSQRYQCspeydd/S\npkuW3x9pL1RSaKGhKXzfr1dfzV1z8iX0e8+5556j+Hw+H0IIIYS4YGlauwBCCCGECC5J9kIIIcQF\nTpK9EEIIcYGTZC+EEEJc4CTZCyGEEBc4SfZCCCHEBU6SvWg1PXv2ZPz48Vx11VWMGDGC3/72t2zZ\nsqW1i3XO1q9fT8+ePXnnnXdO2XbllVdyxx13NPuc48ePZ/369afdZ/bs2bzyyitNXn8+ffnll8yZ\nMweA/fv388MPPwD+WI0fP741ixbQnXfeSVZWVmsXQ7V161Z27doFQEZGBnfdddc5ne/48eP07Nkz\n4Dafz8frr79OcnIyGzduPKf3EaFDkr1oVf/4xz/IzMxk9erVXH/99fzud79TE0Fb1qFDBz799NMG\n63766SdqampaqUSta/z48SxcuBCAlStXhvy/8VtvvUVycnJrF0P14Ycf8vPPP5+X90pNTeXgwYPY\nbLbz8n7i/NC1dgGEAFAUhQkTJuB0Onn++ed57733qKmpYdGiRaxZs4ba2lqmTJnC/fffD8DevXuZ\nN28e+fn5GAwGFixYQJ8+fcjIyGD58uVERUWxZcsWjEYjL730Et26dTvlPZcuXUpaWho6nY5Ro0Yx\ne/ZsNmzYwOLFixk8eDArV66kurqap59+msGDB/Piiy9SXFxMbm4uu3btIjo6mldeeQWHw3HKubt0\n6UJ+fj6HDx+mc+fOAHz++ecMHTqUQ4cOAeD1ennhhRfIzMwEoH///sydOxez2cz27duZNWsWbreb\nkSNHNjj3ypUreeGFF6isrKRr164899xzTf7DvGvXLubNm0dJSQlhYWE89thjDB8+nIqKCp544gn2\n799PTU0Nl19+OampqdTU1ARcr9fr1XM+/vjjDB48mMmTJ1NQUMDQoUP5+9//ztChQ8nKymL27Nnc\nfffdLFu2jOnTp/Pqq6+i1+spKytj9OjRAPzlL39h2bJl1NbW8tRTT/HrX/+6QbkPHz7M1KlTufPO\nO0lPTwfgmWee4ZVXXmHnzp0MGzaswcVEoPi8+OKL6r/dpEmTuPXWW3niiSfYvHkzPXr04NJLL6Wg\noICnn36aMWPGsGjRImJjY5k6dSr33XcfH3zwASUlJcyZM4drrrmG6urqRo8/WUZGBt988w16vZ5N\nmzYRHx/PjBkzeO655zh06BAPP/wwt9xyCz6fj5dffplPPvmEmpoaxo4dy5w5c3j//ff5+OOP+frr\nrykqKiIyMhKAP/7xj/znP/9Br9fzf//3fyQmJlJSUkJqaiq7du1Cq9Vy/fXXc9999wGQnp7Oyy+/\nTEREBNdee22j35EbbriBAQMGMGbMmCZ9p0TbIDV7EVLGjBnD1q1bqaqq4rXXXmPv3r188sknfPrp\np2RmZrJq1Sq8Xi8zZszguuuuIzMzk3nz5vG73/0Ot9sNwHfffcdtt93GypUrGTt2LM8+++wp77Nx\n40bS09P5+OOP+eSTT9i0aRNffPEFADt27KBfv34sX76cadOm8Ze//EU97osvviAlJYWVK1cSExPD\nhx9+2Ohnufrqq/nss88Af9PoV199pSY3gOXLl/Ptt9+SkZHBZ599RllZGW+++SYA8+bNY/r06WRm\nZjJgwAAOHz4MQE5ODk888QTPP/88X331FUOGDGHevHlNiq3X6+XRRx/l9ttv54svvuCpp57i97//\nPU6nk48++gir1cry5cvJzMxEq9Wyd+/eRtefbMiQIertlx9++IH+/fuzefNmNc6XX355g3/f8ePH\nM336dGbPng34m5QTExNZvnw5t956a4N4n6y4uBi73U5mZiY9e/bkkUce4emnn2bZsmV8+umnHDp0\n6IzxWb16NUuXLuWuu+7igw8+IC8vj1WrVvGnP/2JjIyMRt9Xo9HwySefkJKSwp///GeAJh8PsGbN\nGh544AFWrFjBvn37eP3113n33XeZP3++eovl448/5osvviA9PZ0vv/ySnJwc/vWvf3HrrbfSt29f\nHn/8ce6++27A36x/4403smLFCoYMGaJ+bxYvXkxkZCSZmZn885//5F//+hcbN26ktLSU+fPn8/rr\nr/PJJ5+Ql5fXaFkHDBjQ6DbRdkmyFyElIiICr9dLRUUFq1atYtq0aRgMBsxmM9dddx0rVqxg//79\n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\n5/PDDz/w8MMP06NHDwASExN58sknOXbsGE888QQejwe73c6zzz6LwWAIZtGbzFrXG98pNXshhBAh\nKmjJfsOGDWRnZ5OWlsa+fftISUkhLS1N3T537lzefvttYmNjeeihh1izZg1Go5HBgwezZMmSBuda\nsmQJ06ZNY8KECSxevJj09HTG3tBpAAAgAElEQVSmTZsWrKI3izo+vtTshRBChKigNeOvW7eOcePG\nAZCQkEBpaSlOp1PdnpGRQWxsLAA2m43i4uJGz7V+/XrGjh0LwOjRo1m3bl2wit1sep1/fPwyqdkL\nIYQIUUFL9gUFBURHR6vLNpuN/Px8dTkiIgKAvLw81q5dy8iRIwHYu3cv999/P7feeitr164FwOVy\nqc32MTExDc4TCqxmvdTshRBChKyg3rM/WaCx4wsLC7n//vtJTU0lOjqabt268cADDzBhwgRycnKY\nPn06K1asOON5fik62oxOp22xstez2y0B19usJvYdKaFduwgURWnx9w11jcXlYidxCUziEpjEJTCJ\nS2DNjUvQkr3D4aCgoEBdzsvLw263q8tOp5N7772XmTNnMmzYMADat2/PNddcA0BcXBzt2rUjNzcX\ns9lMVVUVRqOR3NxcHA7Had+7uLiyxT+P3W4hP7884DaTQYvb4+PQ4WLMRn2Lv3coO11cLmYSl8Ak\nLoFJXAKTuATWWFxOdwEQtGb8oUOHkpmZCUBWVhYOh0Ntugd4+umnufPOOxkxYoS6btmyZfztb38D\nID8/n8LCQtq3b88VV1yhnmvFihUMHz48WMU+KxFmGTJXCCFE6ApazX7gwIEkJyczdepUFEUhNTWV\njIwMLBYLw4YN46OPPiI7O5v09HQAJk2axMSJE3nsscf46quvqK2tZd68eRgMBh588EFmzZpFWloa\nHTt25Prrrw9Wsc/Kyc/at7eZW7k0QgghRENBvWf/2GOPNVju1auX+nr79u0Bj/nrX/96yjqHw8Eb\nb7zRsoVrQVazjKInhBAidMkIei1AnrUXQggRyiTZt4D6mr08ay+EECIUSbJvARazTHMrhBAidEmy\nbwEW6Y0vhBAihEmybwFyz14IIUQok2TfAvQ6LUaDVmr2QgghQpIk+xZiMetlTnshhBAhSZJ9C7Ga\nDTgra5s0dr8QQghxPkmybyEWswGP14er2t3aRRFCCCEakGTfQk4MmSv37YUQQoQWSfYtRJ61F0II\nEaok2bcQtWZfITV7IYQQoUWSfQtRJ8NxSc1eCCFEaJFk30JkFD0hhBChSpJ9C1Hv2VdIzV4IIURo\nkWTfQtSavUtq9kIIIUKLJPsWUl+zL5OavRBCiBAjyb6F6HUaTGEyPr4QQojQI8m+BVlMBumNL4QQ\nIuRIsm9BFrNexscXQggRciTZt6D68fErZXx8IYQQIUSSfQuSZ+2FEEKEIkn2LcgaLj3yhRBChB5J\n9i3IYpKavRBCiNDT7GRfU1PDsWPHglGWNk9mvhNCCBGKdE3Z6dVXX8VsNnPzzTdz0003ER4eztCh\nQ5k5c2awy9emWMLra/aS7IUQQoSOJtXsV61axe23384XX3zB6NGj+eCDD9i8eXOwy9bmWEz1NXtp\nxhdCCBE6mlSz1+l0KIrCt99+y/Tp0wHwer1nPG7BggVs3boVRVFISUmhb9++6rbvv/+exYsXo9Fo\niI+PZ/78+Wg0GhYtWsSmTZtwu9389re/5corr2T27NlkZWURFRUFwD333MOoUaPO4uMGl9pBT2r2\nQgghQkiTkr3FYuG+++7j+PHjDBgwgFWrVqEoymmP2bBhA9nZ2aSlpbFv3z5SUlJIS0tTt8+dO5e3\n336b2NhYHnroIdasWUNYWBh79uwhLS2N4uJibrjhBq688koAHn30UUaPHn0OHzX4IqSDnhBCiBDU\npGT//PPP89133zFw4EAAwsLCeOaZZ057zLp16xg3bhwACQkJlJaW4nQ6iYiIACAjI0N9bbPZKC4u\n5tprr1Vr/1arFZfLhcfjObtP1gpkfHwhhBChqEnJvqioiOjoaGw2G++//z4//vgj99xzz2mPKSgo\nIDk5WV222Wzk5+erCb7+d15eHmvXruXhhx9Gq9ViNpsBSE9PZ8SIEWi1WgDeeecd3njjDWJiYnjy\nySex2WyNvnd0tBmdTtuUj9YsdrvljPtEWYxUVNU2ad8LxcX0WZtD4hKYxCUwiUtgEpfAmhuXJiX7\nOXPm8Pjjj7Njxw4++OADHnjgAZ566ineeOONJr9RoPHiCwsLuf/++0lNTSU6Olpdv3LlStLT0/n7\n3/8OwHXXXUdUVBRJSUksXbqUl156iblz5zb6XsXFlU0uV1PZ7Rby88vPuJ85TEteUSW5eWVoznCr\n40LQ1LhcbCQugUlcApO4BCZxCayxuJzuAqBJvfEVRaFv3758+eWX3HbbbYwcOfKMk704HA4KCgrU\n5by8POx2u7rsdDq59957mTlzJsOGDVPXr1mzhr/+9a+89tprWCz+gl9++eUkJSUBMGbMGHbv3t2U\nYrcKi6lufPwqGR9fCCFEaGhSsq+srOSnn34iMzOTESNGUFNTQ1lZ2WmPGTp0KJmZmQBkZWXhcDjU\npnuAp59+mjvvvJMRI0ao68rLy1m0aBGvvvqq2vMe4MEHHyQnJweA9evX06NHj6Z/wvPMKs/aCyGE\nCDFNasb/zW9+w5NPPsktt9yCzWbj+eefZ9KkSac9ZuDAgSQnJzN16lQURSE1NZWMjAwsFgvDhg3j\no48+Ijs7m/T0dAD1fMXFxQ0G63nmmWe47bbbmDlzJiaTCbPZzMKFC8/28wbdiVH0aukQ08qFEUII\nIQDF14zJ10tKSlAUBavVesZH71pTMO7xNPXe0Yofcnjvqz3MuKE3g3o6WrwcoUbuqQUmcQlM4hKY\nxCUwiUtgZ3PPvkk1+02bNjFr1iwqKirwer1ER0fz7LPP0qdPn7Mv7QVKprkVQggRapqU7BcvXswr\nr7xCYmIiADt27GD+/Pm8++67QS1cW1Sf7GUUPSGEEKGiSR30NBqNmugBLr30UvX5d9GQ1Szj4wsh\nhAgtTU72mZmZOJ1OnE4nn3/+uST7Rsg0t0IIIUJNk5rx//CHP/CnP/2JJ598EkVR6NevH3/84x+D\nXbY2Se7ZCyGECDWnTfbTpk1Te937fD4uueQSwD8gzuzZsy+ae/al1eXEeMObtK9Oq8EUppOavRBC\niJBx2mR/8vPuF6sqdzWp6xbyq079uL3HLU06xmLWS81eCCFEyDhtsh88ePD5KkfICtMaiLN0Zl3O\nJi6NTGKgo+8Zj7GaDewvKcPr810U4+MLIYQIbU3qoHcxUxSF25Mmo9fqSfv53zhrKs54jMWsx+uT\n8fGFEEKEBkn2TeAw25na+79w1lbwwZ6Pz7i/9MgXQggRSiTZN9HExDF0s8axMfdHtuZnnXZf6ZEv\nhBAilEiybyKNRsPtSZPRKVrSfs6gsray0X2lZi+EECKUSLJvhg7h7ZkQP57SmnI+3PNpo/tZ1SFz\npWYvhBCi9Umyb6bxcSPpYunE98c3klW4K+A+UrMXQggRSiTZN5NWo+X2XpPRKBr+uetDXO6qU/aR\ne/ZCCCFCiST7s9DZ0pGru46hpLqUf+/97JTtUrMXQggRSiTZn6Wruo2hY3gsa4+uZ1fRngbbpGYv\nhBAilEiyP0s6jY47kqbUNeenU+WuPrFNq8EcppM57YUQQoQESfbnIM7amXFxIymsKmbZ/uUNtsn4\n+EIIIUKFJPtzdE23ccSaHaw+/B17Sw6o6y1mA87KWrw+XyuWTgghhJBkf870Wj23J01GQeGdne9T\n4/E33cv4+EIIIUKFJPsWEB/ZldFdhpHvKuTT/SsA6ZEvhBAidEiybyHXdr8KuymGr3PWcKA0G2t4\n3Sh6FZLshRBCtC5J9i3EoDVwe9IUfPh4Z+cHmI3+0EonPSGEEK1Nkn0LuiQqnpGdr+B4ZR4HvJsA\nKHdJshdCCNG6JNm3sP/qPoEYYzRZlT+gmEspl2Z8IYQQrSyoyX7BggXccsstTJ06lZ9++qnBtu+/\n/54pU6YwdepU5syZg9frbfSYY8eOcccddzBt2jQefvhhampCN4EadWFM63UzPnwYum8jO68Unzx+\nJ4QQohUFLdlv2LCB7Oxs0tLSmD9/PvPnz2+wfe7cuSxZsoT33nuPiooK1qxZ0+gxS5YsYdq0afzz\nn/+ka9eupKenB6vYLaKXrQdXdBiMxuwkS8nkxS++we3xtHaxhBBCXKSCluzXrVvHuHHjAEhISKC0\ntBSn06luz8jIIDY2FgCbzUZxcXGjx6xfv56xY8cCMHr0aNatWxesYreYG3tMIt7SDW1kIT+HLWfW\nV8+y7shG3F557l4IIcT5FbRkX1BQQHR0tLpss9nIz89XlyMiIgDIy8tj7dq1jBw5stFjXC4XBoP/\nufWYmJgG5wlVJp2Rxy77HQ/0uR9zVRdc2iLe+fl9nvzuaTIPfk1FbWVrF1EIIcRFQne+3ijQfevC\nwkLuv/9+UlNTGyT50x3TlPvf0dFmdDrt2RX0NOx2y1kc049f9+jNU++sYnvZRsodR1i2/wsys79m\nZLdfc03PMXS0tG/xsp5PZxOXi4HEJTCJS2ASl8AkLoE1Ny5BS/YOh4OCggJ1OS8vD7vdri47nU7u\nvfdeZs6cybBhw057jNlspqqqCqPRSG5uLg6H47TvXVzc8rVmu91Cfn75WR//u2su483lFtZuPkx0\nt1yMHXNYse9bVuz7lt4xSYyNG06PqAQURWnBUgffucblQiVxCUziEpjEJTCJS2CNxeV0FwBBa8Yf\nOnQomZmZAGRlZeFwONSme4Cnn36aO++8kxEjRpzxmCuuuEJdv2LFCoYPHx6sYgeNVqPh7muSuHJQ\nPMX7O1H903Bu6jqZeGtXthfu5IUtS3n6hxdYf2yT3NcXQgjRohRfEJ8Le+6559i4cSOKopCamsqO\nHTuwWCwMGzaMyy67jAEDBqj7Tpo0iVtuueWUY3r16kVeXh6zZs2iurqajh07snDhQvR6faPvG4wr\nwZa6wvT5fHz+fTYfrt6Pxazn0Sn98ZqK+DpnDVvytuHDR6TBQpKtJx0jYv0/4bFYDZaQrPXLlXdg\nEpfAJC6BSVwCk7gEdjY1+6Am+9YSysm+3jc/HuEfX/xMmEHLwzf3pWdcNIWuYlYfXsvaoxuo8lQ1\n2D9cb6Zj+Ink3zGiAx3C22PSGVusTGdD/jMGJnEJTOISmMQlMIlLYGeT7M9bBz3R0Kj+nTCH6Xjt\nkx08n7aV/7k+mQE97NzYYxLXJUwg31XAEedxjlUc56jzOEcqjrO35AB7SvY3OI/NGE3H8PZ0jOhA\nx/BY4iydsJvboVFkcEQhhBB+kuxb0eCk9pjDdLz07228nLGdu6/pxdA+HdBqtMSGtyc2vD3QT92/\n2lPD8YrcX1wEHGN74S62F+5S9zPpTHSzdqn7iaObNY4IQ3grfEIhhBChQJJ9K+vdPYbHpw7gzx9s\n5W+f7aTCVcuVg+MC7humNdDV2oWu1i4N1pfXODlWcZwjzuNkl+VwsOwQO4t2s7Not7pPO1NMg+Tf\n2dIRvUb++YUQ4nxz1laQX1lAV2uX89YKK3/tQ0BCp0hm3TaQ59N+5L2v9+KsquWG4d2b3CHPYojA\nYriExOhL1HXO2gp/4i89xIGyQ2SX5bAx90c25v4IgE7R0snSsS75d8FmjMasM2HWmzDrTOg1+pDs\nECiEEG2J1+clrzKf/aXZdT8Hya30Dwx3T+/bGejoe17KIck+RHS2R5By+yCef+9HPv0umz05pYwd\n1Jn+Pdqh0zb/yi9CH05yTC+SY3oB/qcA8lwFHCw9xMG62n9O+RGyy3JYHeB4naLFdFLyN9X9NuvM\nmHVGTHoT4Toz3Twd0NeYiQ6LRKtp+YGMhBBtl9fnJb+yAJsxGr228SeoLiQ1nhqyy3LUxH6g9BAV\n7hNjvxi1YfSK7sElUfFcaks8b+WSZB9C7FEm5tw+kNc/20nWgSJ+zikhKsLAyP6dGNGvI9GWsLM+\nt6IotDfbaW+2M6TDIABqPbXkOI9yqOwwZTXlVLpdVNZWUul24XJXUemupKK2knxXIV6fN/CJ67oK\naBQN7Yw22pliaGeKwW6OwV73up3RdtH8RxfiYuf1edlXcoAt+dv4MW8bpTXlGDR6etouITkmieSY\nntiMp46Y2tZ4vB5qvLVU1laSXX6Y/SUH2V+aTY7zSIO/lzFGG5fG9KJ7ZFe6R3alY0Rsq3Sglkfv\nmuh8PwJypKCCb7Yc4bvtx3BVe9AoCgMT2zF6YGd6xUWd1yZ2n89HtacGl9tVd0Hg/11RW0m1toLs\ngmMUuArJdxXirK0IeI6osMgTyd8UQ3RYJJFhVqLCrESGWTFqjRfUbQN5ZCgwiUtgbT0uHq+HvfUJ\nPn8b5TX+Sc/CdWZ62i7hqPM4xyvz1P07hseqLY/dI7s22ioYrLjUet2UVpdRWl1GSXUppTVllFWX\nU+2ppsZTS423pu53LbWeGmq8tdR4avw/3lpqPLV4fKfOZKpVtMRZOhEf2ZXukd3oHtmVyDBri5df\nnrOvcyEk+3pVNW6+35HL15uOcDjf/x+oQ4yZ0QM6cUXvDpiNrds488u4uNxVauIvqKz7XbdcUl2K\nj8BfN4NGT2Rd4o80WNXXUSe9thqshGkNbeKioK3/8Q4WiUtgbTEuHq+H3cX72JL/E1vzs9QL/Qh9\nOP3svRng6ENiVIKayAtchWQV/sz2wp3sKd5Hbd1IoSadkSRbopr8LYYTI602Ny61XjcVtRWUVZdT\nWlOXyKvLKPlFYm/ORGQ6RYtea8Cg0ROmNaDX6jFoDBi0egxaPWHaMDpFdKB7ZDfiLJ0xnIdWTEn2\ndS6kZF/P5/Ox70gZX285zMZdebg9Pgx6DZcnxzJ6QCfi2rfOZBHNiUutp5bCqmIK6hJ/aXUZpTVl\nJ66wa8pw1lQ0ekEAoKAQpjVgqPsJ0xowaAwnrdOrr8M09fuE0c5ko1NEB6LCIs/LxUJrf19ClcQl\nsLYSF7fXza6iPWzJ38ZP+VlUul2Av5PwAHsfBjj6kBAZf8b+OzWeGnYX7yOr7rHhoqpiwP//O87S\nmeR2vUiy9SAm2sLh/AJcdbcXK2pdVLorG7Qu1rc4VtRWUuutPe37GrXGExWJuopFVF0rY2SYBaPW\nWJfE/cldr9GHZF8kSfZ1LsRkf7KyihrW/HSUb7YcpbDMP9LeJZ0iGT2wE4MS7Rj05+/L2dJx8Xg9\nlNc6G1yNn3xBUOWporq+Oc1TQ3Vdk1ujfQp+waQz0qFuJMJOdSMRdgxvj1lvbrHPAKH1fQklF2Jc\nvD4vZTXllFaXAf6mXJ1Gi06jq3utQ6fRolX8vwPdr22JuHh9XqrcVQ1utakJUV2upNJdhc/nQwFQ\nFBT8Sda/qKCuUU5aj0K1t4ZdRbtxuf1/cyINVvo7+jDA3oeEqG5nfR/a5/NxvDLPn/gLdrKv9GCT\n/z8rKBh1RsLVzsRmzHpTw9bBMCuRYZFEGiwYW3nE0ZYiyb7OhZ7s63m9Pn7aX8iqzUfYvr8QHxCm\n19I3IYZBPe30TYjBaAhuM38oxMXn8+H2eU66ADjpt7eGKncVeZUFHKkbiCivMv+U1oOosMhThiOO\nNdvPumNhU+Li8XqocFfirKnAWVtBRW0lHq8bLz58Pl/db2/d67rfPh8+fHh93hO/fT4MWgNGnRGT\nzohRG+b/rS4b0Wt0IXH7IxS+L83lcrsoqiqhuKqE4uqSBq/9v0ubnJzA35lVvQhQtGg1WvQ6HT6P\nD42iQVE0KIqCBgWNokGjKCjU/VY0KCh16xSqPFVqYne5q07bKtYSosOiGODw1+C7WeOC0tHM5Xax\nq2gve0v2Ywk3Qa2O8JOfBjopqZt0xotytFBJ9nUulmR/srziSr7deoyNu/LIK/E3rel1GnrH2xjU\n007/S9phNrb8vaRQj0sgtZ5ajlfmqSMQHnPmcrTiOCXVpQ32U1Aw60yE6cIwasMw6sIwao2E6cIw\nacPq1hvr1tfvY/TfOgjXcLSgQE3i5bVOKmorcNZUUlFbQXltBa66JtDzQato1fL7LwT8FwSRYZHY\nwqKwGaPrfqKIDLMG7Q9oUy+CXJ4qtZZa7a7GarAQY7KhC8JAUD6fj9KaMo5X5HGsIpfjlXkUVRX7\nE3lVCVWe6oDHKShEhlmJDotS46YoCh6vB7fXjdvnOfW1z7/sf+3G7fXg8bpRNFDr8eDzefH+4uLO\n/9qrXgCefGGh1+hPGh/DrD4qa657NPbEI7MmzHoz4ToTRp0JTd2Fnw8f/gzgUy8U6lOC1+erW+/f\nrqBgM0af14vGtvj35XyQZF/nYkz29Xw+Hzl5Tjb9nM+m3fkcLfB3mtFqFC7t5k/8A3q0w2I2tMj7\ntZW4NEVFbSVHncc5WnGco85jHKvIo9JdSZW7mipPNVUtUHPSKBoi9OFE6MMJ15v9rw0RROjNhOvD\n/c28+Gt2iqJBg6LW8tQa3y9qd4qiUOOppcpdpSZJl7uKKne1utzwdVWjCay+jPUJ7MRFQHTdchTR\nYf6nQdxef7Kq9dbirkte6muvm1qvu24fd91yLVojFJSUUFlXRpfbVfdTVVc7dVHtqQlYLn+yicJu\nake7ukc7HaZ22M3tmvR4p8/no6S61J/UK3M55szleGUuxyryAl54mXQmosMi/Z/ZGI0tLIooYyQ2\nYzTRYVFEhVlb7H5uc/8f1bfohOL95JZ0If19aUmS7OtczMn+l44WVLDp5zw2/ZzPoTx/b36NotAz\nLopBPe0MTLQTFXH2z++31bicDZ/PR623Fpe7mmpPVd0FQDXVnmpc7iqqT1qOibRCtY4IQzjhdck9\nQh+OSRcajxj67+9WU1JdSlFVcd1PyUmviymtOT//rgoKprpbDiadv2nWrDP5X+uNhGkMlNSUkV9Z\nSIGrIGC5FBT18U7/GA/tiDZGqcn9eIU/qf9yNkmNosFuakeHcAex4e3pEN6eWLODGJPtvM4oeTH9\nP2oOiUtgkuzrSLIPLK/EpSb+/Uf9nYkUIKFzJIMS/TV+R3TzOqpdCHEJhgshLrVeNyVVpQ0uAIqq\nStTbHf5OaHq1M5q+/rWiq1vW1XVO83dM02v0tLdFUVOBer/VpDMRpjU067ZBlbuawqoi8isLyHcV\nku8qIL/uMc/i6pKAx2gUDQ6znQ7mE0m9Q3h77OZ2ITFHxIXwfQkGiUtgkuzrSLI/s6KyKjbtzmfT\nz/nsySlRG6c72cMZ0MPOwMR2dG1vOWMt9EKLS0uRuAQW7LjUeGrVC4HCqmIiw6x0CG+Pw9QupJu8\n5fsSmMQlMJnPXjSZzWpk/K+6MP5XXSitqGHr3gK27M4n62Axn353kE+/O0i0JYwBPdoxINFOzy5R\nZzVGvxDnk0GrV2vtQogTJNkLIsMNjOjXkRH9OlJV4ybrQBGbdxfw074Cvt58hK83H8EUpqNfQgwD\nEu30jrdhCpOvjhBCtBXyF1s0YDToGNTTwaCeDtweL3tyStiyp4Ate/L5fkcu3+/IRadVSOpqY0Bi\nO0b+Ko7W724mhBDidCTZi0bptBqSutlI6mbj1nE9OJTrZMuefLbsKWDb/kK27S/k7S9+xhFlolfX\naJK6RtOrazSR4S3zWJ8QQoiWIcleNImiKHSNtdA11sL1w7uTX+Lix70F7D9Wzk978/l261G+3XoU\ngE7twtXk3zMuivAgDOYjhBCi6STZi7NijzIx/lddsNstHM8t5VCuk53ZxezKLmb34RKObKrgq02H\nUYC49ha11p/YJTLoQ/gKIYRoSP7qinOm1WiI72AlvoOVa37dFbfHy/6jZezKLmZndjH7jpaSnVvO\nFxsOodUoxHewcmm3aHrHxxDf0YJWI738hRAimCTZixan02pI7BJFYpco/mtYPNW1HvYeKW2Q/Pce\nKWXZ2oOYwrQkdbWRHG+jd7wNe5SptYsvhBAXHEn2IujC9FqSu9lI7mYDoLLKzc7sYrIOFrF9fyGb\nd+ezeXc+AI5okz/xd7PRq2u0POInhBAtQP6SivPObNQxqKedQT3tgH/Gvu0Hisg6UMTO7GJWbT7C\nqs1H0GoUEjpaSY63kRwfQ7dYCxqNPOgnhBDNFdRkv2DBArZu3YqiKKSkpNC3b191W3V1NXPnzmXP\nnj1kZGQA8MEHH7Bs2TJ1n+3bt7NlyxbuuOMOKisrMZv947bPmjWL3r17B7Po4jxyRJsZE21mzMDO\n6v3+rANFZB0sYs/hUnYfLuXfaw4QbtRxaTcbfbrH0Lu77Zwm8BFCiItJ0JL9hg0byM7OJi0tjX37\n9pGSkkJaWpq6fdGiRSQlJbFnzx513eTJk5k8ebJ6/PLly9VtCxcuJDExMVjFFSHi5Pv9N4zojtNV\n62/yP1DI9gNF/LArjx925QEQ54igd/cY+nS3kdApUobzFUKIRgQt2a9bt45x48YBkJCQQGlpKU6n\nk4iICAAeeeQRSkpKGtTkT/byyy/z3HPPBat4oo2IMOm5rJeDy3o58Pl8HC2sZNu+QrYfKGR3TgmH\n8px8/n02RoO2rtbvr/nbrOdvelIhhAh1QUv2BQUFJCcnq8s2m438/Hw12UdERFBSEng6yp9++okO\nHTpgt9vVdUuWLKG4uJiEhARSUlIwGuWP+cVGURQ6tQunU7twrh4SR3WNh52HitleN5rfyR39OrUL\np3dd4u/ROQq9Tmr9QoiL13nroNecmXTT09O54YYb1OXp06fTs2dP4uLiSE1N5d133+Wee+5p9Pjo\naDM6XctPZ3m66QMvZq0Zl86dohh/eTwAR/OdbNqVx6ZduWzbW0DmhhwyN+RgNGhJ6BxFfEcr8R0j\nie9opWusFYM+uFOeyvclMIlLYBKXwCQugTU3LkFL9g6Hg4KCAnU5Ly+vQU39dNavX8//+3//T10e\nP368+nrMmDF8/vnnpz2+uLiymaU9M5lXObBQiose+HUvO7/uZaem1sPuwyVs2+fv6LdjfyFZ+wvV\nfTWKQmyMmThHBF3qf9pbWmxc/1CKSyiRuAQmcQlM4hJYSM1nP3ToUF588UWmTp1KVlYWDodDbcI/\nndzcXMLDwzEY/H90fT4fd999N0uWLMFqtbJ+/Xp69OgRrGKLC4RBr6V3fAy942MAqK71cCS/gkN5\n5eTkOcnJdZKT7+RoQWtw2+QAABrHSURBVAXf78hVj7OGG05cALSPoEenKGIi5ZaREKJtC1qyHzhw\nIMnJyUydOhVFUUhNTSUjIwOLxcL48eN56KGHOH78OAcOHOCOO+5gypQpXHvtteTn52Oz2dTzKIrC\nlClTuOuuuzCZTLRv354HH3wwWMUWF6gwvZbuHa1072hV13l9PgpKXBzKdfovAPKc5OSVs/1AEdsP\nFKn7tY82kdTNxqV14/tHmGRiHyFE26L4mnMzvY0IRrOPNCcFdiHGxemq5XCek+zccnZlF/NzTglV\nNR4AdWKfS7tFk9Qtmh6dowgLcO//QoxLS5C4BCZxCUziElhINeML0VZFmPT0qqvFXzU4DrfHy8Hj\n5ew4WMTOg8XsPeKf2Gf5+kPotAqXdIokqWs0l3az0a2DTOwjhAg9kuyFOAOdVsMlnSK5pFMk/zU0\nnuoaD3sOl7Aju5idB4v5+VAJuw6V8O81BzCFaenZJZo+PezEROiJa2+Rkf6EEK1Okr0QzRRm0NK7\newy9u/s7/zldtezKLmZHdjE7Dhbx494Cftx74kmU+k5/ce0txLX3/3ZEm9AoMs6/EOL8kGQvxDmK\nMOn5VS8Hv+rlAKCorIoSl5tte/I5lFvOoVznKZ3+wvRaujgi1OQf1z6CTu0iZPAfIURQSLIXooXZ\nrEZ6Jljo3v7Eo6ZOVy05eU41+R/KK2f/0TL2HilV99FqFLrFWvz9BeKiuaRzZMDOf0II0VyS7IU4\nDyJMepK6RpPUNVpdV1Pr4UhBhf8CIM9J9vFyDhwrZ9/RMj5bl61O8Vuf/BM6WdEHYWRIIcSFT5K9\nEK3EoNcS38FKfIcTz/67qt3sOVzKrkPF7MouZs8R/xS/y9YeRK/zdxTsFRdFUld/z3+Z6U8I0RSS\n7IUIIaYwHX0TYuib4O/8V1lVy885JezK/v/t3X1s1FWi//H3dKbTznSm7UzbmbaU0oItLS14ZS8g\nElAUvYH7+8XIH4ZFJWZdozH4gEElXcXdEEHBuLvgJj7skmyEjU0INyG//LywZnX17pYi4oKUhz7Q\n54fp9Gna0lKgzP1j6rSVARfWMu3M55VMxvnOfMczx2M/3+/5fs85PZyu7w4+/uvLWuJijeRlJVEw\n0mOQ7bZp2J+IhKSwF5nErPGx3JGXxh15gXUl+gYucrahh9MjZ/5jb/yzxBnJz0oOdvtPd9t0x7+I\nAAp7kSnFbjWPu/Pf1z/EmYYezjQEzviP13RyvCaw4E9CvInZ2Q4KsgMHANNSEzAo/EWiksJeZApL\nssWxaI6bRXPcQGDY33fBf6a+h2OVXo5VegFItMYGwn9G4AAg3WlV+ItECYW9SARxJsZzV3EGdxVn\nAODtGeRMfXew2/+rM+18daYdgGSbmekuO26nhXSnFbfTSrrDiiMxTt3/IhFGYS8SwdKSLaQlW1h6\neyZ+vx9P90j413dT2djDt+c6+fbc+H1iTTG4HZZA+DutuB0jz04LNkusegNEpiCFvUiUMBgMpI8E\n+D13TAMCd/t7ugdp6xrA0zUw8jxIW/cATd7zV31HQrwJt9MaXPwnf3oyljj9GRGZ7PR/qUgUs8bH\nkpsRO26sP4Df78d3/uL4A4CuATzdA9S3BWb/O/RVI8YYA7mZicwZWfVvZmaixv6LTEIKexG5isFg\nINkWR7ItjtnZjnHvXbo8THVzL6fruzhV101Ns4/qkYl/4mKN5E9PZk5OYOx/lkvD/0QmA4W9iNyQ\nWJMxOPXv6mUjE/809HCqrptT9V0j9wEEhv/ZrYFpgufkOCmc4SAtzR7m0otEJ4W9iPxLrPGx3JGf\nxh35gYl/uvuGgmf9p+q6OHK6nSOnAyMA0lOsFExPZk6Ok4IZDmyW2HAWXSRqKOxF5EflsMcFh//5\n/X7augaCwX+2sYfP/9HC5/9owQDMSLczJ8fJnBwHeVlJWuhHZIIo7EVkwhgMBjJSEshISeC+n2Th\ndCbw1bctnKoLnPlXN/uoa+vj/x+uJ9YUQ35W0kj4OzXdr8iPSGEvIreM0RjDrGlJzJqWxP9dksuF\ni5epbPSNhH8XFXXdVNR1AzXBZYHn5DjISU8kPcVKXKzO/EVuhsJeRMIm3jx+lT9f/xCn67upGDnz\nHzvjn4HAJEGZqQlkpiYwbeQ5I8WKWQcBItelsBeRSSPJFsedRencWZQevN5/pqGHJm8/Ld7zNHec\n5x/VHfyjuiO4z9iDgGlpgQOAzBQdBIiMpbAXkUlp7PX+sXoHLgaDv6Vj9PmqgwADFGQ7uHOOm5/M\nTsMarzv/JXop7EVkSkm0mkmcYaZgxuhkP36/n76BS+MOAOrbejk9sg7AR4fOMndmCovmuLn9tlRd\n+5eoo7AXkSnPYDCQmGAmMcFM4ZiDgI6eQcpPeyg/5eGbqg6+qeogzmxkfl4qi+akMyfHoel9JSoo\n7EUkYqUmW/jPxTn85+Icmrz9lJ8KBH9ZReBhs8SyoMDFojlubstK0lA/iVgTGvZbt27l+PHjGAwG\nSkpKmDdvXvC9oaEhNm/eTFVVFfv37wegvLyc559/nry8PADy8/N57bXXaG1t5eWXX2Z4eJi0tDR2\n7NiB2WyeyKKLSITJSrORdbeN1ctmcq6ll8OnPHx12sNn3zTz2TfNOBPjWFjoZlGhW2P8JeJMWNgf\nOXKE+vp6SktLqampoaSkhNLS0uD727dvp7CwkKqqqnH7LVy4kJ07d47btnPnTtauXcvKlSt55513\n2LdvH2vXrp2oootIBDMYDMGx/mvuu40z9T0cPtXGsUov/13ewH+XN2COjSHDmUBGqpWMlAQyUwLP\nLodF3f4yJU1Y2JeVlbFixQoAZs2ahc/no7+/H5vNBsCGDRvo6enhwIEDP/hd5eXl/OpXvwJg+fLl\n7N69W2EvIv8yY0wMRblOinKdrPuPYU7UdHKs0ktj+8hNfp6+733egMthCQztS7WODPFL0IQ/MulN\nWNh3dHRQVFQUfO10OvF6vcGwt9ls9PT0XLVfdXU1Tz/9ND6fj/Xr17NkyRIGBweD3fYpKSl4vd6J\nKraIRKlYk5GfzHbxk9kuAK5c8dPhG6Slc4DWzvO0dgzQ0nk+8M+dA1A5uq8BSEmKJycjkdumJTFr\nWiIz3Hb1Asikcctu0PP7/T/4mZycHNavX8/KlStpbGxk3bp1HDp06Ia/x+GwYpqABTW0PGdoqpfQ\nVC+hTaV6cbsTKfreNr/fT1fvBZo8/TS299Ho6aPR00+Dp5ejZ9o5OjLjn9kUw6ysZApznBTkOCiY\n4cSRGH/Nf9dUqpdbSfUS2o3Wy4SFvcvloqNjdIKL9vZ20tLSrruP2+1m1apVAGRnZ5OamorH48Fq\ntXLhwgXi4+PxeDy4XK7rfk9398C//gO+Jy3Njtfb98MfjDKql9BUL6FFUr1kOuLJdMSzaHbg75rf\n78fru0BNs4/qZh81zT7O1Hdxuq4ruE9qUjy3ZSUxKzOJ26YlkeVKwBgTE1H18mNSvYR2rXq53gHA\nhIX9kiVL2LVrF2vWrKGiogKXyxXswr+WAwcO4PV6eeKJJ/B6vXR2duJ2u7nrrrs4ePAgDz74IIcO\nHWLp0qUTVWwRkZtiMBhwJVtwJVtYXJQOwIWLl6lt7QuGf02zj8MVHg5XeACIizWSm2GnIDeFFJuZ\n6S4bmakJ6v6XH53B/8/0i9+kt99+m6NHj2IwGHj99dc5deoUdrud+++/n+eee462tjaqqqooLi7m\n4YcfZvny5WzcuJHe3l4uXbrE+vXrufvuu2lvb+eVV15haGiIzMxMtm3bRmzstae+nIgjQR1hhqZ6\nCU31Elq018t38/0Hwr+XmmYfLR3nGftH2BgTmCZ4uss27pGYEH3DjaO9vVzLzZzZT2jYh4vC/tZR\nvYSmeglN9XK1waHL9F28wsmqdhrb+2ls76fJ28/FS1fGfS4pIXDmnzXmACAjxYoxJnJ7AdReQptU\n3fgiIvLDLHEmsrPsuOyjZ+5Xrvhp7xkcCf8+mtrP09jex8naLk7Wjt4DYI6NYYbbTm5GYuCRmUha\nUjwGTQgk36OwFxGZZGJiDKQ7raQ7rSwoGL0h+fyFSzS199PQ3k+jp5+6tl6qm31UNfmCn7FZYslJ\nH3MAkGEnyRYXjp8hk4jCXkRkikiIj2V2toPZ2aOL/Vy4eJkGTz/nWnqpa+ultrX3qh4AZ2LcmPBP\nZGZGInFmTQIUTRT2IiJTWLzZRP70ZPKnJwe39Q1cpK6tj9qWQPjXtvby9VkvX58NTEhmjDGQk24n\nPzuZ2dMd5GUlYYlTHEQy/dcVEYkwdquZuTNTmDszBfhuIqAhalt7OdfSy9nGHmpb+6hp6eWTww0Y\nDDDDbWf2SPjnT0/CGn/tEU8y9SjsRUQinMFgICUpnpSkeP595B6AwaHL1DT7ONvYw9mGHmpbe6lr\n6+PgkUYMwHSXjfzsZAqyHeRPT8ZmUfhPZQp7EZEoZIkzUTwzheKRs/+hS8OB8G/o4WxjD+daemlo\n7+fTo00ATEtLIC8rmbxpSczKStJd/1OMwl5ERIiLNTInx8mcHCcAly4PB7r8R8K/ptlHs/c8n3/T\nDEBigpnbpgWm/b0tK4kZbjuxpsgd8z/VKexFROQqsSbjuDv/Lw9fobG9n+omH1XNPqqbejhW6eVY\nZeCmP5MxhpwM++gBwLSkqJz1b7JS2IuIyA8yGWOCQ/fuXzA9eNNfVXMPNU2B8f7nmnupHjPm3+Ww\nMCsziRnp9uCsf7r2Hx4KexERuWGjN/2lc+ecMQv/tASCv3pk7v+yijbKKtqC+znscVfN++92WImJ\n0fX/iaSwFxGRH0W82URhjpPCkev+V/x+2joHaAhO+RuY/vdETScnajqD+8WaYpiWevXiP/LjUdiL\niMiEiDEYyExNIDM1AeaMbu8buEjTyKI/je39NHoDi//UtY1f3CU3M5GC6ckU5TrJy0oi1qRZ/26W\nwl5ERG4pu9U8rgcAAjcAtnUNBFb9aw8Ef3Wzj9qWXj4pb8BsimF2toOiXCdFuU4yU6wa+ncDFPYi\nIhJ2JmMMWWk2stJsUBTYZk+yUPZNEydru6io7eLbc518ey7Q/e+wx1GU66Q4NzBcUDf+XZ/CXkRE\nJqV48/iJf7r7hjhZ20lFbRen6rr5nxOt/M+JVgxAToadotwUinOd5GYkasz/9yjsRURkSnDY41g6\nL5Ol8zK54vdT39ZHxchZf3Wzj9rWPv7f3+swGWOYmWEnb3oyeVlJzJqWREKUz/WvsBcRkSknxmAI\njvv/P3flMDh0mbMNPVTUdVHV1ENVs4/KMWP+g9P9ZiWRl5VESmJ0TfersBcRkSnPEmfi3/JS+be8\nVGBkoZ8WH1WNPqqaAnP9j53u12GPGwn+wAFAVpotosf6K+xFRCTiWOJMFOemUJwbuN5/efgKDZ5+\nqpp6AlP+NvVw5HQ7R063AxBvNjLDbSfbbSfbbSPbbScjxYrJGBnX/hX2IiIS8UzGGGZmJjIzM5H/\nWAh+v5/27kEqm3qoavJR3eSjsjGw6M/YfaalJTBjJPyz3Xamp9mIM0+98f4KexERiToGgwG304rb\naWXpvEwgMN1vU/t56j19NHj6aPD00+ztp76tD2gd2Q/SndZxPQDTXTYSrZN70R+FvYiICIGhfrdl\nBZbs/c7l4Su0dJynwdM/cgDQR0N7P62dA5Sf8gQ/l2Qzf2+6XzvpTgvGmMlxGUBhLyIicg0mY0yw\nCx8ygMCc/96eweABwHfT/p4818XJc13BfWNNMWSOmfM/e+TZGoZhgAp7ERGRGxBjMOB2WHE7rCwo\ncAW39w9eGp3vvz1wEDB6GWBUSmIcOemJ/HRFHs7E+FtSZoW9iIjIj8BmiaVwhoPCGY7gtrFz/o99\nHKv0cvcdmZER9lu3buX48eMYDAZKSkqYN29e8L2hoSE2b95MVVUV+/fvD27fvn07X3/9NZcvX+ap\np57igQceYNOmTVRUVJCcnAzAE088wT333DORRRcREfmXjZ3zf3HR6PZLl6/c0il9Jyzsjxw5Qn19\nPaWlpdTU1FBSUkJpaWnw/e3bt1NYWEhVVVVw2+HDh6mqqqK0tJTu7m4eeughHnjgAQBefPFFli9f\nPlHFFRERuWVu9dz9Exb2ZWVlrFixAoBZs2bh8/no7+/HZrMBsGHDBnp6ejhw4EBwnwULFgTP/hMT\nExkcHGR4eHiiiigiIhIVJuzQoqOjA4dj9LqF0+nE6/UGX38X+mMZjUasVisA+/btY9myZRiNgckL\n9uzZw7p169iwYQNdXV1X7SsiIiKh3bIb9Px+/z/92U8//ZR9+/axe/duAB588EGSk5MpLCzkgw8+\n4N1332Xz5s3X3N/hsGIy/fgzHKWl2X/074wEqpfQVC+hqV5CU72EpnoJ7UbrZcLC3uVy0dHREXzd\n3t5OWlraD+735Zdf8t577/H73/8euz3wYxYvXhx8/9577+WXv/zldb+ju3vg5gp9HWlpdrzevh/+\nYJRRvYSmeglN9RKa6iU01Uto16qX6x0ATFg3/pIlSzh48CAAFRUVuFyukF33Y/X19bF9+3bef//9\n4J33AM8++yyNjY0AlJeXk5eXN1HFFhERiTgTdmY/f/58ioqKWLNmDQaDgddff539+/djt9u5//77\nee6552hra6O2tpbHHnuMhx9+mIGBAbq7u3nhhReC3/PWW2/xyCOP8MILL2CxWLBarWzbtm2iii0i\nIhJxDP4buZg+RUxEt4+6k0JTvYSmeglN9RKa6iU01Utok6obX0RERCYHhb2IiEiEU9iLiIhEOIW9\niIhIhIvIG/RERERklM7sRUREIpzCXkREJMIp7EVERCKcwl5ERCTCKexFREQinMJeREQkwt2y9eyn\nqq1bt3L8+HEMBgMlJSXMmzcv3EUKu/Lycp5//vng6oP5+fm89tprYS5VeFVWVvLMM8/w+OOP8+ij\nj9La2srLL7/M8PAwaWlp7NixA7PZHO5i3nLfr5dNmzZRUVERXNXyiSee4J577glvIcNg+/btfP31\n11y+fJmnnnqKuXPnqr1wdb385S9/ier2Mjg4yKZNm+js7GRoaIhnnnmGgoKCm2orCvvrOHLkCPX1\n9ZSWllJTU0NJSQmlpaXhLtaksHDhQnbu3BnuYkwKAwMDbNmyhcWLFwe37dy5k7Vr17Jy5Ureeecd\n9u3bx9q1a8NYylsvVL0AvPjiiyxfvjxMpQq/w4cPU1VVRWlpKd3d3Tz00EMsXrw46ttLqHq58847\no7q9fPbZZxQXF/Pkk0/S3NzMz372M+bPn39TbUXd+NdRVlbGihUrAJg1axY+n4/+/v4wl0omG7PZ\nzIcffojL5QpuKy8v57777gNg+fLllJWVhat4YROqXgQWLFjAb3/7WwASExMZHBxUeyF0vQwPD4e5\nVOG1atUqnnzySQBaW1txu9033VYU9tfR0dGBw+EIvnY6nXi93jCWaPKorq7m6aef5qc//Sl/+9vf\nwl2csDKZTMTHx4/bNjg4GOxaS0lJicp2E6peAPbs2cO6devYsGEDXV1dYShZeBmNRqxWKwD79u1j\n2bJlai+Erhej0Rj17QVgzZo1bNy4kZKSkptuK+rGvwGaWTggJyeH9evXs3LlShobG1m3bh2HDh2K\nymuM/wy1m1EPPvggycnJFBYW8sEHH/Duu++yefPmcBcrLD799FP27dvH7t27eeCBB4Lbo729jK2X\nkydPqr0AH3/8MadPn+all14a1z5upK3ozP46XC4XHR0dwdft7e2kpaWFsUSTg9vtZtWqVRgMBrKz\ns0lNTcXj8YS7WJOK1WrlwoULAHg8HnVlj1i8eDGFhYUA3HvvvVRWVoa5ROHx5Zdf8t577/Hhhx9i\nt9vVXkZ8v16ivb2cPHmS1tZWAAoLCxkeHiYhIeGm2orC/jqWLFnCwYMHAaioqMDlcmGz2cJcqvA7\ncOAAf/jDHwDwer10dnbidrvDXKrJ5a677gq2nUOHDrF06dIwl2hyePbZZ2lsbAQC9zV8N6IjmvT1\n9bF9+3bef//94F3mai+h6yXa28vRo0fZvXs3ELisPDAwcNNtRave/YC3336bo0ePYjAYeP311yko\nKAh3kcKuv7+fjRs30tvby6VLl1i/fj133313uIsVNidPnuStt96iubkZk8mE2+3m7bffZtOmTQwN\nDZGZmcm2bduIjY0Nd1FvqVD18uijj/LBBx9gsViwWq1s27aNlJSUcBf1liotLWXXrl3k5uYGt735\n5pu8+uqrUd1eQtXL6tWr2bNnT9S2lwsXLvCLX/yC1tZWLly4wPr16ykuLuaVV1654baisBcREYlw\n6sYXERGJcAp7ERGRCKewFxERiXAKexERkQinsBcREYlwCnsRuaX279/Pxo0bw10MkaiisBcREYlw\nmhtfREL66KOP+OSTTxgeHmbmzJn8/Oc/56mnnmLZsmWcOXMGgF//+te43W4+//xzfve73xEfH4/F\nYmHLli243W6OHz/O1q1biY2NJSkpibfeegsYnZippqaGzMxM3n33XQwGQzh/rkhE05m9iFzlxIkT\n/PnPf2bv3r2UlpZit9v5+9//TmNjI6tXr+ZPf/oTCxcuZPfu3QwODvLqq6+ya9cuPvroI5YtW8Zv\nfvMbAF566SW2bNnCnj17WLBgAX/961+BwKqJW7ZsYf/+/VRVVVFRURHOnysS8XRmLyJXKS8vp6Gh\ngXXr1gEwMDCAx+MhOTmZ4uJiAObPn88f//hH6urqSElJIT09HYCFCxfy8ccf09XVRW9vL/n5+QA8\n/vjjQOCa/dy5c7FYLEBgYaW+vr5b/AtFoovCXkSuYjabuffee8ctJ9rU1MTq1auDr/1+PwaD4aru\n97HbrzUbt9FovGofEZk46sYXkavMnz+fL774gvPnzwOwd+9evF4vPp+PU6dOAXDs2DFmz55NTk4O\nnZ2dtLS0AFBWVsbtt9+Ow+EgOTmZEydOALB792727t0bnh8kEuV0Zi8iV5k7dy6PPPIIjz32GHFx\ncbhcLhYtWoTb7Wb//v28+eab+P1+3nnnHeLj43njjTfYsGEDZrMZq9XKG2+8AcCOHTvYunUrJpMJ\nu93Ojh07OHToUJh/nUj00ap3IvJPaWpqYu3atXzxxRfhLoqI3CB144uIiEQ4ndmLiIhEOJ3Zi4iI\nRDiFvYiISIRT2IuIiEQ4hb2IiEiEU9iLiIhEOIW9iIhIhPtfdYesZBF91oUAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d45f8240>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "ESzWeTn19kii",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### b) Merge 2"
      ]
    },
    {
      "metadata": {
        "id": "BxR0KuE2Ety8",
        "colab_type": "code",
        "outputId": "a6fc3716-ba3a-4b97-dfec-a508a3794e5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 6388
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "model = deep_cnn(input_channels = 3).to(device)\n",
        "epoch = 30\n",
        "\n",
        "#learning_rate = 0.000001 # for sim_cnn_v1\n",
        "learning_rate = 0.0001 # for deep_cnn\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()\n",
        "#criterion = nn.BCELoss()\n",
        "train_loss, val_loss = [], []\n",
        "for i in range(1,1+epoch):\n",
        "    train_net(model, train_loader_1,i, train_loss)\n",
        "    validate(model, test_loader_1, val_loss)\n",
        "    torch.save(model.state_dict(), '/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn1_epoch'+str(i)+'.pkl')\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Epoch: 1 [0/16000 0%]\tLoss: 0.731542\n",
            "Train Epoch: 1 [1600/16000 10%]\tLoss: 0.507179\n",
            "Train Epoch: 1 [3200/16000 20%]\tLoss: 0.382588\n",
            "Train Epoch: 1 [4800/16000 30%]\tLoss: 0.378191\n",
            "Train Epoch: 1 [6400/16000 40%]\tLoss: 0.298161\n",
            "Train Epoch: 1 [8000/16000 50%]\tLoss: 0.286079\n",
            "Train Epoch: 1 [9600/16000 60%]\tLoss: 0.238348\n",
            "Train Epoch: 1 [11200/16000 70%]\tLoss: 0.267318\n",
            "Train Epoch: 1 [12800/16000 80%]\tLoss: 0.265799\n",
            "Train Epoch: 1 [14400/16000 90%]\tLoss: 0.197233\n",
            "Validation set: Average loss: 0.2139\n",
            "\n",
            "Train Epoch: 2 [0/16000 0%]\tLoss: 0.207101\n",
            "Train Epoch: 2 [1600/16000 10%]\tLoss: 0.233740\n",
            "Train Epoch: 2 [3200/16000 20%]\tLoss: 0.211937\n",
            "Train Epoch: 2 [4800/16000 30%]\tLoss: 0.194322\n",
            "Train Epoch: 2 [6400/16000 40%]\tLoss: 0.176323\n",
            "Train Epoch: 2 [8000/16000 50%]\tLoss: 0.210766\n",
            "Train Epoch: 2 [9600/16000 60%]\tLoss: 0.173454\n",
            "Train Epoch: 2 [11200/16000 70%]\tLoss: 0.177653\n",
            "Train Epoch: 2 [12800/16000 80%]\tLoss: 0.189558\n",
            "Train Epoch: 2 [14400/16000 90%]\tLoss: 0.176248\n",
            "Validation set: Average loss: 0.2004\n",
            "\n",
            "Train Epoch: 3 [0/16000 0%]\tLoss: 0.222119\n",
            "Train Epoch: 3 [1600/16000 10%]\tLoss: 0.214074\n",
            "Train Epoch: 3 [3200/16000 20%]\tLoss: 0.170895\n",
            "Train Epoch: 3 [4800/16000 30%]\tLoss: 0.177554\n",
            "Train Epoch: 3 [6400/16000 40%]\tLoss: 0.166730\n",
            "Train Epoch: 3 [8000/16000 50%]\tLoss: 0.202735\n",
            "Train Epoch: 3 [9600/16000 60%]\tLoss: 0.268720\n",
            "Train Epoch: 3 [11200/16000 70%]\tLoss: 0.197223\n",
            "Train Epoch: 3 [12800/16000 80%]\tLoss: 0.111168\n",
            "Train Epoch: 3 [14400/16000 90%]\tLoss: 0.136354\n",
            "Validation set: Average loss: 0.1940\n",
            "\n",
            "Train Epoch: 4 [0/16000 0%]\tLoss: 0.218408\n",
            "Train Epoch: 4 [1600/16000 10%]\tLoss: 0.160316\n",
            "Train Epoch: 4 [3200/16000 20%]\tLoss: 0.174141\n",
            "Train Epoch: 4 [4800/16000 30%]\tLoss: 0.173223\n",
            "Train Epoch: 4 [6400/16000 40%]\tLoss: 0.190863\n",
            "Train Epoch: 4 [8000/16000 50%]\tLoss: 0.214298\n",
            "Train Epoch: 4 [9600/16000 60%]\tLoss: 0.194361\n",
            "Train Epoch: 4 [11200/16000 70%]\tLoss: 0.154216\n",
            "Train Epoch: 4 [12800/16000 80%]\tLoss: 0.128254\n",
            "Train Epoch: 4 [14400/16000 90%]\tLoss: 0.189296\n",
            "Validation set: Average loss: 0.1917\n",
            "\n",
            "Train Epoch: 5 [0/16000 0%]\tLoss: 0.152791\n",
            "Train Epoch: 5 [1600/16000 10%]\tLoss: 0.158100\n",
            "Train Epoch: 5 [3200/16000 20%]\tLoss: 0.220164\n",
            "Train Epoch: 5 [4800/16000 30%]\tLoss: 0.229085\n",
            "Train Epoch: 5 [6400/16000 40%]\tLoss: 0.157952\n",
            "Train Epoch: 5 [8000/16000 50%]\tLoss: 0.223752\n",
            "Train Epoch: 5 [9600/16000 60%]\tLoss: 0.216382\n",
            "Train Epoch: 5 [11200/16000 70%]\tLoss: 0.155867\n",
            "Train Epoch: 5 [12800/16000 80%]\tLoss: 0.203019\n",
            "Train Epoch: 5 [14400/16000 90%]\tLoss: 0.187099\n",
            "Validation set: Average loss: 0.1886\n",
            "\n",
            "Train Epoch: 6 [0/16000 0%]\tLoss: 0.213274\n",
            "Train Epoch: 6 [1600/16000 10%]\tLoss: 0.132244\n",
            "Train Epoch: 6 [3200/16000 20%]\tLoss: 0.149252\n",
            "Train Epoch: 6 [4800/16000 30%]\tLoss: 0.220876\n",
            "Train Epoch: 6 [6400/16000 40%]\tLoss: 0.192635\n",
            "Train Epoch: 6 [8000/16000 50%]\tLoss: 0.175956\n",
            "Train Epoch: 6 [9600/16000 60%]\tLoss: 0.178527\n",
            "Train Epoch: 6 [11200/16000 70%]\tLoss: 0.196430\n",
            "Train Epoch: 6 [12800/16000 80%]\tLoss: 0.133390\n",
            "Train Epoch: 6 [14400/16000 90%]\tLoss: 0.207476\n",
            "Validation set: Average loss: 0.1882\n",
            "\n",
            "Train Epoch: 7 [0/16000 0%]\tLoss: 0.129981\n",
            "Train Epoch: 7 [1600/16000 10%]\tLoss: 0.180569\n",
            "Train Epoch: 7 [3200/16000 20%]\tLoss: 0.151674\n",
            "Train Epoch: 7 [4800/16000 30%]\tLoss: 0.178089\n",
            "Train Epoch: 7 [6400/16000 40%]\tLoss: 0.140804\n",
            "Train Epoch: 7 [8000/16000 50%]\tLoss: 0.237235\n",
            "Train Epoch: 7 [9600/16000 60%]\tLoss: 0.140757\n",
            "Train Epoch: 7 [11200/16000 70%]\tLoss: 0.196181\n",
            "Train Epoch: 7 [12800/16000 80%]\tLoss: 0.117308\n",
            "Train Epoch: 7 [14400/16000 90%]\tLoss: 0.176970\n",
            "Validation set: Average loss: 0.1877\n",
            "\n",
            "Train Epoch: 8 [0/16000 0%]\tLoss: 0.133982\n",
            "Train Epoch: 8 [1600/16000 10%]\tLoss: 0.132524\n",
            "Train Epoch: 8 [3200/16000 20%]\tLoss: 0.199686\n",
            "Train Epoch: 8 [4800/16000 30%]\tLoss: 0.116108\n",
            "Train Epoch: 8 [6400/16000 40%]\tLoss: 0.183759\n",
            "Train Epoch: 8 [8000/16000 50%]\tLoss: 0.178632\n",
            "Train Epoch: 8 [9600/16000 60%]\tLoss: 0.161834\n",
            "Train Epoch: 8 [11200/16000 70%]\tLoss: 0.170832\n",
            "Train Epoch: 8 [12800/16000 80%]\tLoss: 0.195489\n",
            "Train Epoch: 8 [14400/16000 90%]\tLoss: 0.228369\n",
            "Validation set: Average loss: 0.1852\n",
            "\n",
            "Train Epoch: 9 [0/16000 0%]\tLoss: 0.171097\n",
            "Train Epoch: 9 [1600/16000 10%]\tLoss: 0.168956\n",
            "Train Epoch: 9 [3200/16000 20%]\tLoss: 0.156432\n",
            "Train Epoch: 9 [4800/16000 30%]\tLoss: 0.152283\n",
            "Train Epoch: 9 [6400/16000 40%]\tLoss: 0.145492\n",
            "Train Epoch: 9 [8000/16000 50%]\tLoss: 0.215442\n",
            "Train Epoch: 9 [9600/16000 60%]\tLoss: 0.203639\n",
            "Train Epoch: 9 [11200/16000 70%]\tLoss: 0.135269\n",
            "Train Epoch: 9 [12800/16000 80%]\tLoss: 0.152049\n",
            "Train Epoch: 9 [14400/16000 90%]\tLoss: 0.200989\n",
            "Validation set: Average loss: 0.1854\n",
            "\n",
            "Train Epoch: 10 [0/16000 0%]\tLoss: 0.138279\n",
            "Train Epoch: 10 [1600/16000 10%]\tLoss: 0.135836\n",
            "Train Epoch: 10 [3200/16000 20%]\tLoss: 0.236098\n",
            "Train Epoch: 10 [4800/16000 30%]\tLoss: 0.243120\n",
            "Train Epoch: 10 [6400/16000 40%]\tLoss: 0.192401\n",
            "Train Epoch: 10 [8000/16000 50%]\tLoss: 0.169276\n",
            "Train Epoch: 10 [9600/16000 60%]\tLoss: 0.154382\n",
            "Train Epoch: 10 [11200/16000 70%]\tLoss: 0.190561\n",
            "Train Epoch: 10 [12800/16000 80%]\tLoss: 0.193553\n",
            "Train Epoch: 10 [14400/16000 90%]\tLoss: 0.178371\n",
            "Validation set: Average loss: 0.1837\n",
            "\n",
            "Train Epoch: 11 [0/16000 0%]\tLoss: 0.114111\n",
            "Train Epoch: 11 [1600/16000 10%]\tLoss: 0.215006\n",
            "Train Epoch: 11 [3200/16000 20%]\tLoss: 0.189313\n",
            "Train Epoch: 11 [4800/16000 30%]\tLoss: 0.180577\n",
            "Train Epoch: 11 [6400/16000 40%]\tLoss: 0.157544\n",
            "Train Epoch: 11 [8000/16000 50%]\tLoss: 0.162200\n",
            "Train Epoch: 11 [9600/16000 60%]\tLoss: 0.127988\n",
            "Train Epoch: 11 [11200/16000 70%]\tLoss: 0.176598\n",
            "Train Epoch: 11 [12800/16000 80%]\tLoss: 0.169883\n",
            "Train Epoch: 11 [14400/16000 90%]\tLoss: 0.192270\n",
            "Validation set: Average loss: 0.1826\n",
            "\n",
            "Train Epoch: 12 [0/16000 0%]\tLoss: 0.203484\n",
            "Train Epoch: 12 [1600/16000 10%]\tLoss: 0.193325\n",
            "Train Epoch: 12 [3200/16000 20%]\tLoss: 0.160474\n",
            "Train Epoch: 12 [4800/16000 30%]\tLoss: 0.137997\n",
            "Train Epoch: 12 [6400/16000 40%]\tLoss: 0.163324\n",
            "Train Epoch: 12 [8000/16000 50%]\tLoss: 0.180821\n",
            "Train Epoch: 12 [9600/16000 60%]\tLoss: 0.186858\n",
            "Train Epoch: 12 [11200/16000 70%]\tLoss: 0.141293\n",
            "Train Epoch: 12 [12800/16000 80%]\tLoss: 0.180074\n",
            "Train Epoch: 12 [14400/16000 90%]\tLoss: 0.170737\n",
            "Validation set: Average loss: 0.1813\n",
            "\n",
            "Train Epoch: 13 [0/16000 0%]\tLoss: 0.245993\n",
            "Train Epoch: 13 [1600/16000 10%]\tLoss: 0.121682\n",
            "Train Epoch: 13 [3200/16000 20%]\tLoss: 0.169080\n",
            "Train Epoch: 13 [4800/16000 30%]\tLoss: 0.202570\n",
            "Train Epoch: 13 [6400/16000 40%]\tLoss: 0.142657\n",
            "Train Epoch: 13 [8000/16000 50%]\tLoss: 0.101734\n",
            "Train Epoch: 13 [9600/16000 60%]\tLoss: 0.145791\n",
            "Train Epoch: 13 [11200/16000 70%]\tLoss: 0.082988\n",
            "Train Epoch: 13 [12800/16000 80%]\tLoss: 0.180862\n",
            "Train Epoch: 13 [14400/16000 90%]\tLoss: 0.169086\n",
            "Validation set: Average loss: 0.1806\n",
            "\n",
            "Train Epoch: 14 [0/16000 0%]\tLoss: 0.177850\n",
            "Train Epoch: 14 [1600/16000 10%]\tLoss: 0.122347\n",
            "Train Epoch: 14 [3200/16000 20%]\tLoss: 0.167390\n",
            "Train Epoch: 14 [4800/16000 30%]\tLoss: 0.178282\n",
            "Train Epoch: 14 [6400/16000 40%]\tLoss: 0.137021\n",
            "Train Epoch: 14 [8000/16000 50%]\tLoss: 0.141684\n",
            "Train Epoch: 14 [9600/16000 60%]\tLoss: 0.117786\n",
            "Train Epoch: 14 [11200/16000 70%]\tLoss: 0.179077\n",
            "Train Epoch: 14 [12800/16000 80%]\tLoss: 0.126114\n",
            "Train Epoch: 14 [14400/16000 90%]\tLoss: 0.195524\n",
            "Validation set: Average loss: 0.1806\n",
            "\n",
            "Train Epoch: 15 [0/16000 0%]\tLoss: 0.145423\n",
            "Train Epoch: 15 [1600/16000 10%]\tLoss: 0.171279\n",
            "Train Epoch: 15 [3200/16000 20%]\tLoss: 0.102684\n",
            "Train Epoch: 15 [4800/16000 30%]\tLoss: 0.213487\n",
            "Train Epoch: 15 [6400/16000 40%]\tLoss: 0.114516\n",
            "Train Epoch: 15 [8000/16000 50%]\tLoss: 0.206726\n",
            "Train Epoch: 15 [9600/16000 60%]\tLoss: 0.138286\n",
            "Train Epoch: 15 [11200/16000 70%]\tLoss: 0.091957\n",
            "Train Epoch: 15 [12800/16000 80%]\tLoss: 0.148819\n",
            "Train Epoch: 15 [14400/16000 90%]\tLoss: 0.169278\n",
            "Validation set: Average loss: 0.1808\n",
            "\n",
            "Train Epoch: 16 [0/16000 0%]\tLoss: 0.075290\n",
            "Train Epoch: 16 [1600/16000 10%]\tLoss: 0.167861\n",
            "Train Epoch: 16 [3200/16000 20%]\tLoss: 0.130917\n",
            "Train Epoch: 16 [4800/16000 30%]\tLoss: 0.113524\n",
            "Train Epoch: 16 [6400/16000 40%]\tLoss: 0.142801\n",
            "Train Epoch: 16 [8000/16000 50%]\tLoss: 0.179766\n",
            "Train Epoch: 16 [9600/16000 60%]\tLoss: 0.136363\n",
            "Train Epoch: 16 [11200/16000 70%]\tLoss: 0.157813\n",
            "Train Epoch: 16 [12800/16000 80%]\tLoss: 0.139388\n",
            "Train Epoch: 16 [14400/16000 90%]\tLoss: 0.114505\n",
            "Validation set: Average loss: 0.1807\n",
            "\n",
            "Train Epoch: 17 [0/16000 0%]\tLoss: 0.106406\n",
            "Train Epoch: 17 [1600/16000 10%]\tLoss: 0.121143\n",
            "Train Epoch: 17 [3200/16000 20%]\tLoss: 0.168483\n",
            "Train Epoch: 17 [4800/16000 30%]\tLoss: 0.157992\n",
            "Train Epoch: 17 [6400/16000 40%]\tLoss: 0.160818\n",
            "Train Epoch: 17 [8000/16000 50%]\tLoss: 0.178223\n",
            "Train Epoch: 17 [9600/16000 60%]\tLoss: 0.137427\n",
            "Train Epoch: 17 [11200/16000 70%]\tLoss: 0.132610\n",
            "Train Epoch: 17 [12800/16000 80%]\tLoss: 0.114395\n",
            "Train Epoch: 17 [14400/16000 90%]\tLoss: 0.110976\n",
            "Validation set: Average loss: 0.1811\n",
            "\n",
            "Train Epoch: 18 [0/16000 0%]\tLoss: 0.143141\n",
            "Train Epoch: 18 [1600/16000 10%]\tLoss: 0.133985\n",
            "Train Epoch: 18 [3200/16000 20%]\tLoss: 0.152359\n",
            "Train Epoch: 18 [4800/16000 30%]\tLoss: 0.130081\n",
            "Train Epoch: 18 [6400/16000 40%]\tLoss: 0.184478\n",
            "Train Epoch: 18 [8000/16000 50%]\tLoss: 0.108301\n",
            "Train Epoch: 18 [9600/16000 60%]\tLoss: 0.185759\n",
            "Train Epoch: 18 [11200/16000 70%]\tLoss: 0.123292\n",
            "Train Epoch: 18 [12800/16000 80%]\tLoss: 0.101288\n",
            "Train Epoch: 18 [14400/16000 90%]\tLoss: 0.198095\n",
            "Validation set: Average loss: 0.1812\n",
            "\n",
            "Train Epoch: 19 [0/16000 0%]\tLoss: 0.184424\n",
            "Train Epoch: 19 [1600/16000 10%]\tLoss: 0.080275\n",
            "Train Epoch: 19 [3200/16000 20%]\tLoss: 0.114657\n",
            "Train Epoch: 19 [4800/16000 30%]\tLoss: 0.117803\n",
            "Train Epoch: 19 [6400/16000 40%]\tLoss: 0.156484\n",
            "Train Epoch: 19 [8000/16000 50%]\tLoss: 0.187740\n",
            "Train Epoch: 19 [9600/16000 60%]\tLoss: 0.197646\n",
            "Train Epoch: 19 [11200/16000 70%]\tLoss: 0.215139\n",
            "Train Epoch: 19 [12800/16000 80%]\tLoss: 0.164321\n",
            "Train Epoch: 19 [14400/16000 90%]\tLoss: 0.171072\n",
            "Validation set: Average loss: 0.1824\n",
            "\n",
            "Train Epoch: 20 [0/16000 0%]\tLoss: 0.165724\n",
            "Train Epoch: 20 [1600/16000 10%]\tLoss: 0.134321\n",
            "Train Epoch: 20 [3200/16000 20%]\tLoss: 0.135635\n",
            "Train Epoch: 20 [4800/16000 30%]\tLoss: 0.156695\n",
            "Train Epoch: 20 [6400/16000 40%]\tLoss: 0.157024\n",
            "Train Epoch: 20 [8000/16000 50%]\tLoss: 0.125949\n",
            "Train Epoch: 20 [9600/16000 60%]\tLoss: 0.116340\n",
            "Train Epoch: 20 [11200/16000 70%]\tLoss: 0.129574\n",
            "Train Epoch: 20 [12800/16000 80%]\tLoss: 0.143986\n",
            "Train Epoch: 20 [14400/16000 90%]\tLoss: 0.144281\n",
            "Validation set: Average loss: 0.1826\n",
            "\n",
            "Train Epoch: 21 [0/16000 0%]\tLoss: 0.094056\n",
            "Train Epoch: 21 [1600/16000 10%]\tLoss: 0.100724\n",
            "Train Epoch: 21 [3200/16000 20%]\tLoss: 0.083827\n",
            "Train Epoch: 21 [4800/16000 30%]\tLoss: 0.190133\n",
            "Train Epoch: 21 [6400/16000 40%]\tLoss: 0.163620\n",
            "Train Epoch: 21 [8000/16000 50%]\tLoss: 0.160219\n",
            "Train Epoch: 21 [9600/16000 60%]\tLoss: 0.110781\n",
            "Train Epoch: 21 [11200/16000 70%]\tLoss: 0.149304\n",
            "Train Epoch: 21 [12800/16000 80%]\tLoss: 0.195093\n",
            "Train Epoch: 21 [14400/16000 90%]\tLoss: 0.205734\n",
            "Validation set: Average loss: 0.1815\n",
            "\n",
            "Train Epoch: 22 [0/16000 0%]\tLoss: 0.213560\n",
            "Train Epoch: 22 [1600/16000 10%]\tLoss: 0.134546\n",
            "Train Epoch: 22 [3200/16000 20%]\tLoss: 0.241123\n",
            "Train Epoch: 22 [4800/16000 30%]\tLoss: 0.108797\n",
            "Train Epoch: 22 [6400/16000 40%]\tLoss: 0.128903\n",
            "Train Epoch: 22 [8000/16000 50%]\tLoss: 0.168839\n",
            "Train Epoch: 22 [9600/16000 60%]\tLoss: 0.151298\n",
            "Train Epoch: 22 [11200/16000 70%]\tLoss: 0.144198\n",
            "Train Epoch: 22 [12800/16000 80%]\tLoss: 0.197441\n",
            "Train Epoch: 22 [14400/16000 90%]\tLoss: 0.133483\n",
            "Validation set: Average loss: 0.1822\n",
            "\n",
            "Train Epoch: 23 [0/16000 0%]\tLoss: 0.124045\n",
            "Train Epoch: 23 [1600/16000 10%]\tLoss: 0.128913\n",
            "Train Epoch: 23 [3200/16000 20%]\tLoss: 0.145604\n",
            "Train Epoch: 23 [4800/16000 30%]\tLoss: 0.196596\n",
            "Train Epoch: 23 [6400/16000 40%]\tLoss: 0.165540\n",
            "Train Epoch: 23 [8000/16000 50%]\tLoss: 0.120189\n",
            "Train Epoch: 23 [9600/16000 60%]\tLoss: 0.173306\n",
            "Train Epoch: 23 [11200/16000 70%]\tLoss: 0.097782\n",
            "Train Epoch: 23 [12800/16000 80%]\tLoss: 0.184356\n",
            "Train Epoch: 23 [14400/16000 90%]\tLoss: 0.129367\n",
            "Validation set: Average loss: 0.1823\n",
            "\n",
            "Train Epoch: 24 [0/16000 0%]\tLoss: 0.090886\n",
            "Train Epoch: 24 [1600/16000 10%]\tLoss: 0.179715\n",
            "Train Epoch: 24 [3200/16000 20%]\tLoss: 0.064618\n",
            "Train Epoch: 24 [4800/16000 30%]\tLoss: 0.103000\n",
            "Train Epoch: 24 [6400/16000 40%]\tLoss: 0.170280\n",
            "Train Epoch: 24 [8000/16000 50%]\tLoss: 0.115349\n",
            "Train Epoch: 24 [9600/16000 60%]\tLoss: 0.133433\n",
            "Train Epoch: 24 [11200/16000 70%]\tLoss: 0.115403\n",
            "Train Epoch: 24 [12800/16000 80%]\tLoss: 0.088954\n",
            "Train Epoch: 24 [14400/16000 90%]\tLoss: 0.144855\n",
            "Validation set: Average loss: 0.1817\n",
            "\n",
            "Train Epoch: 25 [0/16000 0%]\tLoss: 0.126537\n",
            "Train Epoch: 25 [1600/16000 10%]\tLoss: 0.138624\n",
            "Train Epoch: 25 [3200/16000 20%]\tLoss: 0.156938\n",
            "Train Epoch: 25 [4800/16000 30%]\tLoss: 0.117682\n",
            "Train Epoch: 25 [6400/16000 40%]\tLoss: 0.109206\n",
            "Train Epoch: 25 [8000/16000 50%]\tLoss: 0.110404\n",
            "Train Epoch: 25 [9600/16000 60%]\tLoss: 0.176551\n",
            "Train Epoch: 25 [11200/16000 70%]\tLoss: 0.157434\n",
            "Train Epoch: 25 [12800/16000 80%]\tLoss: 0.074836\n",
            "Train Epoch: 25 [14400/16000 90%]\tLoss: 0.117955\n",
            "Validation set: Average loss: 0.1820\n",
            "\n",
            "Train Epoch: 26 [0/16000 0%]\tLoss: 0.162892\n",
            "Train Epoch: 26 [1600/16000 10%]\tLoss: 0.163715\n",
            "Train Epoch: 26 [3200/16000 20%]\tLoss: 0.106640\n",
            "Train Epoch: 26 [4800/16000 30%]\tLoss: 0.162278\n",
            "Train Epoch: 26 [6400/16000 40%]\tLoss: 0.149204\n",
            "Train Epoch: 26 [8000/16000 50%]\tLoss: 0.107408\n",
            "Train Epoch: 26 [9600/16000 60%]\tLoss: 0.152581\n",
            "Train Epoch: 26 [11200/16000 70%]\tLoss: 0.098889\n",
            "Train Epoch: 26 [12800/16000 80%]\tLoss: 0.223760\n",
            "Train Epoch: 26 [14400/16000 90%]\tLoss: 0.110131\n",
            "Validation set: Average loss: 0.1821\n",
            "\n",
            "Train Epoch: 27 [0/16000 0%]\tLoss: 0.153805\n",
            "Train Epoch: 27 [1600/16000 10%]\tLoss: 0.154591\n",
            "Train Epoch: 27 [3200/16000 20%]\tLoss: 0.143390\n",
            "Train Epoch: 27 [4800/16000 30%]\tLoss: 0.103451\n",
            "Train Epoch: 27 [6400/16000 40%]\tLoss: 0.150748\n",
            "Train Epoch: 27 [8000/16000 50%]\tLoss: 0.159500\n",
            "Train Epoch: 27 [9600/16000 60%]\tLoss: 0.145560\n",
            "Train Epoch: 27 [11200/16000 70%]\tLoss: 0.115018\n",
            "Train Epoch: 27 [12800/16000 80%]\tLoss: 0.133458\n",
            "Train Epoch: 27 [14400/16000 90%]\tLoss: 0.116032\n",
            "Validation set: Average loss: 0.1821\n",
            "\n",
            "Train Epoch: 28 [0/16000 0%]\tLoss: 0.131308\n",
            "Train Epoch: 28 [1600/16000 10%]\tLoss: 0.144087\n",
            "Train Epoch: 28 [3200/16000 20%]\tLoss: 0.145286\n",
            "Train Epoch: 28 [4800/16000 30%]\tLoss: 0.151546\n",
            "Train Epoch: 28 [6400/16000 40%]\tLoss: 0.081035\n",
            "Train Epoch: 28 [8000/16000 50%]\tLoss: 0.145355\n",
            "Train Epoch: 28 [9600/16000 60%]\tLoss: 0.163543\n",
            "Train Epoch: 28 [11200/16000 70%]\tLoss: 0.180932\n",
            "Train Epoch: 28 [12800/16000 80%]\tLoss: 0.150003\n",
            "Train Epoch: 28 [14400/16000 90%]\tLoss: 0.140348\n",
            "Validation set: Average loss: 0.1840\n",
            "\n",
            "Train Epoch: 29 [0/16000 0%]\tLoss: 0.180967\n",
            "Train Epoch: 29 [1600/16000 10%]\tLoss: 0.109953\n",
            "Train Epoch: 29 [3200/16000 20%]\tLoss: 0.094451\n",
            "Train Epoch: 29 [4800/16000 30%]\tLoss: 0.154435\n",
            "Train Epoch: 29 [6400/16000 40%]\tLoss: 0.078753\n",
            "Train Epoch: 29 [8000/16000 50%]\tLoss: 0.106780\n",
            "Train Epoch: 29 [9600/16000 60%]\tLoss: 0.100723\n",
            "Train Epoch: 29 [11200/16000 70%]\tLoss: 0.106948\n",
            "Train Epoch: 29 [12800/16000 80%]\tLoss: 0.116813\n",
            "Train Epoch: 29 [14400/16000 90%]\tLoss: 0.159889\n",
            "Validation set: Average loss: 0.1855\n",
            "\n",
            "Train Epoch: 30 [0/16000 0%]\tLoss: 0.106818\n",
            "Train Epoch: 30 [1600/16000 10%]\tLoss: 0.110737\n",
            "Train Epoch: 30 [3200/16000 20%]\tLoss: 0.114701\n",
            "Train Epoch: 30 [4800/16000 30%]\tLoss: 0.129685\n",
            "Train Epoch: 30 [6400/16000 40%]\tLoss: 0.108419\n",
            "Train Epoch: 30 [8000/16000 50%]\tLoss: 0.107083\n",
            "Train Epoch: 30 [9600/16000 60%]\tLoss: 0.157197\n",
            "Train Epoch: 30 [11200/16000 70%]\tLoss: 0.126953\n",
            "Train Epoch: 30 [12800/16000 80%]\tLoss: 0.125278\n",
            "Train Epoch: 30 [14400/16000 90%]\tLoss: 0.140863\n",
            "Validation set: Average loss: 0.1882\n",
            "\n",
            "CPU times: user 16min 19s, sys: 1min 33s, total: 17min 53s\n",
            "Wall time: 17min 55s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "LwBOk6ByFcGl",
        "colab_type": "code",
        "outputId": "5d190f5e-dbe8-4494-a6a0-387d81cc8b3e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "loss_1t = train_loss\n",
        "loss_1v = val_loss\n",
        "\n",
        "plt.title(\"Deep cnn Model loss with merging method 2\")\n",
        "plt.plot(train_loss, label=\"train\")\n",
        "plt.plot(val_loss, label=\"validation\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d4544a58>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "Y2LnEcbj9w7l",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### c) Merge 3"
      ]
    },
    {
      "metadata": {
        "id": "da4Pv4PuF-6x",
        "colab_type": "code",
        "outputId": "9738dc49-908a-42fd-9e13-3a45d4cb5010",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 6388
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "model = deep_cnn(input_channels = 3).to(device)\n",
        "epoch = 30\n",
        "\n",
        "learning_rate = 0.0001 # for deep_cnn\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()\n",
        "\n",
        "train_loss, val_loss = [], []\n",
        "for i in range(1,1+epoch):\n",
        "    train_net(model, train_loader_2, i, train_loss)\n",
        "    validate(model, test_loader_2, val_loss)\n",
        "    torch.save(model.state_dict(), '/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn2_epoch'+str(i)+'.pkl')\n",
        "       "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Epoch: 1 [0/16000 0%]\tLoss: 0.713531\n",
            "Train Epoch: 1 [1600/16000 10%]\tLoss: 0.494121\n",
            "Train Epoch: 1 [3200/16000 20%]\tLoss: 0.370372\n",
            "Train Epoch: 1 [4800/16000 30%]\tLoss: 0.307712\n",
            "Train Epoch: 1 [6400/16000 40%]\tLoss: 0.302980\n",
            "Train Epoch: 1 [8000/16000 50%]\tLoss: 0.227260\n",
            "Train Epoch: 1 [9600/16000 60%]\tLoss: 0.224446\n",
            "Train Epoch: 1 [11200/16000 70%]\tLoss: 0.211022\n",
            "Train Epoch: 1 [12800/16000 80%]\tLoss: 0.238047\n",
            "Train Epoch: 1 [14400/16000 90%]\tLoss: 0.180748\n",
            "Validation set: Average loss: 0.2133\n",
            "\n",
            "Train Epoch: 2 [0/16000 0%]\tLoss: 0.209862\n",
            "Train Epoch: 2 [1600/16000 10%]\tLoss: 0.180508\n",
            "Train Epoch: 2 [3200/16000 20%]\tLoss: 0.188290\n",
            "Train Epoch: 2 [4800/16000 30%]\tLoss: 0.178145\n",
            "Train Epoch: 2 [6400/16000 40%]\tLoss: 0.170748\n",
            "Train Epoch: 2 [8000/16000 50%]\tLoss: 0.224548\n",
            "Train Epoch: 2 [9600/16000 60%]\tLoss: 0.176124\n",
            "Train Epoch: 2 [11200/16000 70%]\tLoss: 0.257514\n",
            "Train Epoch: 2 [12800/16000 80%]\tLoss: 0.172005\n",
            "Train Epoch: 2 [14400/16000 90%]\tLoss: 0.099723\n",
            "Validation set: Average loss: 0.1979\n",
            "\n",
            "Train Epoch: 3 [0/16000 0%]\tLoss: 0.208526\n",
            "Train Epoch: 3 [1600/16000 10%]\tLoss: 0.234231\n",
            "Train Epoch: 3 [3200/16000 20%]\tLoss: 0.193933\n",
            "Train Epoch: 3 [4800/16000 30%]\tLoss: 0.163424\n",
            "Train Epoch: 3 [6400/16000 40%]\tLoss: 0.188153\n",
            "Train Epoch: 3 [8000/16000 50%]\tLoss: 0.215641\n",
            "Train Epoch: 3 [9600/16000 60%]\tLoss: 0.185265\n",
            "Train Epoch: 3 [11200/16000 70%]\tLoss: 0.179302\n",
            "Train Epoch: 3 [12800/16000 80%]\tLoss: 0.178422\n",
            "Train Epoch: 3 [14400/16000 90%]\tLoss: 0.159949\n",
            "Validation set: Average loss: 0.1922\n",
            "\n",
            "Train Epoch: 4 [0/16000 0%]\tLoss: 0.168789\n",
            "Train Epoch: 4 [1600/16000 10%]\tLoss: 0.170295\n",
            "Train Epoch: 4 [3200/16000 20%]\tLoss: 0.187225\n",
            "Train Epoch: 4 [4800/16000 30%]\tLoss: 0.177334\n",
            "Train Epoch: 4 [6400/16000 40%]\tLoss: 0.184105\n",
            "Train Epoch: 4 [8000/16000 50%]\tLoss: 0.190464\n",
            "Train Epoch: 4 [9600/16000 60%]\tLoss: 0.183043\n",
            "Train Epoch: 4 [11200/16000 70%]\tLoss: 0.168907\n",
            "Train Epoch: 4 [12800/16000 80%]\tLoss: 0.144762\n",
            "Train Epoch: 4 [14400/16000 90%]\tLoss: 0.182778\n",
            "Validation set: Average loss: 0.1900\n",
            "\n",
            "Train Epoch: 5 [0/16000 0%]\tLoss: 0.184811\n",
            "Train Epoch: 5 [1600/16000 10%]\tLoss: 0.164171\n",
            "Train Epoch: 5 [3200/16000 20%]\tLoss: 0.173161\n",
            "Train Epoch: 5 [4800/16000 30%]\tLoss: 0.229854\n",
            "Train Epoch: 5 [6400/16000 40%]\tLoss: 0.160145\n",
            "Train Epoch: 5 [8000/16000 50%]\tLoss: 0.163205\n",
            "Train Epoch: 5 [9600/16000 60%]\tLoss: 0.184075\n",
            "Train Epoch: 5 [11200/16000 70%]\tLoss: 0.190104\n",
            "Train Epoch: 5 [12800/16000 80%]\tLoss: 0.127021\n",
            "Train Epoch: 5 [14400/16000 90%]\tLoss: 0.194995\n",
            "Validation set: Average loss: 0.1852\n",
            "\n",
            "Train Epoch: 6 [0/16000 0%]\tLoss: 0.169327\n",
            "Train Epoch: 6 [1600/16000 10%]\tLoss: 0.194178\n",
            "Train Epoch: 6 [3200/16000 20%]\tLoss: 0.099674\n",
            "Train Epoch: 6 [4800/16000 30%]\tLoss: 0.145570\n",
            "Train Epoch: 6 [6400/16000 40%]\tLoss: 0.168254\n",
            "Train Epoch: 6 [8000/16000 50%]\tLoss: 0.174278\n",
            "Train Epoch: 6 [9600/16000 60%]\tLoss: 0.209728\n",
            "Train Epoch: 6 [11200/16000 70%]\tLoss: 0.135079\n",
            "Train Epoch: 6 [12800/16000 80%]\tLoss: 0.142049\n",
            "Train Epoch: 6 [14400/16000 90%]\tLoss: 0.160420\n",
            "Validation set: Average loss: 0.1859\n",
            "\n",
            "Train Epoch: 7 [0/16000 0%]\tLoss: 0.143529\n",
            "Train Epoch: 7 [1600/16000 10%]\tLoss: 0.139771\n",
            "Train Epoch: 7 [3200/16000 20%]\tLoss: 0.176979\n",
            "Train Epoch: 7 [4800/16000 30%]\tLoss: 0.234809\n",
            "Train Epoch: 7 [6400/16000 40%]\tLoss: 0.183424\n",
            "Train Epoch: 7 [8000/16000 50%]\tLoss: 0.177347\n",
            "Train Epoch: 7 [9600/16000 60%]\tLoss: 0.161848\n",
            "Train Epoch: 7 [11200/16000 70%]\tLoss: 0.125025\n",
            "Train Epoch: 7 [12800/16000 80%]\tLoss: 0.225433\n",
            "Train Epoch: 7 [14400/16000 90%]\tLoss: 0.210599\n",
            "Validation set: Average loss: 0.1821\n",
            "\n",
            "Train Epoch: 8 [0/16000 0%]\tLoss: 0.182944\n",
            "Train Epoch: 8 [1600/16000 10%]\tLoss: 0.100943\n",
            "Train Epoch: 8 [3200/16000 20%]\tLoss: 0.156959\n",
            "Train Epoch: 8 [4800/16000 30%]\tLoss: 0.156787\n",
            "Train Epoch: 8 [6400/16000 40%]\tLoss: 0.180820\n",
            "Train Epoch: 8 [8000/16000 50%]\tLoss: 0.172991\n",
            "Train Epoch: 8 [9600/16000 60%]\tLoss: 0.191786\n",
            "Train Epoch: 8 [11200/16000 70%]\tLoss: 0.169625\n",
            "Train Epoch: 8 [12800/16000 80%]\tLoss: 0.178373\n",
            "Train Epoch: 8 [14400/16000 90%]\tLoss: 0.125401\n",
            "Validation set: Average loss: 0.1825\n",
            "\n",
            "Train Epoch: 9 [0/16000 0%]\tLoss: 0.127744\n",
            "Train Epoch: 9 [1600/16000 10%]\tLoss: 0.188116\n",
            "Train Epoch: 9 [3200/16000 20%]\tLoss: 0.210037\n",
            "Train Epoch: 9 [4800/16000 30%]\tLoss: 0.172440\n",
            "Train Epoch: 9 [6400/16000 40%]\tLoss: 0.169487\n",
            "Train Epoch: 9 [8000/16000 50%]\tLoss: 0.133397\n",
            "Train Epoch: 9 [9600/16000 60%]\tLoss: 0.124691\n",
            "Train Epoch: 9 [11200/16000 70%]\tLoss: 0.136044\n",
            "Train Epoch: 9 [12800/16000 80%]\tLoss: 0.194316\n",
            "Train Epoch: 9 [14400/16000 90%]\tLoss: 0.146395\n",
            "Validation set: Average loss: 0.1825\n",
            "\n",
            "Train Epoch: 10 [0/16000 0%]\tLoss: 0.150709\n",
            "Train Epoch: 10 [1600/16000 10%]\tLoss: 0.186534\n",
            "Train Epoch: 10 [3200/16000 20%]\tLoss: 0.148656\n",
            "Train Epoch: 10 [4800/16000 30%]\tLoss: 0.199280\n",
            "Train Epoch: 10 [6400/16000 40%]\tLoss: 0.175420\n",
            "Train Epoch: 10 [8000/16000 50%]\tLoss: 0.196350\n",
            "Train Epoch: 10 [9600/16000 60%]\tLoss: 0.214489\n",
            "Train Epoch: 10 [11200/16000 70%]\tLoss: 0.164184\n",
            "Train Epoch: 10 [12800/16000 80%]\tLoss: 0.186528\n",
            "Train Epoch: 10 [14400/16000 90%]\tLoss: 0.151111\n",
            "Validation set: Average loss: 0.1808\n",
            "\n",
            "Train Epoch: 11 [0/16000 0%]\tLoss: 0.170263\n",
            "Train Epoch: 11 [1600/16000 10%]\tLoss: 0.136102\n",
            "Train Epoch: 11 [3200/16000 20%]\tLoss: 0.225087\n",
            "Train Epoch: 11 [4800/16000 30%]\tLoss: 0.101312\n",
            "Train Epoch: 11 [6400/16000 40%]\tLoss: 0.116886\n",
            "Train Epoch: 11 [8000/16000 50%]\tLoss: 0.140370\n",
            "Train Epoch: 11 [9600/16000 60%]\tLoss: 0.173534\n",
            "Train Epoch: 11 [11200/16000 70%]\tLoss: 0.149887\n",
            "Train Epoch: 11 [12800/16000 80%]\tLoss: 0.098945\n",
            "Train Epoch: 11 [14400/16000 90%]\tLoss: 0.174957\n",
            "Validation set: Average loss: 0.1804\n",
            "\n",
            "Train Epoch: 12 [0/16000 0%]\tLoss: 0.174558\n",
            "Train Epoch: 12 [1600/16000 10%]\tLoss: 0.152027\n",
            "Train Epoch: 12 [3200/16000 20%]\tLoss: 0.115107\n",
            "Train Epoch: 12 [4800/16000 30%]\tLoss: 0.163427\n",
            "Train Epoch: 12 [6400/16000 40%]\tLoss: 0.205736\n",
            "Train Epoch: 12 [8000/16000 50%]\tLoss: 0.189995\n",
            "Train Epoch: 12 [9600/16000 60%]\tLoss: 0.146812\n",
            "Train Epoch: 12 [11200/16000 70%]\tLoss: 0.195226\n",
            "Train Epoch: 12 [12800/16000 80%]\tLoss: 0.178747\n",
            "Train Epoch: 12 [14400/16000 90%]\tLoss: 0.138247\n",
            "Validation set: Average loss: 0.1819\n",
            "\n",
            "Train Epoch: 13 [0/16000 0%]\tLoss: 0.144838\n",
            "Train Epoch: 13 [1600/16000 10%]\tLoss: 0.141383\n",
            "Train Epoch: 13 [3200/16000 20%]\tLoss: 0.170275\n",
            "Train Epoch: 13 [4800/16000 30%]\tLoss: 0.221885\n",
            "Train Epoch: 13 [6400/16000 40%]\tLoss: 0.162121\n",
            "Train Epoch: 13 [8000/16000 50%]\tLoss: 0.123176\n",
            "Train Epoch: 13 [9600/16000 60%]\tLoss: 0.113142\n",
            "Train Epoch: 13 [11200/16000 70%]\tLoss: 0.148513\n",
            "Train Epoch: 13 [12800/16000 80%]\tLoss: 0.146792\n",
            "Train Epoch: 13 [14400/16000 90%]\tLoss: 0.177380\n",
            "Validation set: Average loss: 0.1793\n",
            "\n",
            "Train Epoch: 14 [0/16000 0%]\tLoss: 0.156679\n",
            "Train Epoch: 14 [1600/16000 10%]\tLoss: 0.114099\n",
            "Train Epoch: 14 [3200/16000 20%]\tLoss: 0.150940\n",
            "Train Epoch: 14 [4800/16000 30%]\tLoss: 0.127414\n",
            "Train Epoch: 14 [6400/16000 40%]\tLoss: 0.164650\n",
            "Train Epoch: 14 [8000/16000 50%]\tLoss: 0.141275\n",
            "Train Epoch: 14 [9600/16000 60%]\tLoss: 0.167678\n",
            "Train Epoch: 14 [11200/16000 70%]\tLoss: 0.198493\n",
            "Train Epoch: 14 [12800/16000 80%]\tLoss: 0.150660\n",
            "Train Epoch: 14 [14400/16000 90%]\tLoss: 0.189556\n",
            "Validation set: Average loss: 0.1788\n",
            "\n",
            "Train Epoch: 15 [0/16000 0%]\tLoss: 0.147537\n",
            "Train Epoch: 15 [1600/16000 10%]\tLoss: 0.127880\n",
            "Train Epoch: 15 [3200/16000 20%]\tLoss: 0.166695\n",
            "Train Epoch: 15 [4800/16000 30%]\tLoss: 0.128522\n",
            "Train Epoch: 15 [6400/16000 40%]\tLoss: 0.154638\n",
            "Train Epoch: 15 [8000/16000 50%]\tLoss: 0.140201\n",
            "Train Epoch: 15 [9600/16000 60%]\tLoss: 0.117519\n",
            "Train Epoch: 15 [11200/16000 70%]\tLoss: 0.118664\n",
            "Train Epoch: 15 [12800/16000 80%]\tLoss: 0.157323\n",
            "Train Epoch: 15 [14400/16000 90%]\tLoss: 0.170974\n",
            "Validation set: Average loss: 0.1794\n",
            "\n",
            "Train Epoch: 16 [0/16000 0%]\tLoss: 0.192633\n",
            "Train Epoch: 16 [1600/16000 10%]\tLoss: 0.102448\n",
            "Train Epoch: 16 [3200/16000 20%]\tLoss: 0.156020\n",
            "Train Epoch: 16 [4800/16000 30%]\tLoss: 0.140089\n",
            "Train Epoch: 16 [6400/16000 40%]\tLoss: 0.164051\n",
            "Train Epoch: 16 [8000/16000 50%]\tLoss: 0.108475\n",
            "Train Epoch: 16 [9600/16000 60%]\tLoss: 0.169685\n",
            "Train Epoch: 16 [11200/16000 70%]\tLoss: 0.154021\n",
            "Train Epoch: 16 [12800/16000 80%]\tLoss: 0.178974\n",
            "Train Epoch: 16 [14400/16000 90%]\tLoss: 0.092861\n",
            "Validation set: Average loss: 0.1814\n",
            "\n",
            "Train Epoch: 17 [0/16000 0%]\tLoss: 0.183604\n",
            "Train Epoch: 17 [1600/16000 10%]\tLoss: 0.175464\n",
            "Train Epoch: 17 [3200/16000 20%]\tLoss: 0.124135\n",
            "Train Epoch: 17 [4800/16000 30%]\tLoss: 0.162742\n",
            "Train Epoch: 17 [6400/16000 40%]\tLoss: 0.179450\n",
            "Train Epoch: 17 [8000/16000 50%]\tLoss: 0.109350\n",
            "Train Epoch: 17 [9600/16000 60%]\tLoss: 0.114446\n",
            "Train Epoch: 17 [11200/16000 70%]\tLoss: 0.103970\n",
            "Train Epoch: 17 [12800/16000 80%]\tLoss: 0.127917\n",
            "Train Epoch: 17 [14400/16000 90%]\tLoss: 0.137175\n",
            "Validation set: Average loss: 0.1797\n",
            "\n",
            "Train Epoch: 18 [0/16000 0%]\tLoss: 0.173214\n",
            "Train Epoch: 18 [1600/16000 10%]\tLoss: 0.166462\n",
            "Train Epoch: 18 [3200/16000 20%]\tLoss: 0.114669\n",
            "Train Epoch: 18 [4800/16000 30%]\tLoss: 0.114204\n",
            "Train Epoch: 18 [6400/16000 40%]\tLoss: 0.128920\n",
            "Train Epoch: 18 [8000/16000 50%]\tLoss: 0.190458\n",
            "Train Epoch: 18 [9600/16000 60%]\tLoss: 0.154273\n",
            "Train Epoch: 18 [11200/16000 70%]\tLoss: 0.138818\n",
            "Train Epoch: 18 [12800/16000 80%]\tLoss: 0.116131\n",
            "Train Epoch: 18 [14400/16000 90%]\tLoss: 0.155722\n",
            "Validation set: Average loss: 0.1789\n",
            "\n",
            "Train Epoch: 19 [0/16000 0%]\tLoss: 0.205405\n",
            "Train Epoch: 19 [1600/16000 10%]\tLoss: 0.130122\n",
            "Train Epoch: 19 [3200/16000 20%]\tLoss: 0.157839\n",
            "Train Epoch: 19 [4800/16000 30%]\tLoss: 0.180077\n",
            "Train Epoch: 19 [6400/16000 40%]\tLoss: 0.136615\n",
            "Train Epoch: 19 [8000/16000 50%]\tLoss: 0.212239\n",
            "Train Epoch: 19 [9600/16000 60%]\tLoss: 0.106402\n",
            "Train Epoch: 19 [11200/16000 70%]\tLoss: 0.182758\n",
            "Train Epoch: 19 [12800/16000 80%]\tLoss: 0.147660\n",
            "Train Epoch: 19 [14400/16000 90%]\tLoss: 0.104226\n",
            "Validation set: Average loss: 0.1791\n",
            "\n",
            "Train Epoch: 20 [0/16000 0%]\tLoss: 0.184050\n",
            "Train Epoch: 20 [1600/16000 10%]\tLoss: 0.151442\n",
            "Train Epoch: 20 [3200/16000 20%]\tLoss: 0.154639\n",
            "Train Epoch: 20 [4800/16000 30%]\tLoss: 0.092954\n",
            "Train Epoch: 20 [6400/16000 40%]\tLoss: 0.095212\n",
            "Train Epoch: 20 [8000/16000 50%]\tLoss: 0.155152\n",
            "Train Epoch: 20 [9600/16000 60%]\tLoss: 0.160424\n",
            "Train Epoch: 20 [11200/16000 70%]\tLoss: 0.225463\n",
            "Train Epoch: 20 [12800/16000 80%]\tLoss: 0.179408\n",
            "Train Epoch: 20 [14400/16000 90%]\tLoss: 0.177623\n",
            "Validation set: Average loss: 0.1806\n",
            "\n",
            "Train Epoch: 21 [0/16000 0%]\tLoss: 0.126026\n",
            "Train Epoch: 21 [1600/16000 10%]\tLoss: 0.132408\n",
            "Train Epoch: 21 [3200/16000 20%]\tLoss: 0.121217\n",
            "Train Epoch: 21 [4800/16000 30%]\tLoss: 0.128341\n",
            "Train Epoch: 21 [6400/16000 40%]\tLoss: 0.138470\n",
            "Train Epoch: 21 [8000/16000 50%]\tLoss: 0.163191\n",
            "Train Epoch: 21 [9600/16000 60%]\tLoss: 0.145035\n",
            "Train Epoch: 21 [11200/16000 70%]\tLoss: 0.131097\n",
            "Train Epoch: 21 [12800/16000 80%]\tLoss: 0.137820\n",
            "Train Epoch: 21 [14400/16000 90%]\tLoss: 0.119278\n",
            "Validation set: Average loss: 0.1808\n",
            "\n",
            "Train Epoch: 22 [0/16000 0%]\tLoss: 0.189203\n",
            "Train Epoch: 22 [1600/16000 10%]\tLoss: 0.130761\n",
            "Train Epoch: 22 [3200/16000 20%]\tLoss: 0.142601\n",
            "Train Epoch: 22 [4800/16000 30%]\tLoss: 0.178731\n",
            "Train Epoch: 22 [6400/16000 40%]\tLoss: 0.118441\n",
            "Train Epoch: 22 [8000/16000 50%]\tLoss: 0.150635\n",
            "Train Epoch: 22 [9600/16000 60%]\tLoss: 0.088018\n",
            "Train Epoch: 22 [11200/16000 70%]\tLoss: 0.116324\n",
            "Train Epoch: 22 [12800/16000 80%]\tLoss: 0.125446\n",
            "Train Epoch: 22 [14400/16000 90%]\tLoss: 0.145084\n",
            "Validation set: Average loss: 0.1804\n",
            "\n",
            "Train Epoch: 23 [0/16000 0%]\tLoss: 0.131872\n",
            "Train Epoch: 23 [1600/16000 10%]\tLoss: 0.059797\n",
            "Train Epoch: 23 [3200/16000 20%]\tLoss: 0.105701\n",
            "Train Epoch: 23 [4800/16000 30%]\tLoss: 0.207261\n",
            "Train Epoch: 23 [6400/16000 40%]\tLoss: 0.140490\n",
            "Train Epoch: 23 [8000/16000 50%]\tLoss: 0.100930\n",
            "Train Epoch: 23 [9600/16000 60%]\tLoss: 0.101161\n",
            "Train Epoch: 23 [11200/16000 70%]\tLoss: 0.132986\n",
            "Train Epoch: 23 [12800/16000 80%]\tLoss: 0.085759\n",
            "Train Epoch: 23 [14400/16000 90%]\tLoss: 0.120870\n",
            "Validation set: Average loss: 0.1806\n",
            "\n",
            "Train Epoch: 24 [0/16000 0%]\tLoss: 0.139044\n",
            "Train Epoch: 24 [1600/16000 10%]\tLoss: 0.116409\n",
            "Train Epoch: 24 [3200/16000 20%]\tLoss: 0.116640\n",
            "Train Epoch: 24 [4800/16000 30%]\tLoss: 0.137709\n",
            "Train Epoch: 24 [6400/16000 40%]\tLoss: 0.143555\n",
            "Train Epoch: 24 [8000/16000 50%]\tLoss: 0.152140\n",
            "Train Epoch: 24 [9600/16000 60%]\tLoss: 0.121059\n",
            "Train Epoch: 24 [11200/16000 70%]\tLoss: 0.132351\n",
            "Train Epoch: 24 [12800/16000 80%]\tLoss: 0.113026\n",
            "Train Epoch: 24 [14400/16000 90%]\tLoss: 0.145795\n",
            "Validation set: Average loss: 0.1817\n",
            "\n",
            "Train Epoch: 25 [0/16000 0%]\tLoss: 0.113953\n",
            "Train Epoch: 25 [1600/16000 10%]\tLoss: 0.130351\n",
            "Train Epoch: 25 [3200/16000 20%]\tLoss: 0.161438\n",
            "Train Epoch: 25 [4800/16000 30%]\tLoss: 0.127415\n",
            "Train Epoch: 25 [6400/16000 40%]\tLoss: 0.111284\n",
            "Train Epoch: 25 [8000/16000 50%]\tLoss: 0.163907\n",
            "Train Epoch: 25 [9600/16000 60%]\tLoss: 0.114059\n",
            "Train Epoch: 25 [11200/16000 70%]\tLoss: 0.202762\n",
            "Train Epoch: 25 [12800/16000 80%]\tLoss: 0.109383\n",
            "Train Epoch: 25 [14400/16000 90%]\tLoss: 0.152287\n",
            "Validation set: Average loss: 0.1818\n",
            "\n",
            "Train Epoch: 26 [0/16000 0%]\tLoss: 0.133343\n",
            "Train Epoch: 26 [1600/16000 10%]\tLoss: 0.131788\n",
            "Train Epoch: 26 [3200/16000 20%]\tLoss: 0.139214\n",
            "Train Epoch: 26 [4800/16000 30%]\tLoss: 0.085716\n",
            "Train Epoch: 26 [6400/16000 40%]\tLoss: 0.112708\n",
            "Train Epoch: 26 [8000/16000 50%]\tLoss: 0.107939\n",
            "Train Epoch: 26 [9600/16000 60%]\tLoss: 0.125187\n",
            "Train Epoch: 26 [11200/16000 70%]\tLoss: 0.102754\n",
            "Train Epoch: 26 [12800/16000 80%]\tLoss: 0.154374\n",
            "Train Epoch: 26 [14400/16000 90%]\tLoss: 0.131656\n",
            "Validation set: Average loss: 0.1823\n",
            "\n",
            "Train Epoch: 27 [0/16000 0%]\tLoss: 0.149484\n",
            "Train Epoch: 27 [1600/16000 10%]\tLoss: 0.117490\n",
            "Train Epoch: 27 [3200/16000 20%]\tLoss: 0.133160\n",
            "Train Epoch: 27 [4800/16000 30%]\tLoss: 0.138170\n",
            "Train Epoch: 27 [6400/16000 40%]\tLoss: 0.117789\n",
            "Train Epoch: 27 [8000/16000 50%]\tLoss: 0.122560\n",
            "Train Epoch: 27 [9600/16000 60%]\tLoss: 0.170090\n",
            "Train Epoch: 27 [11200/16000 70%]\tLoss: 0.123925\n",
            "Train Epoch: 27 [12800/16000 80%]\tLoss: 0.127164\n",
            "Train Epoch: 27 [14400/16000 90%]\tLoss: 0.146348\n",
            "Validation set: Average loss: 0.1826\n",
            "\n",
            "Train Epoch: 28 [0/16000 0%]\tLoss: 0.151333\n",
            "Train Epoch: 28 [1600/16000 10%]\tLoss: 0.088221\n",
            "Train Epoch: 28 [3200/16000 20%]\tLoss: 0.138873\n",
            "Train Epoch: 28 [4800/16000 30%]\tLoss: 0.155494\n",
            "Train Epoch: 28 [6400/16000 40%]\tLoss: 0.162129\n",
            "Train Epoch: 28 [8000/16000 50%]\tLoss: 0.178807\n",
            "Train Epoch: 28 [9600/16000 60%]\tLoss: 0.104182\n",
            "Train Epoch: 28 [11200/16000 70%]\tLoss: 0.123034\n",
            "Train Epoch: 28 [12800/16000 80%]\tLoss: 0.113853\n",
            "Train Epoch: 28 [14400/16000 90%]\tLoss: 0.161220\n",
            "Validation set: Average loss: 0.1835\n",
            "\n",
            "Train Epoch: 29 [0/16000 0%]\tLoss: 0.158194\n",
            "Train Epoch: 29 [1600/16000 10%]\tLoss: 0.152925\n",
            "Train Epoch: 29 [3200/16000 20%]\tLoss: 0.048985\n",
            "Train Epoch: 29 [4800/16000 30%]\tLoss: 0.106537\n",
            "Train Epoch: 29 [6400/16000 40%]\tLoss: 0.087614\n",
            "Train Epoch: 29 [8000/16000 50%]\tLoss: 0.110317\n",
            "Train Epoch: 29 [9600/16000 60%]\tLoss: 0.177807\n",
            "Train Epoch: 29 [11200/16000 70%]\tLoss: 0.147925\n",
            "Train Epoch: 29 [12800/16000 80%]\tLoss: 0.146471\n",
            "Train Epoch: 29 [14400/16000 90%]\tLoss: 0.102707\n",
            "Validation set: Average loss: 0.1840\n",
            "\n",
            "Train Epoch: 30 [0/16000 0%]\tLoss: 0.086233\n",
            "Train Epoch: 30 [1600/16000 10%]\tLoss: 0.140878\n",
            "Train Epoch: 30 [3200/16000 20%]\tLoss: 0.126144\n",
            "Train Epoch: 30 [4800/16000 30%]\tLoss: 0.140264\n",
            "Train Epoch: 30 [6400/16000 40%]\tLoss: 0.150615\n",
            "Train Epoch: 30 [8000/16000 50%]\tLoss: 0.134735\n",
            "Train Epoch: 30 [9600/16000 60%]\tLoss: 0.127720\n",
            "Train Epoch: 30 [11200/16000 70%]\tLoss: 0.123187\n",
            "Train Epoch: 30 [12800/16000 80%]\tLoss: 0.082021\n",
            "Train Epoch: 30 [14400/16000 90%]\tLoss: 0.135786\n",
            "Validation set: Average loss: 0.1836\n",
            "\n",
            "CPU times: user 16min 1s, sys: 1min 32s, total: 17min 34s\n",
            "Wall time: 17min 37s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "zUKF_FmvGAwm",
        "colab_type": "code",
        "outputId": "935c22f0-02e3-4680-dc44-918296d1d5ef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "loss_2t = train_loss\n",
        "loss_2v = val_loss \n",
        "\n",
        "plt.title(\"Deep cnn Model loss with merging method 3\")\n",
        "plt.plot(train_loss, label=\"train\")\n",
        "plt.plot(val_loss, label=\"validation\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfsAAAFnCAYAAAChL+DqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xl8VNX5+PHPnS3JJJNkEjKEsMZA\nWMKuQhUIu7LoV9SCiAW1frX+iihaK0tbQqsgauVbcWldWrWt1WhMFRcIiyiISNhkCQRZw5Y9k2Wy\nTWb5/THhksgEEsiQSXjer1eYudvMmYdJnnvOPedcxe12uxFCCCFEm6Vp6QIIIYQQwrck2QshhBBt\nnCR7IYQQoo2TZC+EEEK0cZLshRBCiDZOkr0QQgjRxkmyFy2mZ8+ejB8/nptvvpnExER+9atfsWvX\nrpYu1mXbunUrPXv25N///vd522666SZmzpzZ5NccP348W7duveA+8+fP57XXXmv0+itp7dq1LFiw\nAICjR4+ybds2wBOr8ePHt2TRvLr33nvJyMho6WKodu/eTWZmJgCpqancd999l/V6OTk59OzZ0+u2\n9PR0pk6dyoQJE7j99tvV/yvRukmyFy3qX//6F2lpaXzzzTdMmTKFX//6123ij0uHDh34/PPP663b\ns2cPdru9hUrUssaPH8+zzz4LwLp16/z+//jdd98lISGhpYuh+vjjjzl48KDP36eqqoo5c+aQlJTE\n6tWrmT17NnPnzkWmY2n9dC1dACEAFEVh4sSJ2Gw2XnzxRT744APsdjvPP/88mzZtoqamhmnTpvHw\nww8DcPjwYRYvXkx+fj4Gg4GlS5fSr18/UlNTWbVqFeHh4ezatYvAwEBeeeUVunXrdt57vvHGGyQn\nJ6PT6Rg1ahTz588nPT2d5cuXM2TIENatW0d1dTXLli1jyJAhvPzyy1itVnJzc8nMzMRsNvPaa69h\nsVjOe+3OnTuTn5/PqVOn6NSpEwBffvklw4YN48SJEwC4XC5eeukl0tLSABg4cCCLFi3CaDSyb98+\n5s2bh8PhYOTIkfVee926dbz00ktUVFTQtWtX/vznPxMREdGoOGdmZrJ48WKKi4sJCAjgySefZMSI\nEZSXl/PUU09x9OhR7HY7N9xwA0lJSdjtdq/r9Xq9+pq//e1vGTJkCFOnTqWgoIBhw4bxj3/8g2HD\nhpGRkcH8+fO5//77WblyJbNmzeL1119Hr9dTWlrK6NGjAfjrX//KypUrqamp4ZlnnuFnP/tZvXKf\nOnWK6dOnc++995KSkgLAc889x2uvvcaBAwcYPnx4vZMJb/F5+eWX1f+7W265hbvvvpunnnqKnTt3\n0qNHD/r06UNBQQHLli1jzJgxPP/880RHRzN9+nQeeughPvroI4qLi1mwYAGTJk2iurq6wePrSk1N\n5euvv0av17Njxw5iY2OZPXs2f/7znzlx4gSPPfYYd911F263m1dffZXPPvsMu93O2LFjWbBgAR9+\n+CGffvopX331FUVFRYSFhQHwpz/9iW+//Ra9Xs///d//ER8fT3FxMUlJSWRmZqLVapkyZQoPPfQQ\nACkpKbz66quEhIRw6623ev1+1NTUsGTJEvr27QvADTfcQEFBAaWlper7itZJavbCr4wZM4bdu3dT\nVVXFm2++yeHDh/nss8/4/PPPSUtLY8OGDbhcLmbPns1tt91GWloaixcv5te//jUOhwOA7777jnvu\nuYd169YxduxYXnjhhfPeZ/v27aSkpPDpp5/y2WefsWPHDlavXg3A/v37GTBgAKtWrWLGjBn89a9/\nVY9bvXo1CxcuZN26dURGRvLxxx83+FkmTJjAF198AYDb7Wb9+vVqcgNYtWoVGzduJDU1lS+++ILS\n0lLeeecdABYvXsysWbNIS0tj0KBBnDp1CoCTJ0/y1FNP8eKLL7J+/XqGDh3K4sWLGxVbl8vFE088\nwS9+8QtWr17NM888w29+8xtsNhuffPIJoaGhrFq1irS0NLRaLYcPH25wfV1Dhw5VL79s27aNgQMH\nsnPnTjXON9xwQ73/3/HjxzNr1izmz58PeJqU4+PjWbVqFXfffXe9eNdltVqJiooiLS2Nnj178vjj\nj7Ns2TJWrlzJ559/zokTJy4an2+++YY33niD++67j48++oi8vDw2bNjA008/TWpqaoPvq9Fo+Oyz\nz1i4cCF/+ctfABp9PMCmTZt45JFHWLNmDUeOHOGtt97ivffeY8mSJeollk8//ZTVq1eTkpLC2rVr\nOXnyJO+//z533303/fv357e//S33338/4GnWv+OOO1izZg1Dhw5VvzfLly8nLCyMtLQ0/vOf//D+\n+++zfft2SkpKWLJkCW+99RafffYZeXl5XstpMpkYN24c4PnOpqSkcN1110mibwMk2Qu/EhISgsvl\n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\nEe7/A3p8TUhi5AMPAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d6184d68>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "zs94IYJA90cB",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### d) Merge 3 with resizing"
      ]
    },
    {
      "metadata": {
        "id": "f1xn-YuPpGEy",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class deep_cnns(nn.Module): # due to different input size, the deep_cnn has different output size of last convolutional layer.\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.conv1 = nn.Sequential(\n",
        "            nn.Conv2d(3, 16, kernel_size=5),\n",
        "            nn.BatchNorm2d(16),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(5, stride=3)\n",
        "        )\n",
        "        self.conv2 = nn.Sequential(\n",
        "            nn.Conv2d(16, 32, kernel_size=5),\n",
        "            nn.BatchNorm2d(32),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(5, stride=3)\n",
        "        )\n",
        "        self.conv3 = nn.Sequential(\n",
        "            nn.Conv2d(32, 64, kernel_size=5),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(5, stride=3)\n",
        "        )\n",
        "        self.conv4 = nn.Sequential(\n",
        "            nn.Conv2d(64, 128, kernel_size=5),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(10, stride=3)\n",
        "        )\n",
        "        #self.fc1 = nn.Linear(4096, 20)\n",
        "        self.lastlayer = nn.Sequential(\n",
        "            nn.Dropout(p=0.5),\n",
        "            nn.Linear(5*5*64, 14)\n",
        "        )\n",
        "        \n",
        "    def forward(self, x):\n",
        "        out = self.conv1(x)\n",
        "        out = self.conv2(out)\n",
        "        out = self.conv3(out)\n",
        "        #out = self.conv4(out)\n",
        "        out = out.view(out.size(0),-1)\n",
        "        out = self.lastlayer(out)\n",
        "        return out"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "JQ7tAs24oyCs",
        "colab_type": "code",
        "outputId": "20bc53f0-c110-4d1e-e1a3-71b625931af3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 6388
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "model = deep_cnns().to(device)\n",
        "epoch = 30\n",
        "\n",
        "learning_rate = 0.0001 # for deep_cnn\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()\n",
        "\n",
        "train_loss, val_loss = [], []\n",
        "for i in range(1,1+epoch):\n",
        "    train_net(model, train_loader_3, i, train_loss)\n",
        "    validate(model, test_loader_3, val_loss)\n",
        "    torch.save(model.state_dict(), '/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn3_epoch'+str(i)+'.pkl')\n",
        "    \n",
        "loss_3t = train_loss\n",
        "loss_3v = val_loss    "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Epoch: 1 [0/16000 0%]\tLoss: 0.744592\n",
            "Train Epoch: 1 [1600/16000 10%]\tLoss: 0.213710\n",
            "Train Epoch: 1 [3200/16000 20%]\tLoss: 0.209129\n",
            "Train Epoch: 1 [4800/16000 30%]\tLoss: 0.256412\n",
            "Train Epoch: 1 [6400/16000 40%]\tLoss: 0.217852\n",
            "Train Epoch: 1 [8000/16000 50%]\tLoss: 0.214230\n",
            "Train Epoch: 1 [9600/16000 60%]\tLoss: 0.111161\n",
            "Train Epoch: 1 [11200/16000 70%]\tLoss: 0.222380\n",
            "Train Epoch: 1 [12800/16000 80%]\tLoss: 0.219125\n",
            "Train Epoch: 1 [14400/16000 90%]\tLoss: 0.177939\n",
            "Validation set: Average loss: 0.1980\n",
            "\n",
            "Train Epoch: 2 [0/16000 0%]\tLoss: 0.228655\n",
            "Train Epoch: 2 [1600/16000 10%]\tLoss: 0.168308\n",
            "Train Epoch: 2 [3200/16000 20%]\tLoss: 0.135486\n",
            "Train Epoch: 2 [4800/16000 30%]\tLoss: 0.202290\n",
            "Train Epoch: 2 [6400/16000 40%]\tLoss: 0.256676\n",
            "Train Epoch: 2 [8000/16000 50%]\tLoss: 0.211389\n",
            "Train Epoch: 2 [9600/16000 60%]\tLoss: 0.226139\n",
            "Train Epoch: 2 [11200/16000 70%]\tLoss: 0.300766\n",
            "Train Epoch: 2 [12800/16000 80%]\tLoss: 0.205644\n",
            "Train Epoch: 2 [14400/16000 90%]\tLoss: 0.233230\n",
            "Validation set: Average loss: 0.1933\n",
            "\n",
            "Train Epoch: 3 [0/16000 0%]\tLoss: 0.231610\n",
            "Train Epoch: 3 [1600/16000 10%]\tLoss: 0.174484\n",
            "Train Epoch: 3 [3200/16000 20%]\tLoss: 0.182065\n",
            "Train Epoch: 3 [4800/16000 30%]\tLoss: 0.198665\n",
            "Train Epoch: 3 [6400/16000 40%]\tLoss: 0.163615\n",
            "Train Epoch: 3 [8000/16000 50%]\tLoss: 0.221914\n",
            "Train Epoch: 3 [9600/16000 60%]\tLoss: 0.260680\n",
            "Train Epoch: 3 [11200/16000 70%]\tLoss: 0.167745\n",
            "Train Epoch: 3 [12800/16000 80%]\tLoss: 0.328025\n",
            "Train Epoch: 3 [14400/16000 90%]\tLoss: 0.149770\n",
            "Validation set: Average loss: 0.1894\n",
            "\n",
            "Train Epoch: 4 [0/16000 0%]\tLoss: 0.198919\n",
            "Train Epoch: 4 [1600/16000 10%]\tLoss: 0.173001\n",
            "Train Epoch: 4 [3200/16000 20%]\tLoss: 0.188989\n",
            "Train Epoch: 4 [4800/16000 30%]\tLoss: 0.317754\n",
            "Train Epoch: 4 [6400/16000 40%]\tLoss: 0.207520\n",
            "Train Epoch: 4 [8000/16000 50%]\tLoss: 0.247739\n",
            "Train Epoch: 4 [9600/16000 60%]\tLoss: 0.122072\n",
            "Train Epoch: 4 [11200/16000 70%]\tLoss: 0.209479\n",
            "Train Epoch: 4 [12800/16000 80%]\tLoss: 0.228641\n",
            "Train Epoch: 4 [14400/16000 90%]\tLoss: 0.260780\n",
            "Validation set: Average loss: 0.1877\n",
            "\n",
            "Train Epoch: 5 [0/16000 0%]\tLoss: 0.196600\n",
            "Train Epoch: 5 [1600/16000 10%]\tLoss: 0.237213\n",
            "Train Epoch: 5 [3200/16000 20%]\tLoss: 0.143254\n",
            "Train Epoch: 5 [4800/16000 30%]\tLoss: 0.202100\n",
            "Train Epoch: 5 [6400/16000 40%]\tLoss: 0.200187\n",
            "Train Epoch: 5 [8000/16000 50%]\tLoss: 0.257314\n",
            "Train Epoch: 5 [9600/16000 60%]\tLoss: 0.180844\n",
            "Train Epoch: 5 [11200/16000 70%]\tLoss: 0.141767\n",
            "Train Epoch: 5 [12800/16000 80%]\tLoss: 0.189919\n",
            "Train Epoch: 5 [14400/16000 90%]\tLoss: 0.181582\n",
            "Validation set: Average loss: 0.1855\n",
            "\n",
            "Train Epoch: 6 [0/16000 0%]\tLoss: 0.178539\n",
            "Train Epoch: 6 [1600/16000 10%]\tLoss: 0.159136\n",
            "Train Epoch: 6 [3200/16000 20%]\tLoss: 0.133142\n",
            "Train Epoch: 6 [4800/16000 30%]\tLoss: 0.151325\n",
            "Train Epoch: 6 [6400/16000 40%]\tLoss: 0.171428\n",
            "Train Epoch: 6 [8000/16000 50%]\tLoss: 0.232255\n",
            "Train Epoch: 6 [9600/16000 60%]\tLoss: 0.167919\n",
            "Train Epoch: 6 [11200/16000 70%]\tLoss: 0.185121\n",
            "Train Epoch: 6 [12800/16000 80%]\tLoss: 0.177661\n",
            "Train Epoch: 6 [14400/16000 90%]\tLoss: 0.194008\n",
            "Validation set: Average loss: 0.1846\n",
            "\n",
            "Train Epoch: 7 [0/16000 0%]\tLoss: 0.187826\n",
            "Train Epoch: 7 [1600/16000 10%]\tLoss: 0.136687\n",
            "Train Epoch: 7 [3200/16000 20%]\tLoss: 0.247152\n",
            "Train Epoch: 7 [4800/16000 30%]\tLoss: 0.158183\n",
            "Train Epoch: 7 [6400/16000 40%]\tLoss: 0.119386\n",
            "Train Epoch: 7 [8000/16000 50%]\tLoss: 0.155761\n",
            "Train Epoch: 7 [9600/16000 60%]\tLoss: 0.160063\n",
            "Train Epoch: 7 [11200/16000 70%]\tLoss: 0.160196\n",
            "Train Epoch: 7 [12800/16000 80%]\tLoss: 0.175394\n",
            "Train Epoch: 7 [14400/16000 90%]\tLoss: 0.222506\n",
            "Validation set: Average loss: 0.1822\n",
            "\n",
            "Train Epoch: 8 [0/16000 0%]\tLoss: 0.108686\n",
            "Train Epoch: 8 [1600/16000 10%]\tLoss: 0.155941\n",
            "Train Epoch: 8 [3200/16000 20%]\tLoss: 0.174719\n",
            "Train Epoch: 8 [4800/16000 30%]\tLoss: 0.206101\n",
            "Train Epoch: 8 [6400/16000 40%]\tLoss: 0.193427\n",
            "Train Epoch: 8 [8000/16000 50%]\tLoss: 0.138917\n",
            "Train Epoch: 8 [9600/16000 60%]\tLoss: 0.170516\n",
            "Train Epoch: 8 [11200/16000 70%]\tLoss: 0.186769\n",
            "Train Epoch: 8 [12800/16000 80%]\tLoss: 0.165027\n",
            "Train Epoch: 8 [14400/16000 90%]\tLoss: 0.139128\n",
            "Validation set: Average loss: 0.1813\n",
            "\n",
            "Train Epoch: 9 [0/16000 0%]\tLoss: 0.117665\n",
            "Train Epoch: 9 [1600/16000 10%]\tLoss: 0.220499\n",
            "Train Epoch: 9 [3200/16000 20%]\tLoss: 0.152772\n",
            "Train Epoch: 9 [4800/16000 30%]\tLoss: 0.139438\n",
            "Train Epoch: 9 [6400/16000 40%]\tLoss: 0.141888\n",
            "Train Epoch: 9 [8000/16000 50%]\tLoss: 0.175895\n",
            "Train Epoch: 9 [9600/16000 60%]\tLoss: 0.233917\n",
            "Train Epoch: 9 [11200/16000 70%]\tLoss: 0.155119\n",
            "Train Epoch: 9 [12800/16000 80%]\tLoss: 0.105267\n",
            "Train Epoch: 9 [14400/16000 90%]\tLoss: 0.152199\n",
            "Validation set: Average loss: 0.1806\n",
            "\n",
            "Train Epoch: 10 [0/16000 0%]\tLoss: 0.145603\n",
            "Train Epoch: 10 [1600/16000 10%]\tLoss: 0.264643\n",
            "Train Epoch: 10 [3200/16000 20%]\tLoss: 0.160132\n",
            "Train Epoch: 10 [4800/16000 30%]\tLoss: 0.192609\n",
            "Train Epoch: 10 [6400/16000 40%]\tLoss: 0.180277\n",
            "Train Epoch: 10 [8000/16000 50%]\tLoss: 0.156998\n",
            "Train Epoch: 10 [9600/16000 60%]\tLoss: 0.185167\n",
            "Train Epoch: 10 [11200/16000 70%]\tLoss: 0.188737\n",
            "Train Epoch: 10 [12800/16000 80%]\tLoss: 0.250593\n",
            "Train Epoch: 10 [14400/16000 90%]\tLoss: 0.173923\n",
            "Validation set: Average loss: 0.1777\n",
            "\n",
            "Train Epoch: 11 [0/16000 0%]\tLoss: 0.162267\n",
            "Train Epoch: 11 [1600/16000 10%]\tLoss: 0.215731\n",
            "Train Epoch: 11 [3200/16000 20%]\tLoss: 0.178800\n",
            "Train Epoch: 11 [4800/16000 30%]\tLoss: 0.127845\n",
            "Train Epoch: 11 [6400/16000 40%]\tLoss: 0.140002\n",
            "Train Epoch: 11 [8000/16000 50%]\tLoss: 0.228753\n",
            "Train Epoch: 11 [9600/16000 60%]\tLoss: 0.145446\n",
            "Train Epoch: 11 [11200/16000 70%]\tLoss: 0.154086\n",
            "Train Epoch: 11 [12800/16000 80%]\tLoss: 0.125782\n",
            "Train Epoch: 11 [14400/16000 90%]\tLoss: 0.192747\n",
            "Validation set: Average loss: 0.1789\n",
            "\n",
            "Train Epoch: 12 [0/16000 0%]\tLoss: 0.182713\n",
            "Train Epoch: 12 [1600/16000 10%]\tLoss: 0.161847\n",
            "Train Epoch: 12 [3200/16000 20%]\tLoss: 0.112691\n",
            "Train Epoch: 12 [4800/16000 30%]\tLoss: 0.159701\n",
            "Train Epoch: 12 [6400/16000 40%]\tLoss: 0.149765\n",
            "Train Epoch: 12 [8000/16000 50%]\tLoss: 0.148744\n",
            "Train Epoch: 12 [9600/16000 60%]\tLoss: 0.118888\n",
            "Train Epoch: 12 [11200/16000 70%]\tLoss: 0.192111\n",
            "Train Epoch: 12 [12800/16000 80%]\tLoss: 0.155476\n",
            "Train Epoch: 12 [14400/16000 90%]\tLoss: 0.148981\n",
            "Validation set: Average loss: 0.1781\n",
            "\n",
            "Train Epoch: 13 [0/16000 0%]\tLoss: 0.130241\n",
            "Train Epoch: 13 [1600/16000 10%]\tLoss: 0.205775\n",
            "Train Epoch: 13 [3200/16000 20%]\tLoss: 0.253256\n",
            "Train Epoch: 13 [4800/16000 30%]\tLoss: 0.135365\n",
            "Train Epoch: 13 [6400/16000 40%]\tLoss: 0.139469\n",
            "Train Epoch: 13 [8000/16000 50%]\tLoss: 0.171022\n",
            "Train Epoch: 13 [9600/16000 60%]\tLoss: 0.231049\n",
            "Train Epoch: 13 [11200/16000 70%]\tLoss: 0.209899\n",
            "Train Epoch: 13 [12800/16000 80%]\tLoss: 0.222638\n",
            "Train Epoch: 13 [14400/16000 90%]\tLoss: 0.176475\n",
            "Validation set: Average loss: 0.1789\n",
            "\n",
            "Train Epoch: 14 [0/16000 0%]\tLoss: 0.208952\n",
            "Train Epoch: 14 [1600/16000 10%]\tLoss: 0.177568\n",
            "Train Epoch: 14 [3200/16000 20%]\tLoss: 0.153474\n",
            "Train Epoch: 14 [4800/16000 30%]\tLoss: 0.157320\n",
            "Train Epoch: 14 [6400/16000 40%]\tLoss: 0.214341\n",
            "Train Epoch: 14 [8000/16000 50%]\tLoss: 0.212675\n",
            "Train Epoch: 14 [9600/16000 60%]\tLoss: 0.142919\n",
            "Train Epoch: 14 [11200/16000 70%]\tLoss: 0.136332\n",
            "Train Epoch: 14 [12800/16000 80%]\tLoss: 0.118184\n",
            "Train Epoch: 14 [14400/16000 90%]\tLoss: 0.220420\n",
            "Validation set: Average loss: 0.1788\n",
            "\n",
            "Train Epoch: 15 [0/16000 0%]\tLoss: 0.131672\n",
            "Train Epoch: 15 [1600/16000 10%]\tLoss: 0.174401\n",
            "Train Epoch: 15 [3200/16000 20%]\tLoss: 0.139994\n",
            "Train Epoch: 15 [4800/16000 30%]\tLoss: 0.132470\n",
            "Train Epoch: 15 [6400/16000 40%]\tLoss: 0.169926\n",
            "Train Epoch: 15 [8000/16000 50%]\tLoss: 0.134706\n",
            "Train Epoch: 15 [9600/16000 60%]\tLoss: 0.112163\n",
            "Train Epoch: 15 [11200/16000 70%]\tLoss: 0.200386\n",
            "Train Epoch: 15 [12800/16000 80%]\tLoss: 0.180278\n",
            "Train Epoch: 15 [14400/16000 90%]\tLoss: 0.153478\n",
            "Validation set: Average loss: 0.1764\n",
            "\n",
            "Train Epoch: 16 [0/16000 0%]\tLoss: 0.117267\n",
            "Train Epoch: 16 [1600/16000 10%]\tLoss: 0.252332\n",
            "Train Epoch: 16 [3200/16000 20%]\tLoss: 0.236017\n",
            "Train Epoch: 16 [4800/16000 30%]\tLoss: 0.180667\n",
            "Train Epoch: 16 [6400/16000 40%]\tLoss: 0.163149\n",
            "Train Epoch: 16 [8000/16000 50%]\tLoss: 0.170209\n",
            "Train Epoch: 16 [9600/16000 60%]\tLoss: 0.170882\n",
            "Train Epoch: 16 [11200/16000 70%]\tLoss: 0.092376\n",
            "Train Epoch: 16 [12800/16000 80%]\tLoss: 0.197762\n",
            "Train Epoch: 16 [14400/16000 90%]\tLoss: 0.193862\n",
            "Validation set: Average loss: 0.1782\n",
            "\n",
            "Train Epoch: 17 [0/16000 0%]\tLoss: 0.150250\n",
            "Train Epoch: 17 [1600/16000 10%]\tLoss: 0.125895\n",
            "Train Epoch: 17 [3200/16000 20%]\tLoss: 0.199703\n",
            "Train Epoch: 17 [4800/16000 30%]\tLoss: 0.202008\n",
            "Train Epoch: 17 [6400/16000 40%]\tLoss: 0.146054\n",
            "Train Epoch: 17 [8000/16000 50%]\tLoss: 0.098887\n",
            "Train Epoch: 17 [9600/16000 60%]\tLoss: 0.090729\n",
            "Train Epoch: 17 [11200/16000 70%]\tLoss: 0.148567\n",
            "Train Epoch: 17 [12800/16000 80%]\tLoss: 0.140143\n",
            "Train Epoch: 17 [14400/16000 90%]\tLoss: 0.138259\n",
            "Validation set: Average loss: 0.1760\n",
            "\n",
            "Train Epoch: 18 [0/16000 0%]\tLoss: 0.162779\n",
            "Train Epoch: 18 [1600/16000 10%]\tLoss: 0.202402\n",
            "Train Epoch: 18 [3200/16000 20%]\tLoss: 0.124856\n",
            "Train Epoch: 18 [4800/16000 30%]\tLoss: 0.234936\n",
            "Train Epoch: 18 [6400/16000 40%]\tLoss: 0.169793\n",
            "Train Epoch: 18 [8000/16000 50%]\tLoss: 0.175000\n",
            "Train Epoch: 18 [9600/16000 60%]\tLoss: 0.179498\n",
            "Train Epoch: 18 [11200/16000 70%]\tLoss: 0.203038\n",
            "Train Epoch: 18 [12800/16000 80%]\tLoss: 0.192794\n",
            "Train Epoch: 18 [14400/16000 90%]\tLoss: 0.147470\n",
            "Validation set: Average loss: 0.1757\n",
            "\n",
            "Train Epoch: 19 [0/16000 0%]\tLoss: 0.168243\n",
            "Train Epoch: 19 [1600/16000 10%]\tLoss: 0.174948\n",
            "Train Epoch: 19 [3200/16000 20%]\tLoss: 0.136106\n",
            "Train Epoch: 19 [4800/16000 30%]\tLoss: 0.142497\n",
            "Train Epoch: 19 [6400/16000 40%]\tLoss: 0.165550\n",
            "Train Epoch: 19 [8000/16000 50%]\tLoss: 0.176691\n",
            "Train Epoch: 19 [9600/16000 60%]\tLoss: 0.138640\n",
            "Train Epoch: 19 [11200/16000 70%]\tLoss: 0.172380\n",
            "Train Epoch: 19 [12800/16000 80%]\tLoss: 0.137510\n",
            "Train Epoch: 19 [14400/16000 90%]\tLoss: 0.102614\n",
            "Validation set: Average loss: 0.1738\n",
            "\n",
            "Train Epoch: 20 [0/16000 0%]\tLoss: 0.216422\n",
            "Train Epoch: 20 [1600/16000 10%]\tLoss: 0.187741\n",
            "Train Epoch: 20 [3200/16000 20%]\tLoss: 0.157874\n",
            "Train Epoch: 20 [4800/16000 30%]\tLoss: 0.150467\n",
            "Train Epoch: 20 [6400/16000 40%]\tLoss: 0.161581\n",
            "Train Epoch: 20 [8000/16000 50%]\tLoss: 0.118804\n",
            "Train Epoch: 20 [9600/16000 60%]\tLoss: 0.203842\n",
            "Train Epoch: 20 [11200/16000 70%]\tLoss: 0.116286\n",
            "Train Epoch: 20 [12800/16000 80%]\tLoss: 0.197074\n",
            "Train Epoch: 20 [14400/16000 90%]\tLoss: 0.188775\n",
            "Validation set: Average loss: 0.1742\n",
            "\n",
            "Train Epoch: 21 [0/16000 0%]\tLoss: 0.206869\n",
            "Train Epoch: 21 [1600/16000 10%]\tLoss: 0.159616\n",
            "Train Epoch: 21 [3200/16000 20%]\tLoss: 0.189639\n",
            "Train Epoch: 21 [4800/16000 30%]\tLoss: 0.159268\n",
            "Train Epoch: 21 [6400/16000 40%]\tLoss: 0.151792\n",
            "Train Epoch: 21 [8000/16000 50%]\tLoss: 0.156274\n",
            "Train Epoch: 21 [9600/16000 60%]\tLoss: 0.152232\n",
            "Train Epoch: 21 [11200/16000 70%]\tLoss: 0.164500\n",
            "Train Epoch: 21 [12800/16000 80%]\tLoss: 0.132205\n",
            "Train Epoch: 21 [14400/16000 90%]\tLoss: 0.146102\n",
            "Validation set: Average loss: 0.1743\n",
            "\n",
            "Train Epoch: 22 [0/16000 0%]\tLoss: 0.155528\n",
            "Train Epoch: 22 [1600/16000 10%]\tLoss: 0.139247\n",
            "Train Epoch: 22 [3200/16000 20%]\tLoss: 0.218473\n",
            "Train Epoch: 22 [4800/16000 30%]\tLoss: 0.148158\n",
            "Train Epoch: 22 [6400/16000 40%]\tLoss: 0.195877\n",
            "Train Epoch: 22 [8000/16000 50%]\tLoss: 0.139765\n",
            "Train Epoch: 22 [9600/16000 60%]\tLoss: 0.166751\n",
            "Train Epoch: 22 [11200/16000 70%]\tLoss: 0.185025\n",
            "Train Epoch: 22 [12800/16000 80%]\tLoss: 0.167334\n",
            "Train Epoch: 22 [14400/16000 90%]\tLoss: 0.181611\n",
            "Validation set: Average loss: 0.1755\n",
            "\n",
            "Train Epoch: 23 [0/16000 0%]\tLoss: 0.210813\n",
            "Train Epoch: 23 [1600/16000 10%]\tLoss: 0.159051\n",
            "Train Epoch: 23 [3200/16000 20%]\tLoss: 0.203322\n",
            "Train Epoch: 23 [4800/16000 30%]\tLoss: 0.169767\n",
            "Train Epoch: 23 [6400/16000 40%]\tLoss: 0.231610\n",
            "Train Epoch: 23 [8000/16000 50%]\tLoss: 0.122209\n",
            "Train Epoch: 23 [9600/16000 60%]\tLoss: 0.218164\n",
            "Train Epoch: 23 [11200/16000 70%]\tLoss: 0.146912\n",
            "Train Epoch: 23 [12800/16000 80%]\tLoss: 0.146589\n",
            "Train Epoch: 23 [14400/16000 90%]\tLoss: 0.128344\n",
            "Validation set: Average loss: 0.1767\n",
            "\n",
            "Train Epoch: 24 [0/16000 0%]\tLoss: 0.182236\n",
            "Train Epoch: 24 [1600/16000 10%]\tLoss: 0.189820\n",
            "Train Epoch: 24 [3200/16000 20%]\tLoss: 0.193572\n",
            "Train Epoch: 24 [4800/16000 30%]\tLoss: 0.188905\n",
            "Train Epoch: 24 [6400/16000 40%]\tLoss: 0.143331\n",
            "Train Epoch: 24 [8000/16000 50%]\tLoss: 0.120124\n",
            "Train Epoch: 24 [9600/16000 60%]\tLoss: 0.163133\n",
            "Train Epoch: 24 [11200/16000 70%]\tLoss: 0.150452\n",
            "Train Epoch: 24 [12800/16000 80%]\tLoss: 0.116191\n",
            "Train Epoch: 24 [14400/16000 90%]\tLoss: 0.162280\n",
            "Validation set: Average loss: 0.1762\n",
            "\n",
            "Train Epoch: 25 [0/16000 0%]\tLoss: 0.174398\n",
            "Train Epoch: 25 [1600/16000 10%]\tLoss: 0.172556\n",
            "Train Epoch: 25 [3200/16000 20%]\tLoss: 0.159184\n",
            "Train Epoch: 25 [4800/16000 30%]\tLoss: 0.118135\n",
            "Train Epoch: 25 [6400/16000 40%]\tLoss: 0.143193\n",
            "Train Epoch: 25 [8000/16000 50%]\tLoss: 0.244527\n",
            "Train Epoch: 25 [9600/16000 60%]\tLoss: 0.133657\n",
            "Train Epoch: 25 [11200/16000 70%]\tLoss: 0.148873\n",
            "Train Epoch: 25 [12800/16000 80%]\tLoss: 0.234162\n",
            "Train Epoch: 25 [14400/16000 90%]\tLoss: 0.128014\n",
            "Validation set: Average loss: 0.1773\n",
            "\n",
            "Train Epoch: 26 [0/16000 0%]\tLoss: 0.159402\n",
            "Train Epoch: 26 [1600/16000 10%]\tLoss: 0.210240\n",
            "Train Epoch: 26 [3200/16000 20%]\tLoss: 0.180171\n",
            "Train Epoch: 26 [4800/16000 30%]\tLoss: 0.188127\n",
            "Train Epoch: 26 [6400/16000 40%]\tLoss: 0.191146\n",
            "Train Epoch: 26 [8000/16000 50%]\tLoss: 0.217159\n",
            "Train Epoch: 26 [9600/16000 60%]\tLoss: 0.143477\n",
            "Train Epoch: 26 [11200/16000 70%]\tLoss: 0.145618\n",
            "Train Epoch: 26 [12800/16000 80%]\tLoss: 0.114605\n",
            "Train Epoch: 26 [14400/16000 90%]\tLoss: 0.156145\n",
            "Validation set: Average loss: 0.1732\n",
            "\n",
            "Train Epoch: 27 [0/16000 0%]\tLoss: 0.119558\n",
            "Train Epoch: 27 [1600/16000 10%]\tLoss: 0.125034\n",
            "Train Epoch: 27 [3200/16000 20%]\tLoss: 0.156886\n",
            "Train Epoch: 27 [4800/16000 30%]\tLoss: 0.106528\n",
            "Train Epoch: 27 [6400/16000 40%]\tLoss: 0.178152\n",
            "Train Epoch: 27 [8000/16000 50%]\tLoss: 0.141745\n",
            "Train Epoch: 27 [9600/16000 60%]\tLoss: 0.174673\n",
            "Train Epoch: 27 [11200/16000 70%]\tLoss: 0.167594\n",
            "Train Epoch: 27 [12800/16000 80%]\tLoss: 0.139510\n",
            "Train Epoch: 27 [14400/16000 90%]\tLoss: 0.149899\n",
            "Validation set: Average loss: 0.1748\n",
            "\n",
            "Train Epoch: 28 [0/16000 0%]\tLoss: 0.104364\n",
            "Train Epoch: 28 [1600/16000 10%]\tLoss: 0.141910\n",
            "Train Epoch: 28 [3200/16000 20%]\tLoss: 0.155439\n",
            "Train Epoch: 28 [4800/16000 30%]\tLoss: 0.181638\n",
            "Train Epoch: 28 [6400/16000 40%]\tLoss: 0.129850\n",
            "Train Epoch: 28 [8000/16000 50%]\tLoss: 0.120878\n",
            "Train Epoch: 28 [9600/16000 60%]\tLoss: 0.103270\n",
            "Train Epoch: 28 [11200/16000 70%]\tLoss: 0.128286\n",
            "Train Epoch: 28 [12800/16000 80%]\tLoss: 0.192243\n",
            "Train Epoch: 28 [14400/16000 90%]\tLoss: 0.165728\n",
            "Validation set: Average loss: 0.1730\n",
            "\n",
            "Train Epoch: 29 [0/16000 0%]\tLoss: 0.087368\n",
            "Train Epoch: 29 [1600/16000 10%]\tLoss: 0.202237\n",
            "Train Epoch: 29 [3200/16000 20%]\tLoss: 0.117678\n",
            "Train Epoch: 29 [4800/16000 30%]\tLoss: 0.187621\n",
            "Train Epoch: 29 [6400/16000 40%]\tLoss: 0.179653\n",
            "Train Epoch: 29 [8000/16000 50%]\tLoss: 0.187771\n",
            "Train Epoch: 29 [9600/16000 60%]\tLoss: 0.130137\n",
            "Train Epoch: 29 [11200/16000 70%]\tLoss: 0.173523\n",
            "Train Epoch: 29 [12800/16000 80%]\tLoss: 0.192191\n",
            "Train Epoch: 29 [14400/16000 90%]\tLoss: 0.089802\n",
            "Validation set: Average loss: 0.1733\n",
            "\n",
            "Train Epoch: 30 [0/16000 0%]\tLoss: 0.214312\n",
            "Train Epoch: 30 [1600/16000 10%]\tLoss: 0.122368\n",
            "Train Epoch: 30 [3200/16000 20%]\tLoss: 0.141320\n",
            "Train Epoch: 30 [4800/16000 30%]\tLoss: 0.124977\n",
            "Train Epoch: 30 [6400/16000 40%]\tLoss: 0.114752\n",
            "Train Epoch: 30 [8000/16000 50%]\tLoss: 0.177231\n",
            "Train Epoch: 30 [9600/16000 60%]\tLoss: 0.143820\n",
            "Train Epoch: 30 [11200/16000 70%]\tLoss: 0.156846\n",
            "Train Epoch: 30 [12800/16000 80%]\tLoss: 0.189487\n",
            "Train Epoch: 30 [14400/16000 90%]\tLoss: 0.165420\n",
            "Validation set: Average loss: 0.1746\n",
            "\n",
            "CPU times: user 47min 2s, sys: 2min 51s, total: 49min 53s\n",
            "Wall time: 49min 59s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "bJ-4Euhz2vfQ",
        "colab_type": "code",
        "outputId": "2b59fa71-2ca9-49a7-aaf0-a03d7a0cc23c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "plt.title(\"Deep cnn Model loss with processing\")\n",
        "plt.plot(loss_3t, label=\"train\")\n",
        "plt.plot(loss_3v, label=\"validation\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfUAAAFnCAYAAAC/5tBZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xd4VGXa+PHvmZn0OimThAQCJCGB\n0JEaelEQVBYREcS2a/cVUVeEdxXcFXQtvGL9KeuuLrpLEUQEIRSR3juBQAiQSnrvmfL7AxgJTEIC\nM8kk3J/r8pKZU+aeO2fmnvOc8zyPYjKZTAghhBCi2VM1dQBCCCGEsA4p6kIIIUQLIUVdCCGEaCGk\nqAshhBAthBR1IYQQooWQoi6EEEK0EFLURbMTGRnJqFGjuOuuuxg8eDBPP/00hw8fbuqwbtnevXuJ\njIzku+++u27ZnXfeybRp0xq8z1GjRrF3794613n99df5/PPP6/18Y9q4cSOzZs0C4Ny5c+zfvx+4\nlKtRo0Y1ZWhWdezYMf74xz82dRiiBZCiLpqlxYsXExsby9atWxk/fjzPPfec+Qu/OQsKCmLNmjU1\nnjt27BhVVVVNFFHTGjVqFO+88w4AmzZtahF/Y0u6du3K119/3dRhiBZA09QBCHErFEVhzJgxlJSU\n8OGHH7JkyRKqqqp477332L59O9XV1UyaNIlnnnkGgLNnzzJ37lyys7NxdHRk/vz5dOnShZUrV7Ju\n3Tq8vb05fPgwzs7OfPrpp7Rt2/a61/zqq69YunQpGo2GoUOH8vrrr7Nv3z4WLFhAnz592LRpE5WV\nlbz77rv06dOHTz75hPz8fDIzM4mPj0er1fL555+j0+mu23fr1q3Jzs4mNTWVkJAQAH755RdiYmJI\nTk4GwGg0snDhQmJjYwHo3r07b775Jq6urpw4cYKZM2ei1+sZMmRIjX1v2rSJhQsXUlZWRmhoKB98\n8AE+Pj71ynN8fDxz586loKAAJycnXn31VQYNGkRpaSmvvfYa586do6qqiv79+zNnzhyqqqosPu/g\n4GDe55///Gf69OnDAw88QE5ODjExMfzzn/8kJiaGuLg4Xn/9dR5//HFWr17NI488wpdffomDgwNF\nRUUMGzYMgC+++ILVq1dTXV3N22+/Tb9+/WrEvXfvXt5++21iYmLYsmUL1dXVLFiwgO7du/PJJ5+Y\n/ybjxo3jkUceqTWvKSkpvP7662RlZeHp6clf//pXoqOjycjIYO7cuZw/fx6A2bNnM2TIEPR6PXPm\nzOHAgQMYjUYiIyN59913cXZ2tvh8XFwcf/nLX9i4cWOdx0tcXBwzZswA4N577yU2Npa//OUv9O3b\nt15/R9HyyZm6aBGGDx/O0aNHqaioYNGiRZw9e5aff/6ZNWvWEBsby5YtWzAajTz//PPcd999xMbG\nMnfuXJ577jn0ej0Au3btYurUqWzatIkRI0bw/vvvX/c6Bw4c4IcffuCnn37i559/5uDBg6xfvx6A\nkydP0q1bN9atW8eUKVP44osvzNutX7+e2bNns2nTJnx9fVmxYkWt72X06NGsXbsWAJPJxObNm81F\nDGDdunVs27aNlStXsnbtWoqKivjmm28AmDt3Lo888gixsbH06NGD1NRUAFJSUnjttdf48MMP2bx5\nM3379mXu3Ln1yq3RaOTll1/m4YcfZv369bz99tu88sorlJSUsGrVKjw9PVm3bh2xsbGo1WrOnj1b\n6/NX69u3r/myyf79++nevTuHDh0y57l///41/r6jRo3ikUce4fXXXwcgIyODDh06sG7dOh566KEa\n+b5aYmIiXbt2JTY2lmeffbbG+966dStfffUVjz32WJ15feONNxg7diwbN27k2Wef5bXXXgNg5syZ\nREVFERsby1dffcVrr71Gfn4+O3bsIDU1lfXr17NhwwbCw8M5fPhwrc9fq7bj5Y033uCxxx5jw4YN\nuLu7c+HChXr9DcXtQ4q6aBHc3d0xGo2UlpayZcsWpkyZgqOjI66urtx3331s2LCBc+fOkZuby8SJ\nEwHo1asXPj4+5i/VsLAwunfvDsBdd91l8ct227ZtDBkyBHd3dxwdHVm8eDF33nknAG5ubowcORKA\n6Oho0tPTzdvdcccdBAcHoygKHTt25OLFi7W+l7Fjx5qb4A8cOEBERAQeHh7m5b/99hvjx4/H1dUV\ntVrNhAkT2LlzJ5WVlRw/fpy7774buPTjwMXFxRx3nz596NChAwCTJ0/m119/xWAw3DC3qamp5OTk\nMHbsWAC6dOlCq1atOH78uDl/O3bswGg08tZbb9GxY8dan79a3759OXLkCAAHDx7koYceMhf1gwcP\n1ijqlri7uzNixAgAOnXqREZGhsX1XF1dGTNmDHDp3oRTp05RXl4OQLdu3cytFXXlde/evYwbNw6A\n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\nIiIiPuL/A+QA8Z6rFGR8AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d3fedd30>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "IPvTd76k-BaU",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Evaluation and Analysis "
      ]
    },
    {
      "metadata": {
        "id": "-MsjvlJP2Zc4",
        "colab_type": "code",
        "outputId": "ea656661-28be-485e-8887-024cad935215",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "plt.title(\"Comparison of training loss with 4 processing methods\")\n",
        "plt.plot(loss_0t, label=\"method 1\")\n",
        "plt.plot(loss_1t, label=\"method 2\")\n",
        "plt.plot(loss_2t, label=\"method 3\")\n",
        "plt.plot(loss_3t, label=\"method 3 with processing\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nrqqqqpqVlaW+9NJLanx8fKnLrzR79mz1gw8+UFVVVT/66CN10KBB9jgiIyPVpUuXljjvy5+nlStX\nqm3btrWf3+uvv65OmDBBM+cbN25Un3zySVVViz5fWlauXKm2aNFC3bt3r6qqqjpr1iz1ueees//O\n7rvvPjUnJ0dV1bI/571791Y3btyoqqqqLlmyRB0xYoRqs9nUPn362D/ju3btUrt06aLm5+ery5Yt\nU8ePH6+qqqrm5+er4eHh6qFDh0pdvnLlSvXxxx+3x9WvXz/VarWq+fn56v33369+8803akFBgdq5\nc2d7HNOnT1ebNWumxsXFlTjv8nwvy4r/75/17t27q6+88opaUFCgXrhwQQ0JCVHPnTunnj17Vm3f\nvr166tQpVVVVdfHixfbzmDFjhvryyy+rqqqqcXFxamhoqDpnzhw1PT1dvf3229X09HRVVYu+i4sW\nLdL8/YlrI9fshV1KSgo+Pj5lbrNx40YGDRqEwWDA1dWV++67j82bN9vX9+zZE4CmTZvi4uJCx44d\nURSFJk2akJCQYN/uwQcfBKBx48Y0atSIP/74g5YtW9pbqjqdjtDQUOLi4uz7tGnTxt6CvpKPjw9f\nfvklZ8+e5fbbb2fChAnk5+ezZcsWhgwZAkCdOnXo2LEj27ZtA6CgoMDeyg0JCeHcuXMljvvHH38Q\nGBhI+/btAbjnnnuwWq2cPXv26sm8gqurK506dbLHunv3bnur5vbbby92jlfq27cvrq6uGI1GGjZs\nyPnz50tsExQURMuWLQFo0aKFfZtdu3bZr+336tULf3//MmMs61x9fHz47bff2LVrF87OzsyaNQt/\nf/9Sl1+pY8eO/P777/aYHnnkEfbs2QPA7t277XkpzZXn17x5c+Lj40tsk5OTw4wZM4iIiCjzWJeP\n17ZtW/s57t27176uU6dOuLi4AKV/zk+ePInVaqVbt25A0SWIuXPncuLECZKTk/nXv/4FQPv27fH2\n9mbv3r32///2228UFhby+uuv07x581KX/123bt3w9PTEYDDQtGlTzp8/z6lTp8jLy7PHMXToUAoL\nC0s976t9L8uKX8t9992HXq8nICAAHx8fLly4wObNm+nYsSMNGjQA4KGHHmL79u0UFBSwa9cu+vXr\nB0DdunW54447AHBxcUFRFKKjo0lKSqJfv36MGDHiqr9HUXHSjS/svLy8NP8xvdKV3asAHh4eJCcn\n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\nJCcnU6tWrTK327FjB7GxsURFRXH8+HEmTpxIVFSUfX14eDiffvopgYGBvPDCC2zatAkXFxeOHj1K\nVFQUVquVf/7zn/Tp0weAl19+me7du1c03OtKtZjQXUgnOy2hukMRQggh7MpV7BcuXIjRaORf//oX\nDz74ICaTibCwMEaPHl3qPlu3bqVXr14ABAUFkZqaSkZGBmazGYCYmBj7z97e3litVu677z5769/d\n3Z3s7GxsthtngBrF3QJcwCZD5gohhKhBylXsf/nlF7744gtWrVpF9+7defXVVxk2bFiZ+yQlJRES\nEmJ/7e3tTWJior3AX/5/QkICmzdv5sUXX0Sv12M0GgGIjo6ma9eu6PV6AJYtW8aSJUvw8fFh8uTJ\neHt7l/reXl5GDAZ9eU6tQvz8LGWuN/r5AEfR5aRcddubya10rhUhedEmedEmedEmedFW0byUq9gb\nDAYUReH//u//7EW+sLCwQm+kqmqJZcnJyTzzzDNERETg5eVlX75hwwaio6P5+OOPARg4cCCenp40\nb96cRYsW8cEHHxAeHl7qe1mtWRWKrTz8/CwkJqaXvZGxaHx8p5w04hPS0ClKlcdR05QrL7cgyYs2\nyYs2yYs2yYu20vJS1h8A5bob32KxMHLkSI4fP05oaCi//PILylUKmb+/P0lJ/+vOTkhIwM/Pz/46\nIyODESNGMHr0aLp06WJfvmnTJj788EM++ugjLJaiwDt16kTz5s0B6NGjB0eOHClP2Nedm5cvACZb\nNpnZ8qy9EEKImqFcxf7dd99l0KBBLF26FAAXFxdmzJhR5j5hYWGsW7cOgIMHD+Lv72/vugeYPn06\njz/+OF27drUvS09PZ+bMmSxcuNB+5z3AqFGjiIuLA2D79u00adKkfGd3nZkvDZlrKsghTQbWEUII\nUUOUqxv/4sWLeHl54e3tzYoVK/j999956qmnytynXbt2hISEMHjwYBRFISIigpiYGCwWC126dGHV\nqlXExsYSHR0NwIABAwCwWq3FbvybMWMGjz76KKNHj8bNzQ2j0ci0adMqe74O5e5TizTAlJ9LemYe\n+JqqOyQhhBCifMV+woQJvPrqqxw6dIivvvqK559/nrfeeoslS5aUud+YMWOKvW7WrJn95wMHDmju\n8/DDD5dYVrt2bVauXFmeUKuVm6cPKkVD5spkOEIIIWqKcnXjK4pC69at+fHHH3n00Ufp1q2b5g13\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d44ce748>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "Sxtv5Z751lxD",
        "colab_type": "code",
        "outputId": "e96ef03d-51ab-4444-c893-9335d6e80f46",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "plt.title(\"Comparison of validation loss with 4 processing methods\")\n",
        "plt.plot(loss_0v, label=\"method 1\")\n",
        "plt.plot(loss_1v, label=\"method 2\")\n",
        "plt.plot(loss_2v, label=\"method 3\")\n",
        "plt.plot(loss_3v, label=\"method 3 with processing\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfUAAAFnCAYAAAC/5tBZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3XdgVFX68PHvnZLee0IIVSAECE06\nKhBJcFFcXQHF3n3tawGUoq4oYi/AoutPVsQFBMTVRRBFRBFCCRB6CSSkkd4mPTPn/SNmTGASkpCQ\nwvP5B+bOvXee+2RmnjnnnnuPppRSCCGEEKLN07V0AEIIIYRoGlLUhRBCiHZCiroQQgjRTkhRF0II\nIdoJKepCCCFEOyFFXQghhGgnpKhfBpRSfPbZZ0ycOJHIyEgiIiJ46aWXKCgoaOnQavjiiy947733\nWuz1CwoKmDRpEuPHjycnJ+ei99ezZ0/Onj3Lpk2bmDlzps117r77btauXXvBfa1atcr6/6ioKDIz\nMy86PoAZM2awaNGiJtlXY1XPz6lTp9i1axcA0dHRXHvttQ3a15YtW+jZsydJSUlNHuelEhsby333\n3dfSYdRQ/f13xx138M0331zU/hYtWsSMGTMuNixhg6GlAxDN76233mLnzp18+umn+Pv7U1RUxLx5\n83jooYdYvnw5mqa1dIgA3H777S36+seOHSM3N5dffvmlSfd77bXXNrg4VZeRkcG//vUvJk+eDMCG\nDRuaKrRWoXp+fvzxRyoqKrjyyisbvJ/i4mLefvttPDw8mjrES6pfv358+umnLR2GldlsZsGCBdb3\nn2jdpKXezuXm5rJs2TLmz5+Pv78/AE5OTsyZM4f7778fpRSlpaXMmTOHyMhIJkyYwPz58zGbzQCM\nHTuWZcuW8de//pURI0bwww8/8PLLLxMREcHkyZPJy8sDKluln3/+OZMmTWL48OH85z//scawcOFC\naw/BQw89RH5+PgAffvghs2bN4m9/+xtLly7lww8/5MUXXwTg+++/Z+LEiUyYMIHrr7+e6OhoAFJS\nUrjvvvuIjIxk4sSJrFu3DoCkpCRGjRrF559/zvXXX8/o0aNZv369zZxER0fz17/+laioKG655RYO\nHDhASkoKzz77LFlZWURFRZGdnW1d/5dffuH666+vsY9JkyaxdetWMjMzue+++4iKimLs2LF89tln\n573e2rVrufvuuwFITEzklltuISIigmeeecaaZ4CffvqJ66+/nsjISG666SaOHDkCwNSpU0lJSSEq\nKoqysjJrDwDA559/znXXXUdUVBSPPPKINe4ZM2bwwQcfcM899zBmzBjuueceiouL63yvHD16lKlT\npxIVFcWkSZP49ddfASgsLOTRRx9lwoQJjBs3jlmzZlFeXl7r8uqee+45vvrqKwAyMzPp2bMn27Zt\nA+DQoUNcf/311vxs3ryZJUuW8PnnnzN//nzrPhYvXsyECROIiIhgx44dtcb/4YcfcsMNN+Ds7Gzz\n+ejoaK6//nrmz59PZGQkY8eOZd++fdZtq78XLRYL7777LlFRUURFRTFjxgyKioqsf8Np06Zx7bXX\ncvPNN3Po0CEAzp49y8MPP0xkZCSRkZHWH4cVFRW8+OKLREZGcu211/LYY49hMplqXV69h+LDDz/k\nlVde4dFHH2XcuHH87W9/Iz093Zq/8ePHM378eD766KMan5Pq7rjjDj7++GOmTJnCsGHDWL58OYsW\nLSIqKorrrruOxMTEOuO/5557KCgoICoqyrpuUlISd9xxB6NHj+bvf/87FovFmuNzP1sAJSUlPPXU\nU4wZM4bbb7/d+v6F2j/ropGUaNe2bNmirr322jrXWbJkiXrggQdUeXm5Ki4uVjfffLNat26dUkqp\nMWPGqNmzZyullFq2bJkKDw9XO3bsUBaLRd18881q1apVSimlevTooV555RWllFJxcXGqT58+Kjs7\nWx04cEANHz5cFRQUKLPZrO6++261cOFCpZRSH3zwgRo1apTKysqyPn7hhReUUkoNHTpUJSUlKaWU\n2rVrl3rttdeUUkrde++96p///KdSSqmkpCQ1aNAglZiYqBITE1Xv3r3VsmXLlFJKrV+/3uZxm0wm\nNXToULV7926llFIbNmxQ48ePV2azWe3YsUNFRESct01paakaPHiwOnPmjFJKqTNnzqghQ4ao8vJy\n9corr6g5c+ZYl4eFhamUlBRrTlJTU9WaNWvUXXfdpZRS6oknnlBvv/22Ukqp/fv3q969e6s1a9ao\n8vJyNXjwYLV3716llFIffvihdZtz46ra7969e9VVV12lMjMzlVJKvfLKK9b8TZ8+XU2YMEHl5OSo\n8vJydcMNN6hvvvnmvGObPn26WrhwoTKbzWrChAnq22+/VUopFRsbq6688kpVUFCgvvjiCzVjxgyl\nlFLl5eVqzpw56vDhw7Uur+6rr75SM2fOtP5NJk+erD744AOllFJLly5V8+bNq5GfqniqjrtPnz7q\nxx9/VEop9a9//Uvdeeed5x2DUkodPXpUTZo0SZWVlakxY8aoxMTE89bZsWOHCg0NVf/73/+UUkqt\nWrVKTZo0SSl1/nvxu+++UzfeeKMqLCxUFRUV6pFHHrHGddddd6nly5crpZTatGmTuu6665RSSt15\n553q3XffVUopFR8fr4YMGaKys7PVzz//rO68805lsViUxWJR7777rtq6dWuty6v/vT/44AM1fPhw\nlZSUpCwWi3rwwQfVokWLlFJK/fWvf7XG8dlnn6k+ffqoHTt2nHfct99+u7r//vtVeXm52rx5swoP\nD1dr1qxRSin1+OOPW2OuLf7ExEQVGhpaY3933nmnKi4uViaTSY0YMULt2rWrzs/WF198oaZNm6bK\ny8tVdna2GjNmjJo+fbpSqvbPumgcaam3c7m5uXh7e9e5zpYtW5g8eTIGgwEHBweuv/56a2sKYNy4\ncQD06NEDe3t7hg4diqZpXHHFFdZWA8DNN98MQNeuXenSpQuxsbH06dOHLVu24OLigk6nY8CAAdZf\n+wDh4eF4eXmdF5O3tzcrVqwgOTmZwYMHM3PmTMrLy/n999+57bbbAOjQoQNDhw61tt4qKiq46aab\nAAgLCyMlJeW8/cbGxhIQEMCgQYMAiIyMJCcnh+Tk5FrzY2dnx5gxY9i8eTNQ2UUcERGBwWBg1qxZ\nzJ49G4COHTvi6+tb5/nc3bt3c9111wGV3axdu3YFwGAw8Pvvv9O/f38ABg8eXCNPtmzZsoXIyEjr\n3/eWW26p8Xe7+uqr8fDwwGAw0KNHD1JTU2vdV1JSEpmZmfzlL38BoG/fvgQFBXHgwAG8vLzYu3cv\nv/32GxaLhZdffpnQ0NBal1c3dOhQa2t4z5493HrrrcTExFgfDx8+vM5jdHFxsb7/evfuXaOFV0Up\nxdy5c5k1axZGo7HO/Tk5OTFhwgQAxo8fz5EjR6w9GNXfi1u2bOHGG2/EyckJvV7PTTfdxLZt2ygt\nLSU6OpqJEycClZ+NVatWUVRURHR0tLVHplOnTgwaNIhffvkFLy8v4uLi2LRpE8XFxTz11FOMHj26\n1uXnGjx4MB06dEDTNEJDQ0lNTaWkpIRDhw5Z45g2bRqqjjt+jxkzxvo+KC4uJjIyEqj8TKenp9cZ\nvy3jx4/HwcEBZ2dnOnXqxNmzZ+v8bO3evZtrr70Wg8GAp6cnY8aMse7L1mddNJ4U9XbO09OTtLS0\nOtfJzs7G3d3d+tjd3Z2srCzr46ruTJ1OV6NrU6fTWbvdqrar/v/8/HyKi4t59dVXrV16X375ZY0v\nn+rbVLd48WIyMzO56aabuPHGG9m5cye5ubkopXB1dbWu5+bmZu1y1uv1ODk52Yyt+rG6ubnVWObq\n6lrjeG2JjIysUdSrCvOBAwe47777GD9+PFFRUWRkZNh83Sp5eXm4uLjUiL/KsmXLrN3vM2fOrPNL\n2taxuLm51TiO6nnS6/U1uvpt7cvV1bXG+Iqq3E6YMIG7776b999/n+HDh/Pyyy9TVlZW6/LqOnbs\nSElJCfn5+cTExHDttdeSnp6O2Wxm//79Fzx3Xj1Xtf1NV65cSffu3Rk8eHCd+6o6pqpjrMpd1emg\n6u/F2j4Tubm5WCwWa241TcPZ2ZmCggKUUtbTF1FRURw8eJD8/Hz69evHrFmzWLZsGSNHjuSZZ56p\nc/m5bP0d8/Ly0DTNegxGo7HOH+9Vn1u9Xl/jcVVO64rflup/l6qY6vps5eXlnfe5rWLrsy4aT4p6\nO9e/f3+ysrKs5/2qlJeX8+6771JcXIyPjw+5ubnW53Jzc/Hx8Wnwa1UfMZ6bm4u7uzv//ve/iY+P\nZ+3atWzcuJEpU6bUa18hISG8/vrrbN++nTvvvJNnnnkGT09PdDqd9Tx+1etcqCeiOm9v7xrHqpQi\nLy/vgvsYPXo0R48eJT4+nvj4eIYNGwZUnjOOjIxk48aNbNiwAU9Pzzr34+bmhslksj6u+kESExPD\nJ598wuLFi9m4cSOvvvrqBY+lqf5uUJmXvLy8Gj8kqud26tSpfPXVV6xfv55Dhw5ZxzLUtry6oUOH\nWs/POzs706NHD3744QcCAwNrFIfG+umnn/jpp58YOXIkI0eOJDU1lb/97W82z79Xz1fV+8jWwLra\ncuvp6Ymmadb3ulKKhIQEvLy80Ov1rFmzhg0bNrBhwwa2bt3KnXfeCVResbBs2TJ+/vlniouLrQPh\nalt+IS4uLiilrL0MFRUVNcaBNJS3t3ed8dd3H7V9ttzc3GpcbVM9VlufddF4UtTbOTc3N+6//36m\nT59OQkICUDlKeM6cORw+fBhHR0euueYaVq9ejdlspqioiG+++Yarr766wa/1v//9D4C4uDgSEhII\n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\nH3tNeUkVm9YdorykipDwQP40ugchYVc/px9mt7Ll+yOsT8+hT/8o+hi8f0DtlXoO7Clgf2Y+dbUN\n2EIt9E5qvu2FFeoi4tYeiQpmzPh4fvhbNlkZ+VwsdzDsme6YfW7vBjSXy0XFRcd1C99UNU2pOh11\nXKmpu+1a2rZrTXxyB9p3DHloP3J3LyI72IjqHMqZvDLO5JUR/eh/PrN2uVwcPlDEzs0nqKtr4LH4\nSJKHdL7hd/doTAS2EAvr03PYu/MMpcWVDBsV0+z3JDQ0uDh68Dx7dpyiuvIKARYfkod2JqZX22Zd\nTU+hLiJuLzjUwpjx8WxIz+Xk0RIqK5yMeC62aavRaxzVV25Yta68pIry0qqmTU6u8fI24R/gQ6sg\nP/z9A/EL8MG/6Y8Z/wCf6441PvY3Y7e39viNS/oN7kT+ycblYzv9/vKxNc5atq0/Rt6REnz9zPx5\n1O8vLBRmb8V/TXiCjd/mcvpEGWu/zOIvY2Lvaf3623Vtm9qMLScpL6nCbPbiieQoHu/b3pCbHRXq\nIuIRAiy+jHq+F1vXH+VYTjFrv8wiPqkDl8odjevMV1FddeWG53h5mQgOtRBy3TrzoeGBBFr9PPJM\n+34ICf9t+dijB4uJ6dX2pn9zvvASm9cd5vIlJ23aBTF8VA+srf3/4/f1D/Dhmb/2ZPfWkxzYc5b0\nL/cxbFTMH84G3IvS4stkbDnJ2dMXAOge14aEQR1pZfX7g2c+OAp1EfEY3mYvhj7dHVuIhT3bT7F9\nw/Gmv2sV5EdU59DGAA8kJDwQW4jloVrA5mHx2/Kxp3i0R0TTcZfLxf7d+ezZfgqXC55IjqLPgKjb\nnr728vIieeijhNmtbP3xKD+m5ZA4MJr45Kj7+iasssLJnh2nOXrwPADtOwbTb3Dnu9qm9n5TqIuI\nRzGZTDyRHEXbdq25UFZNSPjV5Wb9/PXfYXMJtPrRM7EdWbvyyf75LJGjbVRX1vDP745w9vQFAlv5\nMmxUDI9E3d06910fsxMcevU6+54dpykprmTo093veTr8Sk0d+zPzyd5zlrq6BkLCA0ka0vmGfQmM\npi4WEY8U2cFGZAeb0WV4rN59O3BofxH7d+fzSHsb67/JwVFdS1TnEIY83f2et5QNb2NtvM5+iFPH\nSkkvz2LEc7G0Dr696+wulwuno5aKi04qLjq4UFZN7v5zOKtrCWzly4CBHekW1/LW41eoi4hIs/P1\n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\nGvTrjAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d90cc080>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "a_O8JIjXz_cd",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "As we can see, the validation loss of the model with merge type 3 and resizing is lowest. And merge 2 and merge 3 seems to have similar results."
      ]
    },
    {
      "metadata": {
        "id": "HK1BUz60HuSr",
        "colab_type": "code",
        "outputId": "26d0057f-5f57-4c37-f4e6-3a300c20b06a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        }
      },
      "cell_type": "code",
      "source": [
        "treshold = 0.2\n",
        "model0 = deep_cnn().to(device)\n",
        "model0.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn0_epoch10.pkl'))\n",
        "lossv0, accv0, precv0, recv0 = [], [], [], []\n",
        "evaluate(model0, test_loader_0, treshold, lossv0, accv0, precv0, recv0, verbose=True)\n",
        "\n",
        "model1 = deep_cnn(input_channels = 3).to(device)\n",
        "model1.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn1_epoch13.pkl'))\n",
        "lossv1, accv1, precv1, recv1 = [], [], [], []\n",
        "evaluate(model1, test_loader_1, treshold, lossv1, accv1, precv1, recv1, verbose=True)\n",
        "\n",
        "model2 = deep_cnn(input_channels = 3).to(device)\n",
        "model2.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn2_epoch11.pkl'))\n",
        "lossv2, accv2, precv2, recv2 = [], [], [], []\n",
        "evaluate(model2, test_loader_2, treshold, lossv2, accv2, precv2, recv2, verbose=True)\n",
        "\n",
        "model3 = deep_cnns().to(device)\n",
        "model3.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn3_epoch30.pkl'))\n",
        "lossv3, accv3, precv3, recv3 = [], [], [], []\n",
        "evaluate(model3, test_loader_3, treshold, lossv3, accv3, precv3, recv3, verbose=True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation set: Average loss: 0.1733, Accuracy: 90.63%, Precision: 39.96%, Recall: 59.39%\n",
            "\t\tF1 score : 47.78%\n",
            "\n",
            "Validation set: Average loss: 0.1630, Accuracy: 90.79%, Precision: 41.18%, Recall: 64.64%\n",
            "\t\tF1 score : 50.31%\n",
            "\n",
            "Validation set: Average loss: 0.1648, Accuracy: 91.36%, Precision: 43.39%, Recall: 61.29%\n",
            "\t\tF1 score : 50.81%\n",
            "\n",
            "Validation set: Average loss: 0.1739, Accuracy: 89.88%, Precision: 38.24%, Recall: 62.62%\n",
            "\t\tF1 score : 47.48%\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "m9VQ3lFF3mBf",
        "colab_type": "code",
        "outputId": "8ccbdb99-f6cd-49b4-d8c0-4da4bab4e5da",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        }
      },
      "cell_type": "code",
      "source": [
        "treshold = 0.3\n",
        "model0 = deep_cnn().to(device)\n",
        "model0.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn0_epoch10.pkl'))\n",
        "lossv0, accv0, precv0, recv0 = [], [], [], []\n",
        "evaluate(model0, test_loader_0, treshold, lossv0, accv0, precv0, recv0, verbose=True)\n",
        "\n",
        "model1 = deep_cnn(input_channels = 3).to(device)\n",
        "model1.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn1_epoch13.pkl'))\n",
        "lossv1, accv1, precv1, recv1 = [], [], [], []\n",
        "evaluate(model1, test_loader_1, treshold, lossv1, accv1, precv1, recv1, verbose=True)\n",
        "\n",
        "model2 = deep_cnn(input_channels = 3).to(device)\n",
        "model2.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn2_epoch11.pkl'))\n",
        "lossv2, accv2, precv2, recv2 = [], [], [], []\n",
        "evaluate(model2, test_loader_2, treshold, lossv2, accv2, precv2, recv2, verbose=True)\n",
        "\n",
        "model3 = deep_cnns().to(device)\n",
        "model3.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Analysis_input/model_deepcnn3_epoch30.pkl'))\n",
        "lossv3, accv3, precv3, recv3 = [], [], [], []\n",
        "evaluate(model3, test_loader_3, treshold, lossv3, accv3, precv3, recv3, verbose=True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation set: Average loss: 0.1735, Accuracy: 92.86%, Precision: 50.56%, Recall: 40.92%\n",
            "\t\tF1 score : 45.23%\n",
            "\n",
            "Validation set: Average loss: 0.1625, Accuracy: 92.89%, Precision: 50.49%, Recall: 50.71%\n",
            "\t\tF1 score : 50.60%\n",
            "\n",
            "Validation set: Average loss: 0.1648, Accuracy: 93.18%, Precision: 53.38%, Recall: 45.63%\n",
            "\t\tF1 score : 49.20%\n",
            "\n",
            "Validation set: Average loss: 0.1746, Accuracy: 92.01%, Precision: 44.69%, Recall: 48.27%\n",
            "\t\tF1 score : 46.41%\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "DX-e13zI0toq",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "According to the above results, we can see that the merge 2 and merge 3 yield higher F1 score and accuracy compared to other two methods. And we decided to use merge 3 as our final processing method. "
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "NSwCiJHTTDYQ"
      },
      "cell_type": "markdown",
      "source": [
        "### Training"
      ]
    },
    {
      "metadata": {
        "id": "Q2XK8nUDBri9",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### a) sim_cnn2_drop"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "1ofzw5ggojdp",
        "outputId": "7be690f5-b8cd-49e2-aabf-759e9bd0f93b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 6388
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "model = simple_cnn2_drop().to(device)\n",
        "epoch = 30\n",
        "\n",
        "learning_rate = 0.00001 # for deep_cnn\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()\n",
        "\n",
        "train_loss, val_loss = [], []\n",
        "for i in range(1,1+epoch):\n",
        "    train_net(model, train_loader_2, i, train_loss)\n",
        "    validate(model, test_loader_2, val_loss)\n",
        "    torch.save(model.state_dict(), '/content/gdrive/My Drive/Image_project/Our_models/model_simcnn2_drop_epoch'+str(i)+'.pkl')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Epoch: 1 [0/16000 0%]\tLoss: 0.728135\n",
            "Train Epoch: 1 [1600/16000 10%]\tLoss: 0.654320\n",
            "Train Epoch: 1 [3200/16000 20%]\tLoss: 0.582733\n",
            "Train Epoch: 1 [4800/16000 30%]\tLoss: 0.498478\n",
            "Train Epoch: 1 [6400/16000 40%]\tLoss: 0.436689\n",
            "Train Epoch: 1 [8000/16000 50%]\tLoss: 0.378461\n",
            "Train Epoch: 1 [9600/16000 60%]\tLoss: 0.361731\n",
            "Train Epoch: 1 [11200/16000 70%]\tLoss: 0.334634\n",
            "Train Epoch: 1 [12800/16000 80%]\tLoss: 0.276203\n",
            "Train Epoch: 1 [14400/16000 90%]\tLoss: 0.241955\n",
            "Validation set: Average loss: 0.2450\n",
            "\n",
            "Train Epoch: 2 [0/16000 0%]\tLoss: 0.222451\n",
            "Train Epoch: 2 [1600/16000 10%]\tLoss: 0.190972\n",
            "Train Epoch: 2 [3200/16000 20%]\tLoss: 0.248983\n",
            "Train Epoch: 2 [4800/16000 30%]\tLoss: 0.246174\n",
            "Train Epoch: 2 [6400/16000 40%]\tLoss: 0.200301\n",
            "Train Epoch: 2 [8000/16000 50%]\tLoss: 0.177618\n",
            "Train Epoch: 2 [9600/16000 60%]\tLoss: 0.243063\n",
            "Train Epoch: 2 [11200/16000 70%]\tLoss: 0.256995\n",
            "Train Epoch: 2 [12800/16000 80%]\tLoss: 0.244287\n",
            "Train Epoch: 2 [14400/16000 90%]\tLoss: 0.196725\n",
            "Validation set: Average loss: 0.2122\n",
            "\n",
            "Train Epoch: 3 [0/16000 0%]\tLoss: 0.201043\n",
            "Train Epoch: 3 [1600/16000 10%]\tLoss: 0.176392\n",
            "Train Epoch: 3 [3200/16000 20%]\tLoss: 0.163200\n",
            "Train Epoch: 3 [4800/16000 30%]\tLoss: 0.214379\n",
            "Train Epoch: 3 [6400/16000 40%]\tLoss: 0.210791\n",
            "Train Epoch: 3 [8000/16000 50%]\tLoss: 0.215322\n",
            "Train Epoch: 3 [9600/16000 60%]\tLoss: 0.163461\n",
            "Train Epoch: 3 [11200/16000 70%]\tLoss: 0.146808\n",
            "Train Epoch: 3 [12800/16000 80%]\tLoss: 0.231689\n",
            "Train Epoch: 3 [14400/16000 90%]\tLoss: 0.175177\n",
            "Validation set: Average loss: 0.2075\n",
            "\n",
            "Train Epoch: 4 [0/16000 0%]\tLoss: 0.244558\n",
            "Train Epoch: 4 [1600/16000 10%]\tLoss: 0.216319\n",
            "Train Epoch: 4 [3200/16000 20%]\tLoss: 0.157139\n",
            "Train Epoch: 4 [4800/16000 30%]\tLoss: 0.193785\n",
            "Train Epoch: 4 [6400/16000 40%]\tLoss: 0.238134\n",
            "Train Epoch: 4 [8000/16000 50%]\tLoss: 0.233100\n",
            "Train Epoch: 4 [9600/16000 60%]\tLoss: 0.206594\n",
            "Train Epoch: 4 [11200/16000 70%]\tLoss: 0.175583\n",
            "Train Epoch: 4 [12800/16000 80%]\tLoss: 0.203023\n",
            "Train Epoch: 4 [14400/16000 90%]\tLoss: 0.257401\n",
            "Validation set: Average loss: 0.2032\n",
            "\n",
            "Train Epoch: 5 [0/16000 0%]\tLoss: 0.178035\n",
            "Train Epoch: 5 [1600/16000 10%]\tLoss: 0.172677\n",
            "Train Epoch: 5 [3200/16000 20%]\tLoss: 0.159378\n",
            "Train Epoch: 5 [4800/16000 30%]\tLoss: 0.175010\n",
            "Train Epoch: 5 [6400/16000 40%]\tLoss: 0.167950\n",
            "Train Epoch: 5 [8000/16000 50%]\tLoss: 0.128485\n",
            "Train Epoch: 5 [9600/16000 60%]\tLoss: 0.174852\n",
            "Train Epoch: 5 [11200/16000 70%]\tLoss: 0.232339\n",
            "Train Epoch: 5 [12800/16000 80%]\tLoss: 0.200242\n",
            "Train Epoch: 5 [14400/16000 90%]\tLoss: 0.220606\n",
            "Validation set: Average loss: 0.2001\n",
            "\n",
            "Train Epoch: 6 [0/16000 0%]\tLoss: 0.191102\n",
            "Train Epoch: 6 [1600/16000 10%]\tLoss: 0.248258\n",
            "Train Epoch: 6 [3200/16000 20%]\tLoss: 0.196586\n",
            "Train Epoch: 6 [4800/16000 30%]\tLoss: 0.195222\n",
            "Train Epoch: 6 [6400/16000 40%]\tLoss: 0.215441\n",
            "Train Epoch: 6 [8000/16000 50%]\tLoss: 0.175788\n",
            "Train Epoch: 6 [9600/16000 60%]\tLoss: 0.240929\n",
            "Train Epoch: 6 [11200/16000 70%]\tLoss: 0.134349\n",
            "Train Epoch: 6 [12800/16000 80%]\tLoss: 0.150962\n",
            "Train Epoch: 6 [14400/16000 90%]\tLoss: 0.137390\n",
            "Validation set: Average loss: 0.1982\n",
            "\n",
            "Train Epoch: 7 [0/16000 0%]\tLoss: 0.193361\n",
            "Train Epoch: 7 [1600/16000 10%]\tLoss: 0.181054\n",
            "Train Epoch: 7 [3200/16000 20%]\tLoss: 0.158970\n",
            "Train Epoch: 7 [4800/16000 30%]\tLoss: 0.165711\n",
            "Train Epoch: 7 [6400/16000 40%]\tLoss: 0.167925\n",
            "Train Epoch: 7 [8000/16000 50%]\tLoss: 0.214435\n",
            "Train Epoch: 7 [9600/16000 60%]\tLoss: 0.182250\n",
            "Train Epoch: 7 [11200/16000 70%]\tLoss: 0.180848\n",
            "Train Epoch: 7 [12800/16000 80%]\tLoss: 0.220754\n",
            "Train Epoch: 7 [14400/16000 90%]\tLoss: 0.236142\n",
            "Validation set: Average loss: 0.1970\n",
            "\n",
            "Train Epoch: 8 [0/16000 0%]\tLoss: 0.206437\n",
            "Train Epoch: 8 [1600/16000 10%]\tLoss: 0.153496\n",
            "Train Epoch: 8 [3200/16000 20%]\tLoss: 0.130936\n",
            "Train Epoch: 8 [4800/16000 30%]\tLoss: 0.214053\n",
            "Train Epoch: 8 [6400/16000 40%]\tLoss: 0.212523\n",
            "Train Epoch: 8 [8000/16000 50%]\tLoss: 0.217974\n",
            "Train Epoch: 8 [9600/16000 60%]\tLoss: 0.134161\n",
            "Train Epoch: 8 [11200/16000 70%]\tLoss: 0.214408\n",
            "Train Epoch: 8 [12800/16000 80%]\tLoss: 0.251135\n",
            "Train Epoch: 8 [14400/16000 90%]\tLoss: 0.182324\n",
            "Validation set: Average loss: 0.1958\n",
            "\n",
            "Train Epoch: 9 [0/16000 0%]\tLoss: 0.151475\n",
            "Train Epoch: 9 [1600/16000 10%]\tLoss: 0.183338\n",
            "Train Epoch: 9 [3200/16000 20%]\tLoss: 0.163145\n",
            "Train Epoch: 9 [4800/16000 30%]\tLoss: 0.247537\n",
            "Train Epoch: 9 [6400/16000 40%]\tLoss: 0.195340\n",
            "Train Epoch: 9 [8000/16000 50%]\tLoss: 0.220309\n",
            "Train Epoch: 9 [9600/16000 60%]\tLoss: 0.173294\n",
            "Train Epoch: 9 [11200/16000 70%]\tLoss: 0.177837\n",
            "Train Epoch: 9 [12800/16000 80%]\tLoss: 0.136349\n",
            "Train Epoch: 9 [14400/16000 90%]\tLoss: 0.207796\n",
            "Validation set: Average loss: 0.1956\n",
            "\n",
            "Train Epoch: 10 [0/16000 0%]\tLoss: 0.189058\n",
            "Train Epoch: 10 [1600/16000 10%]\tLoss: 0.113791\n",
            "Train Epoch: 10 [3200/16000 20%]\tLoss: 0.216238\n",
            "Train Epoch: 10 [4800/16000 30%]\tLoss: 0.248309\n",
            "Train Epoch: 10 [6400/16000 40%]\tLoss: 0.148890\n",
            "Train Epoch: 10 [8000/16000 50%]\tLoss: 0.246966\n",
            "Train Epoch: 10 [9600/16000 60%]\tLoss: 0.217146\n",
            "Train Epoch: 10 [11200/16000 70%]\tLoss: 0.220135\n",
            "Train Epoch: 10 [12800/16000 80%]\tLoss: 0.224736\n",
            "Train Epoch: 10 [14400/16000 90%]\tLoss: 0.251881\n",
            "Validation set: Average loss: 0.1944\n",
            "\n",
            "Train Epoch: 11 [0/16000 0%]\tLoss: 0.145665\n",
            "Train Epoch: 11 [1600/16000 10%]\tLoss: 0.198047\n",
            "Train Epoch: 11 [3200/16000 20%]\tLoss: 0.199800\n",
            "Train Epoch: 11 [4800/16000 30%]\tLoss: 0.153739\n",
            "Train Epoch: 11 [6400/16000 40%]\tLoss: 0.219646\n",
            "Train Epoch: 11 [8000/16000 50%]\tLoss: 0.146348\n",
            "Train Epoch: 11 [9600/16000 60%]\tLoss: 0.199417\n",
            "Train Epoch: 11 [11200/16000 70%]\tLoss: 0.218895\n",
            "Train Epoch: 11 [12800/16000 80%]\tLoss: 0.186936\n",
            "Train Epoch: 11 [14400/16000 90%]\tLoss: 0.128759\n",
            "Validation set: Average loss: 0.1946\n",
            "\n",
            "Train Epoch: 12 [0/16000 0%]\tLoss: 0.184609\n",
            "Train Epoch: 12 [1600/16000 10%]\tLoss: 0.149853\n",
            "Train Epoch: 12 [3200/16000 20%]\tLoss: 0.135066\n",
            "Train Epoch: 12 [4800/16000 30%]\tLoss: 0.179677\n",
            "Train Epoch: 12 [6400/16000 40%]\tLoss: 0.184608\n",
            "Train Epoch: 12 [8000/16000 50%]\tLoss: 0.158493\n",
            "Train Epoch: 12 [9600/16000 60%]\tLoss: 0.197536\n",
            "Train Epoch: 12 [11200/16000 70%]\tLoss: 0.198116\n",
            "Train Epoch: 12 [12800/16000 80%]\tLoss: 0.254706\n",
            "Train Epoch: 12 [14400/16000 90%]\tLoss: 0.146743\n",
            "Validation set: Average loss: 0.1929\n",
            "\n",
            "Train Epoch: 13 [0/16000 0%]\tLoss: 0.227412\n",
            "Train Epoch: 13 [1600/16000 10%]\tLoss: 0.130803\n",
            "Train Epoch: 13 [3200/16000 20%]\tLoss: 0.217241\n",
            "Train Epoch: 13 [4800/16000 30%]\tLoss: 0.124332\n",
            "Train Epoch: 13 [6400/16000 40%]\tLoss: 0.160026\n",
            "Train Epoch: 13 [8000/16000 50%]\tLoss: 0.169711\n",
            "Train Epoch: 13 [9600/16000 60%]\tLoss: 0.260931\n",
            "Train Epoch: 13 [11200/16000 70%]\tLoss: 0.190145\n",
            "Train Epoch: 13 [12800/16000 80%]\tLoss: 0.318936\n",
            "Train Epoch: 13 [14400/16000 90%]\tLoss: 0.200049\n",
            "Validation set: Average loss: 0.1935\n",
            "\n",
            "Train Epoch: 14 [0/16000 0%]\tLoss: 0.162838\n",
            "Train Epoch: 14 [1600/16000 10%]\tLoss: 0.154393\n",
            "Train Epoch: 14 [3200/16000 20%]\tLoss: 0.158357\n",
            "Train Epoch: 14 [4800/16000 30%]\tLoss: 0.156625\n",
            "Train Epoch: 14 [6400/16000 40%]\tLoss: 0.216119\n",
            "Train Epoch: 14 [8000/16000 50%]\tLoss: 0.121730\n",
            "Train Epoch: 14 [9600/16000 60%]\tLoss: 0.117354\n",
            "Train Epoch: 14 [11200/16000 70%]\tLoss: 0.235388\n",
            "Train Epoch: 14 [12800/16000 80%]\tLoss: 0.209182\n",
            "Train Epoch: 14 [14400/16000 90%]\tLoss: 0.213920\n",
            "Validation set: Average loss: 0.1916\n",
            "\n",
            "Train Epoch: 15 [0/16000 0%]\tLoss: 0.175854\n",
            "Train Epoch: 15 [1600/16000 10%]\tLoss: 0.198723\n",
            "Train Epoch: 15 [3200/16000 20%]\tLoss: 0.126261\n",
            "Train Epoch: 15 [4800/16000 30%]\tLoss: 0.192073\n",
            "Train Epoch: 15 [6400/16000 40%]\tLoss: 0.163978\n",
            "Train Epoch: 15 [8000/16000 50%]\tLoss: 0.177732\n",
            "Train Epoch: 15 [9600/16000 60%]\tLoss: 0.188424\n",
            "Train Epoch: 15 [11200/16000 70%]\tLoss: 0.153780\n",
            "Train Epoch: 15 [12800/16000 80%]\tLoss: 0.140341\n",
            "Train Epoch: 15 [14400/16000 90%]\tLoss: 0.252394\n",
            "Validation set: Average loss: 0.1915\n",
            "\n",
            "Train Epoch: 16 [0/16000 0%]\tLoss: 0.240834\n",
            "Train Epoch: 16 [1600/16000 10%]\tLoss: 0.146310\n",
            "Train Epoch: 16 [3200/16000 20%]\tLoss: 0.178706\n",
            "Train Epoch: 16 [4800/16000 30%]\tLoss: 0.169384\n",
            "Train Epoch: 16 [6400/16000 40%]\tLoss: 0.156438\n",
            "Train Epoch: 16 [8000/16000 50%]\tLoss: 0.120201\n",
            "Train Epoch: 16 [9600/16000 60%]\tLoss: 0.199936\n",
            "Train Epoch: 16 [11200/16000 70%]\tLoss: 0.179200\n",
            "Train Epoch: 16 [12800/16000 80%]\tLoss: 0.168727\n",
            "Train Epoch: 16 [14400/16000 90%]\tLoss: 0.207210\n",
            "Validation set: Average loss: 0.1917\n",
            "\n",
            "Train Epoch: 17 [0/16000 0%]\tLoss: 0.212960\n",
            "Train Epoch: 17 [1600/16000 10%]\tLoss: 0.138742\n",
            "Train Epoch: 17 [3200/16000 20%]\tLoss: 0.194499\n",
            "Train Epoch: 17 [4800/16000 30%]\tLoss: 0.190716\n",
            "Train Epoch: 17 [6400/16000 40%]\tLoss: 0.235657\n",
            "Train Epoch: 17 [8000/16000 50%]\tLoss: 0.158723\n",
            "Train Epoch: 17 [9600/16000 60%]\tLoss: 0.223018\n",
            "Train Epoch: 17 [11200/16000 70%]\tLoss: 0.232843\n",
            "Train Epoch: 17 [12800/16000 80%]\tLoss: 0.189109\n",
            "Train Epoch: 17 [14400/16000 90%]\tLoss: 0.173009\n",
            "Validation set: Average loss: 0.1913\n",
            "\n",
            "Train Epoch: 18 [0/16000 0%]\tLoss: 0.216379\n",
            "Train Epoch: 18 [1600/16000 10%]\tLoss: 0.211149\n",
            "Train Epoch: 18 [3200/16000 20%]\tLoss: 0.150035\n",
            "Train Epoch: 18 [4800/16000 30%]\tLoss: 0.178820\n",
            "Train Epoch: 18 [6400/16000 40%]\tLoss: 0.144787\n",
            "Train Epoch: 18 [8000/16000 50%]\tLoss: 0.134442\n",
            "Train Epoch: 18 [9600/16000 60%]\tLoss: 0.232988\n",
            "Train Epoch: 18 [11200/16000 70%]\tLoss: 0.154534\n",
            "Train Epoch: 18 [12800/16000 80%]\tLoss: 0.221361\n",
            "Train Epoch: 18 [14400/16000 90%]\tLoss: 0.179136\n",
            "Validation set: Average loss: 0.1899\n",
            "\n",
            "Train Epoch: 19 [0/16000 0%]\tLoss: 0.164863\n",
            "Train Epoch: 19 [1600/16000 10%]\tLoss: 0.204405\n",
            "Train Epoch: 19 [3200/16000 20%]\tLoss: 0.174142\n",
            "Train Epoch: 19 [4800/16000 30%]\tLoss: 0.198599\n",
            "Train Epoch: 19 [6400/16000 40%]\tLoss: 0.181440\n",
            "Train Epoch: 19 [8000/16000 50%]\tLoss: 0.191790\n",
            "Train Epoch: 19 [9600/16000 60%]\tLoss: 0.189914\n",
            "Train Epoch: 19 [11200/16000 70%]\tLoss: 0.192945\n",
            "Train Epoch: 19 [12800/16000 80%]\tLoss: 0.183975\n",
            "Train Epoch: 19 [14400/16000 90%]\tLoss: 0.201697\n",
            "Validation set: Average loss: 0.1890\n",
            "\n",
            "Train Epoch: 20 [0/16000 0%]\tLoss: 0.210148\n",
            "Train Epoch: 20 [1600/16000 10%]\tLoss: 0.140316\n",
            "Train Epoch: 20 [3200/16000 20%]\tLoss: 0.176469\n",
            "Train Epoch: 20 [4800/16000 30%]\tLoss: 0.200412\n",
            "Train Epoch: 20 [6400/16000 40%]\tLoss: 0.159909\n",
            "Train Epoch: 20 [8000/16000 50%]\tLoss: 0.184000\n",
            "Train Epoch: 20 [9600/16000 60%]\tLoss: 0.171322\n",
            "Train Epoch: 20 [11200/16000 70%]\tLoss: 0.177838\n",
            "Train Epoch: 20 [12800/16000 80%]\tLoss: 0.151041\n",
            "Train Epoch: 20 [14400/16000 90%]\tLoss: 0.148587\n",
            "Validation set: Average loss: 0.1901\n",
            "\n",
            "Train Epoch: 21 [0/16000 0%]\tLoss: 0.151938\n",
            "Train Epoch: 21 [1600/16000 10%]\tLoss: 0.229288\n",
            "Train Epoch: 21 [3200/16000 20%]\tLoss: 0.175518\n",
            "Train Epoch: 21 [4800/16000 30%]\tLoss: 0.191225\n",
            "Train Epoch: 21 [6400/16000 40%]\tLoss: 0.185549\n",
            "Train Epoch: 21 [8000/16000 50%]\tLoss: 0.134242\n",
            "Train Epoch: 21 [9600/16000 60%]\tLoss: 0.169257\n",
            "Train Epoch: 21 [11200/16000 70%]\tLoss: 0.198554\n",
            "Train Epoch: 21 [12800/16000 80%]\tLoss: 0.160618\n",
            "Train Epoch: 21 [14400/16000 90%]\tLoss: 0.170788\n",
            "Validation set: Average loss: 0.1897\n",
            "\n",
            "Train Epoch: 22 [0/16000 0%]\tLoss: 0.141129\n",
            "Train Epoch: 22 [1600/16000 10%]\tLoss: 0.122658\n",
            "Train Epoch: 22 [3200/16000 20%]\tLoss: 0.148519\n",
            "Train Epoch: 22 [4800/16000 30%]\tLoss: 0.194570\n",
            "Train Epoch: 22 [6400/16000 40%]\tLoss: 0.119057\n",
            "Train Epoch: 22 [8000/16000 50%]\tLoss: 0.243454\n",
            "Train Epoch: 22 [9600/16000 60%]\tLoss: 0.198447\n",
            "Train Epoch: 22 [11200/16000 70%]\tLoss: 0.250357\n",
            "Train Epoch: 22 [12800/16000 80%]\tLoss: 0.173435\n",
            "Train Epoch: 22 [14400/16000 90%]\tLoss: 0.233540\n",
            "Validation set: Average loss: 0.1884\n",
            "\n",
            "Train Epoch: 23 [0/16000 0%]\tLoss: 0.146075\n",
            "Train Epoch: 23 [1600/16000 10%]\tLoss: 0.173441\n",
            "Train Epoch: 23 [3200/16000 20%]\tLoss: 0.136512\n",
            "Train Epoch: 23 [4800/16000 30%]\tLoss: 0.218538\n",
            "Train Epoch: 23 [6400/16000 40%]\tLoss: 0.188490\n",
            "Train Epoch: 23 [8000/16000 50%]\tLoss: 0.190325\n",
            "Train Epoch: 23 [9600/16000 60%]\tLoss: 0.147593\n",
            "Train Epoch: 23 [11200/16000 70%]\tLoss: 0.167406\n",
            "Train Epoch: 23 [12800/16000 80%]\tLoss: 0.185609\n",
            "Train Epoch: 23 [14400/16000 90%]\tLoss: 0.136312\n",
            "Validation set: Average loss: 0.1894\n",
            "\n",
            "Train Epoch: 24 [0/16000 0%]\tLoss: 0.160651\n",
            "Train Epoch: 24 [1600/16000 10%]\tLoss: 0.245829\n",
            "Train Epoch: 24 [3200/16000 20%]\tLoss: 0.144780\n",
            "Train Epoch: 24 [4800/16000 30%]\tLoss: 0.133559\n",
            "Train Epoch: 24 [6400/16000 40%]\tLoss: 0.146212\n",
            "Train Epoch: 24 [8000/16000 50%]\tLoss: 0.136793\n",
            "Train Epoch: 24 [9600/16000 60%]\tLoss: 0.197879\n",
            "Train Epoch: 24 [11200/16000 70%]\tLoss: 0.133843\n",
            "Train Epoch: 24 [12800/16000 80%]\tLoss: 0.180268\n",
            "Train Epoch: 24 [14400/16000 90%]\tLoss: 0.237552\n",
            "Validation set: Average loss: 0.1888\n",
            "\n",
            "Train Epoch: 25 [0/16000 0%]\tLoss: 0.199047\n",
            "Train Epoch: 25 [1600/16000 10%]\tLoss: 0.213039\n",
            "Train Epoch: 25 [3200/16000 20%]\tLoss: 0.157461\n",
            "Train Epoch: 25 [4800/16000 30%]\tLoss: 0.197784\n",
            "Train Epoch: 25 [6400/16000 40%]\tLoss: 0.151956\n",
            "Train Epoch: 25 [8000/16000 50%]\tLoss: 0.196715\n",
            "Train Epoch: 25 [9600/16000 60%]\tLoss: 0.162431\n",
            "Train Epoch: 25 [11200/16000 70%]\tLoss: 0.197883\n",
            "Train Epoch: 25 [12800/16000 80%]\tLoss: 0.198005\n",
            "Train Epoch: 25 [14400/16000 90%]\tLoss: 0.170153\n",
            "Validation set: Average loss: 0.1885\n",
            "\n",
            "Train Epoch: 26 [0/16000 0%]\tLoss: 0.164712\n",
            "Train Epoch: 26 [1600/16000 10%]\tLoss: 0.185717\n",
            "Train Epoch: 26 [3200/16000 20%]\tLoss: 0.191004\n",
            "Train Epoch: 26 [4800/16000 30%]\tLoss: 0.164543\n",
            "Train Epoch: 26 [6400/16000 40%]\tLoss: 0.161061\n",
            "Train Epoch: 26 [8000/16000 50%]\tLoss: 0.229595\n",
            "Train Epoch: 26 [9600/16000 60%]\tLoss: 0.180826\n",
            "Train Epoch: 26 [11200/16000 70%]\tLoss: 0.220471\n",
            "Train Epoch: 26 [12800/16000 80%]\tLoss: 0.175228\n",
            "Train Epoch: 26 [14400/16000 90%]\tLoss: 0.196009\n",
            "Validation set: Average loss: 0.1877\n",
            "\n",
            "Train Epoch: 27 [0/16000 0%]\tLoss: 0.173957\n",
            "Train Epoch: 27 [1600/16000 10%]\tLoss: 0.186601\n",
            "Train Epoch: 27 [3200/16000 20%]\tLoss: 0.129283\n",
            "Train Epoch: 27 [4800/16000 30%]\tLoss: 0.195119\n",
            "Train Epoch: 27 [6400/16000 40%]\tLoss: 0.174228\n",
            "Train Epoch: 27 [8000/16000 50%]\tLoss: 0.129896\n",
            "Train Epoch: 27 [9600/16000 60%]\tLoss: 0.141070\n",
            "Train Epoch: 27 [11200/16000 70%]\tLoss: 0.149044\n",
            "Train Epoch: 27 [12800/16000 80%]\tLoss: 0.119604\n",
            "Train Epoch: 27 [14400/16000 90%]\tLoss: 0.173371\n",
            "Validation set: Average loss: 0.1865\n",
            "\n",
            "Train Epoch: 28 [0/16000 0%]\tLoss: 0.272503\n",
            "Train Epoch: 28 [1600/16000 10%]\tLoss: 0.277577\n",
            "Train Epoch: 28 [3200/16000 20%]\tLoss: 0.169533\n",
            "Train Epoch: 28 [4800/16000 30%]\tLoss: 0.176890\n",
            "Train Epoch: 28 [6400/16000 40%]\tLoss: 0.201920\n",
            "Train Epoch: 28 [8000/16000 50%]\tLoss: 0.172976\n",
            "Train Epoch: 28 [9600/16000 60%]\tLoss: 0.177083\n",
            "Train Epoch: 28 [11200/16000 70%]\tLoss: 0.165357\n",
            "Train Epoch: 28 [12800/16000 80%]\tLoss: 0.175143\n",
            "Train Epoch: 28 [14400/16000 90%]\tLoss: 0.172194\n",
            "Validation set: Average loss: 0.1892\n",
            "\n",
            "Train Epoch: 29 [0/16000 0%]\tLoss: 0.133022\n",
            "Train Epoch: 29 [1600/16000 10%]\tLoss: 0.159920\n",
            "Train Epoch: 29 [3200/16000 20%]\tLoss: 0.131932\n",
            "Train Epoch: 29 [4800/16000 30%]\tLoss: 0.162444\n",
            "Train Epoch: 29 [6400/16000 40%]\tLoss: 0.207872\n",
            "Train Epoch: 29 [8000/16000 50%]\tLoss: 0.184649\n",
            "Train Epoch: 29 [9600/16000 60%]\tLoss: 0.133820\n",
            "Train Epoch: 29 [11200/16000 70%]\tLoss: 0.167928\n",
            "Train Epoch: 29 [12800/16000 80%]\tLoss: 0.140360\n",
            "Train Epoch: 29 [14400/16000 90%]\tLoss: 0.158092\n",
            "Validation set: Average loss: 0.1872\n",
            "\n",
            "Train Epoch: 30 [0/16000 0%]\tLoss: 0.200038\n",
            "Train Epoch: 30 [1600/16000 10%]\tLoss: 0.227981\n",
            "Train Epoch: 30 [3200/16000 20%]\tLoss: 0.185582\n",
            "Train Epoch: 30 [4800/16000 30%]\tLoss: 0.245257\n",
            "Train Epoch: 30 [6400/16000 40%]\tLoss: 0.177184\n",
            "Train Epoch: 30 [8000/16000 50%]\tLoss: 0.188923\n",
            "Train Epoch: 30 [9600/16000 60%]\tLoss: 0.207023\n",
            "Train Epoch: 30 [11200/16000 70%]\tLoss: 0.146455\n",
            "Train Epoch: 30 [12800/16000 80%]\tLoss: 0.185256\n",
            "Train Epoch: 30 [14400/16000 90%]\tLoss: 0.166085\n",
            "Validation set: Average loss: 0.1874\n",
            "\n",
            "CPU times: user 14min 59s, sys: 1min 7s, total: 16min 6s\n",
            "Wall time: 16min 10s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "3-XAs850DmTG",
        "colab_type": "code",
        "outputId": "7dea2af4-d5a9-42f0-f2b9-13b7c97f04ba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "loss_sim2t = train_loss\n",
        "loss_sim2v = val_loss \n",
        "\n",
        "plt.title(\"Loss of Simple CNN2 Model\")\n",
        "plt.plot(train_loss, label=\"train\")\n",
        "plt.plot(val_loss, label=\"validation\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\ngg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d651ab70>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "UsuYpDf8D2l_",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### b) simple_cnn_3"
      ]
    },
    {
      "metadata": {
        "id": "OoAH19qC8UM0",
        "colab_type": "code",
        "outputId": "1457fcf5-5aad-4a3a-a4db-a4b8837e8063",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 6388
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "model = simple_cnn3().to(device)\n",
        "epoch = 30\n",
        "\n",
        "learning_rate = 0.00001 # for deep_cnn\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()\n",
        "\n",
        "train_loss, val_loss = [], []\n",
        "for i in range(1,1+epoch):\n",
        "    train_net(model, train_loader_2, i, train_loss)\n",
        "    validate(model, test_loader_2, val_loss)\n",
        "    torch.save(model.state_dict(), '/content/gdrive/My Drive/Image_project/Our_models/model_simcnn3_epoch'+str(i)+'.pkl')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Epoch: 1 [0/16000 0%]\tLoss: 0.716171\n",
            "Train Epoch: 1 [1600/16000 10%]\tLoss: 0.706740\n",
            "Train Epoch: 1 [3200/16000 20%]\tLoss: 0.671897\n",
            "Train Epoch: 1 [4800/16000 30%]\tLoss: 0.640201\n",
            "Train Epoch: 1 [6400/16000 40%]\tLoss: 0.607562\n",
            "Train Epoch: 1 [8000/16000 50%]\tLoss: 0.603095\n",
            "Train Epoch: 1 [9600/16000 60%]\tLoss: 0.565395\n",
            "Train Epoch: 1 [11200/16000 70%]\tLoss: 0.556616\n",
            "Train Epoch: 1 [12800/16000 80%]\tLoss: 0.543989\n",
            "Train Epoch: 1 [14400/16000 90%]\tLoss: 0.508607\n",
            "Validation set: Average loss: 0.4851\n",
            "\n",
            "Train Epoch: 2 [0/16000 0%]\tLoss: 0.474152\n",
            "Train Epoch: 2 [1600/16000 10%]\tLoss: 0.453058\n",
            "Train Epoch: 2 [3200/16000 20%]\tLoss: 0.451841\n",
            "Train Epoch: 2 [4800/16000 30%]\tLoss: 0.447757\n",
            "Train Epoch: 2 [6400/16000 40%]\tLoss: 0.411141\n",
            "Train Epoch: 2 [8000/16000 50%]\tLoss: 0.398608\n",
            "Train Epoch: 2 [9600/16000 60%]\tLoss: 0.389852\n",
            "Train Epoch: 2 [11200/16000 70%]\tLoss: 0.381994\n",
            "Train Epoch: 2 [12800/16000 80%]\tLoss: 0.340822\n",
            "Train Epoch: 2 [14400/16000 90%]\tLoss: 0.407034\n",
            "Validation set: Average loss: 0.3535\n",
            "\n",
            "Train Epoch: 3 [0/16000 0%]\tLoss: 0.345132\n",
            "Train Epoch: 3 [1600/16000 10%]\tLoss: 0.351346\n",
            "Train Epoch: 3 [3200/16000 20%]\tLoss: 0.288189\n",
            "Train Epoch: 3 [4800/16000 30%]\tLoss: 0.365596\n",
            "Train Epoch: 3 [6400/16000 40%]\tLoss: 0.306934\n",
            "Train Epoch: 3 [8000/16000 50%]\tLoss: 0.354959\n",
            "Train Epoch: 3 [9600/16000 60%]\tLoss: 0.353376\n",
            "Train Epoch: 3 [11200/16000 70%]\tLoss: 0.255235\n",
            "Train Epoch: 3 [12800/16000 80%]\tLoss: 0.359336\n",
            "Train Epoch: 3 [14400/16000 90%]\tLoss: 0.296659\n",
            "Validation set: Average loss: 0.2878\n",
            "\n",
            "Train Epoch: 4 [0/16000 0%]\tLoss: 0.236743\n",
            "Train Epoch: 4 [1600/16000 10%]\tLoss: 0.266662\n",
            "Train Epoch: 4 [3200/16000 20%]\tLoss: 0.255931\n",
            "Train Epoch: 4 [4800/16000 30%]\tLoss: 0.318360\n",
            "Train Epoch: 4 [6400/16000 40%]\tLoss: 0.271709\n",
            "Train Epoch: 4 [8000/16000 50%]\tLoss: 0.282637\n",
            "Train Epoch: 4 [9600/16000 60%]\tLoss: 0.288688\n",
            "Train Epoch: 4 [11200/16000 70%]\tLoss: 0.303576\n",
            "Train Epoch: 4 [12800/16000 80%]\tLoss: 0.274454\n",
            "Train Epoch: 4 [14400/16000 90%]\tLoss: 0.213064\n",
            "Validation set: Average loss: 0.2527\n",
            "\n",
            "Train Epoch: 5 [0/16000 0%]\tLoss: 0.294122\n",
            "Train Epoch: 5 [1600/16000 10%]\tLoss: 0.233913\n",
            "Train Epoch: 5 [3200/16000 20%]\tLoss: 0.214144\n",
            "Train Epoch: 5 [4800/16000 30%]\tLoss: 0.246054\n",
            "Train Epoch: 5 [6400/16000 40%]\tLoss: 0.245179\n",
            "Train Epoch: 5 [8000/16000 50%]\tLoss: 0.236188\n",
            "Train Epoch: 5 [9600/16000 60%]\tLoss: 0.258485\n",
            "Train Epoch: 5 [11200/16000 70%]\tLoss: 0.216806\n",
            "Train Epoch: 5 [12800/16000 80%]\tLoss: 0.220953\n",
            "Train Epoch: 5 [14400/16000 90%]\tLoss: 0.239055\n",
            "Validation set: Average loss: 0.2358\n",
            "\n",
            "Train Epoch: 6 [0/16000 0%]\tLoss: 0.239160\n",
            "Train Epoch: 6 [1600/16000 10%]\tLoss: 0.239623\n",
            "Train Epoch: 6 [3200/16000 20%]\tLoss: 0.230642\n",
            "Train Epoch: 6 [4800/16000 30%]\tLoss: 0.249664\n",
            "Train Epoch: 6 [6400/16000 40%]\tLoss: 0.252090\n",
            "Train Epoch: 6 [8000/16000 50%]\tLoss: 0.219351\n",
            "Train Epoch: 6 [9600/16000 60%]\tLoss: 0.190587\n",
            "Train Epoch: 6 [11200/16000 70%]\tLoss: 0.200258\n",
            "Train Epoch: 6 [12800/16000 80%]\tLoss: 0.244763\n",
            "Train Epoch: 6 [14400/16000 90%]\tLoss: 0.203117\n",
            "Validation set: Average loss: 0.2262\n",
            "\n",
            "Train Epoch: 7 [0/16000 0%]\tLoss: 0.298799\n",
            "Train Epoch: 7 [1600/16000 10%]\tLoss: 0.258607\n",
            "Train Epoch: 7 [3200/16000 20%]\tLoss: 0.161451\n",
            "Train Epoch: 7 [4800/16000 30%]\tLoss: 0.222812\n",
            "Train Epoch: 7 [6400/16000 40%]\tLoss: 0.225956\n",
            "Train Epoch: 7 [8000/16000 50%]\tLoss: 0.202016\n",
            "Train Epoch: 7 [9600/16000 60%]\tLoss: 0.210495\n",
            "Train Epoch: 7 [11200/16000 70%]\tLoss: 0.187839\n",
            "Train Epoch: 7 [12800/16000 80%]\tLoss: 0.201880\n",
            "Train Epoch: 7 [14400/16000 90%]\tLoss: 0.193360\n",
            "Validation set: Average loss: 0.2209\n",
            "\n",
            "Train Epoch: 8 [0/16000 0%]\tLoss: 0.208595\n",
            "Train Epoch: 8 [1600/16000 10%]\tLoss: 0.232490\n",
            "Train Epoch: 8 [3200/16000 20%]\tLoss: 0.183098\n",
            "Train Epoch: 8 [4800/16000 30%]\tLoss: 0.201891\n",
            "Train Epoch: 8 [6400/16000 40%]\tLoss: 0.183169\n",
            "Train Epoch: 8 [8000/16000 50%]\tLoss: 0.196303\n",
            "Train Epoch: 8 [9600/16000 60%]\tLoss: 0.218665\n",
            "Train Epoch: 8 [11200/16000 70%]\tLoss: 0.216028\n",
            "Train Epoch: 8 [12800/16000 80%]\tLoss: 0.238370\n",
            "Train Epoch: 8 [14400/16000 90%]\tLoss: 0.262681\n",
            "Validation set: Average loss: 0.2175\n",
            "\n",
            "Train Epoch: 9 [0/16000 0%]\tLoss: 0.261000\n",
            "Train Epoch: 9 [1600/16000 10%]\tLoss: 0.171213\n",
            "Train Epoch: 9 [3200/16000 20%]\tLoss: 0.226206\n",
            "Train Epoch: 9 [4800/16000 30%]\tLoss: 0.197168\n",
            "Train Epoch: 9 [6400/16000 40%]\tLoss: 0.236783\n",
            "Train Epoch: 9 [8000/16000 50%]\tLoss: 0.201015\n",
            "Train Epoch: 9 [9600/16000 60%]\tLoss: 0.242181\n",
            "Train Epoch: 9 [11200/16000 70%]\tLoss: 0.268123\n",
            "Train Epoch: 9 [12800/16000 80%]\tLoss: 0.220290\n",
            "Train Epoch: 9 [14400/16000 90%]\tLoss: 0.205593\n",
            "Validation set: Average loss: 0.2157\n",
            "\n",
            "Train Epoch: 10 [0/16000 0%]\tLoss: 0.223612\n",
            "Train Epoch: 10 [1600/16000 10%]\tLoss: 0.199925\n",
            "Train Epoch: 10 [3200/16000 20%]\tLoss: 0.146419\n",
            "Train Epoch: 10 [4800/16000 30%]\tLoss: 0.227204\n",
            "Train Epoch: 10 [6400/16000 40%]\tLoss: 0.184301\n",
            "Train Epoch: 10 [8000/16000 50%]\tLoss: 0.206720\n",
            "Train Epoch: 10 [9600/16000 60%]\tLoss: 0.192920\n",
            "Train Epoch: 10 [11200/16000 70%]\tLoss: 0.148764\n",
            "Train Epoch: 10 [12800/16000 80%]\tLoss: 0.248935\n",
            "Train Epoch: 10 [14400/16000 90%]\tLoss: 0.253505\n",
            "Validation set: Average loss: 0.2140\n",
            "\n",
            "Train Epoch: 11 [0/16000 0%]\tLoss: 0.237519\n",
            "Train Epoch: 11 [1600/16000 10%]\tLoss: 0.172128\n",
            "Train Epoch: 11 [3200/16000 20%]\tLoss: 0.242136\n",
            "Train Epoch: 11 [4800/16000 30%]\tLoss: 0.279911\n",
            "Train Epoch: 11 [6400/16000 40%]\tLoss: 0.186037\n",
            "Train Epoch: 11 [8000/16000 50%]\tLoss: 0.213250\n",
            "Train Epoch: 11 [9600/16000 60%]\tLoss: 0.156414\n",
            "Train Epoch: 11 [11200/16000 70%]\tLoss: 0.195965\n",
            "Train Epoch: 11 [12800/16000 80%]\tLoss: 0.261483\n",
            "Train Epoch: 11 [14400/16000 90%]\tLoss: 0.211078\n",
            "Validation set: Average loss: 0.2124\n",
            "\n",
            "Train Epoch: 12 [0/16000 0%]\tLoss: 0.215517\n",
            "Train Epoch: 12 [1600/16000 10%]\tLoss: 0.230434\n",
            "Train Epoch: 12 [3200/16000 20%]\tLoss: 0.214585\n",
            "Train Epoch: 12 [4800/16000 30%]\tLoss: 0.213754\n",
            "Train Epoch: 12 [6400/16000 40%]\tLoss: 0.206292\n",
            "Train Epoch: 12 [8000/16000 50%]\tLoss: 0.247316\n",
            "Train Epoch: 12 [9600/16000 60%]\tLoss: 0.216631\n",
            "Train Epoch: 12 [11200/16000 70%]\tLoss: 0.216553\n",
            "Train Epoch: 12 [12800/16000 80%]\tLoss: 0.238723\n",
            "Train Epoch: 12 [14400/16000 90%]\tLoss: 0.197862\n",
            "Validation set: Average loss: 0.2115\n",
            "\n",
            "Train Epoch: 13 [0/16000 0%]\tLoss: 0.146970\n",
            "Train Epoch: 13 [1600/16000 10%]\tLoss: 0.152217\n",
            "Train Epoch: 13 [3200/16000 20%]\tLoss: 0.208892\n",
            "Train Epoch: 13 [4800/16000 30%]\tLoss: 0.233397\n",
            "Train Epoch: 13 [6400/16000 40%]\tLoss: 0.213657\n",
            "Train Epoch: 13 [8000/16000 50%]\tLoss: 0.174149\n",
            "Train Epoch: 13 [9600/16000 60%]\tLoss: 0.225893\n",
            "Train Epoch: 13 [11200/16000 70%]\tLoss: 0.244308\n",
            "Train Epoch: 13 [12800/16000 80%]\tLoss: 0.259023\n",
            "Train Epoch: 13 [14400/16000 90%]\tLoss: 0.190752\n",
            "Validation set: Average loss: 0.2099\n",
            "\n",
            "Train Epoch: 14 [0/16000 0%]\tLoss: 0.184027\n",
            "Train Epoch: 14 [1600/16000 10%]\tLoss: 0.169727\n",
            "Train Epoch: 14 [3200/16000 20%]\tLoss: 0.254363\n",
            "Train Epoch: 14 [4800/16000 30%]\tLoss: 0.197004\n",
            "Train Epoch: 14 [6400/16000 40%]\tLoss: 0.157750\n",
            "Train Epoch: 14 [8000/16000 50%]\tLoss: 0.187475\n",
            "Train Epoch: 14 [9600/16000 60%]\tLoss: 0.197610\n",
            "Train Epoch: 14 [11200/16000 70%]\tLoss: 0.220523\n",
            "Train Epoch: 14 [12800/16000 80%]\tLoss: 0.192063\n",
            "Train Epoch: 14 [14400/16000 90%]\tLoss: 0.228819\n",
            "Validation set: Average loss: 0.2092\n",
            "\n",
            "Train Epoch: 15 [0/16000 0%]\tLoss: 0.222823\n",
            "Train Epoch: 15 [1600/16000 10%]\tLoss: 0.187884\n",
            "Train Epoch: 15 [3200/16000 20%]\tLoss: 0.209235\n",
            "Train Epoch: 15 [4800/16000 30%]\tLoss: 0.214493\n",
            "Train Epoch: 15 [6400/16000 40%]\tLoss: 0.204189\n",
            "Train Epoch: 15 [8000/16000 50%]\tLoss: 0.179117\n",
            "Train Epoch: 15 [9600/16000 60%]\tLoss: 0.208909\n",
            "Train Epoch: 15 [11200/16000 70%]\tLoss: 0.221167\n",
            "Train Epoch: 15 [12800/16000 80%]\tLoss: 0.247278\n",
            "Train Epoch: 15 [14400/16000 90%]\tLoss: 0.187968\n",
            "Validation set: Average loss: 0.2084\n",
            "\n",
            "Train Epoch: 16 [0/16000 0%]\tLoss: 0.181807\n",
            "Train Epoch: 16 [1600/16000 10%]\tLoss: 0.205935\n",
            "Train Epoch: 16 [3200/16000 20%]\tLoss: 0.201316\n",
            "Train Epoch: 16 [4800/16000 30%]\tLoss: 0.216906\n",
            "Train Epoch: 16 [6400/16000 40%]\tLoss: 0.207579\n",
            "Train Epoch: 16 [8000/16000 50%]\tLoss: 0.259304\n",
            "Train Epoch: 16 [9600/16000 60%]\tLoss: 0.168730\n",
            "Train Epoch: 16 [11200/16000 70%]\tLoss: 0.213136\n",
            "Train Epoch: 16 [12800/16000 80%]\tLoss: 0.168195\n",
            "Train Epoch: 16 [14400/16000 90%]\tLoss: 0.160420\n",
            "Validation set: Average loss: 0.2077\n",
            "\n",
            "Train Epoch: 17 [0/16000 0%]\tLoss: 0.198213\n",
            "Train Epoch: 17 [1600/16000 10%]\tLoss: 0.211451\n",
            "Train Epoch: 17 [3200/16000 20%]\tLoss: 0.263794\n",
            "Train Epoch: 17 [4800/16000 30%]\tLoss: 0.240183\n",
            "Train Epoch: 17 [6400/16000 40%]\tLoss: 0.232421\n",
            "Train Epoch: 17 [8000/16000 50%]\tLoss: 0.209290\n",
            "Train Epoch: 17 [9600/16000 60%]\tLoss: 0.222375\n",
            "Train Epoch: 17 [11200/16000 70%]\tLoss: 0.186358\n",
            "Train Epoch: 17 [12800/16000 80%]\tLoss: 0.168967\n",
            "Train Epoch: 17 [14400/16000 90%]\tLoss: 0.231522\n",
            "Validation set: Average loss: 0.2066\n",
            "\n",
            "Train Epoch: 18 [0/16000 0%]\tLoss: 0.203756\n",
            "Train Epoch: 18 [1600/16000 10%]\tLoss: 0.215453\n",
            "Train Epoch: 18 [3200/16000 20%]\tLoss: 0.226643\n",
            "Train Epoch: 18 [4800/16000 30%]\tLoss: 0.182559\n",
            "Train Epoch: 18 [6400/16000 40%]\tLoss: 0.206242\n",
            "Train Epoch: 18 [8000/16000 50%]\tLoss: 0.184007\n",
            "Train Epoch: 18 [9600/16000 60%]\tLoss: 0.193082\n",
            "Train Epoch: 18 [11200/16000 70%]\tLoss: 0.210031\n",
            "Train Epoch: 18 [12800/16000 80%]\tLoss: 0.241817\n",
            "Train Epoch: 18 [14400/16000 90%]\tLoss: 0.212670\n",
            "Validation set: Average loss: 0.2063\n",
            "\n",
            "Train Epoch: 19 [0/16000 0%]\tLoss: 0.177190\n",
            "Train Epoch: 19 [1600/16000 10%]\tLoss: 0.164652\n",
            "Train Epoch: 19 [3200/16000 20%]\tLoss: 0.172710\n",
            "Train Epoch: 19 [4800/16000 30%]\tLoss: 0.211263\n",
            "Train Epoch: 19 [6400/16000 40%]\tLoss: 0.256569\n",
            "Train Epoch: 19 [8000/16000 50%]\tLoss: 0.210143\n",
            "Train Epoch: 19 [9600/16000 60%]\tLoss: 0.157014\n",
            "Train Epoch: 19 [11200/16000 70%]\tLoss: 0.264933\n",
            "Train Epoch: 19 [12800/16000 80%]\tLoss: 0.191380\n",
            "Train Epoch: 19 [14400/16000 90%]\tLoss: 0.157738\n",
            "Validation set: Average loss: 0.2052\n",
            "\n",
            "Train Epoch: 20 [0/16000 0%]\tLoss: 0.224595\n",
            "Train Epoch: 20 [1600/16000 10%]\tLoss: 0.192989\n",
            "Train Epoch: 20 [3200/16000 20%]\tLoss: 0.231711\n",
            "Train Epoch: 20 [4800/16000 30%]\tLoss: 0.195709\n",
            "Train Epoch: 20 [6400/16000 40%]\tLoss: 0.217850\n",
            "Train Epoch: 20 [8000/16000 50%]\tLoss: 0.124379\n",
            "Train Epoch: 20 [9600/16000 60%]\tLoss: 0.177256\n",
            "Train Epoch: 20 [11200/16000 70%]\tLoss: 0.233980\n",
            "Train Epoch: 20 [12800/16000 80%]\tLoss: 0.207264\n",
            "Train Epoch: 20 [14400/16000 90%]\tLoss: 0.270787\n",
            "Validation set: Average loss: 0.2054\n",
            "\n",
            "Train Epoch: 21 [0/16000 0%]\tLoss: 0.193961\n",
            "Train Epoch: 21 [1600/16000 10%]\tLoss: 0.197843\n",
            "Train Epoch: 21 [3200/16000 20%]\tLoss: 0.280880\n",
            "Train Epoch: 21 [4800/16000 30%]\tLoss: 0.197147\n",
            "Train Epoch: 21 [6400/16000 40%]\tLoss: 0.207827\n",
            "Train Epoch: 21 [8000/16000 50%]\tLoss: 0.199453\n",
            "Train Epoch: 21 [9600/16000 60%]\tLoss: 0.160948\n",
            "Train Epoch: 21 [11200/16000 70%]\tLoss: 0.161566\n",
            "Train Epoch: 21 [12800/16000 80%]\tLoss: 0.195626\n",
            "Train Epoch: 21 [14400/16000 90%]\tLoss: 0.199606\n",
            "Validation set: Average loss: 0.2047\n",
            "\n",
            "Train Epoch: 22 [0/16000 0%]\tLoss: 0.219919\n",
            "Train Epoch: 22 [1600/16000 10%]\tLoss: 0.208905\n",
            "Train Epoch: 22 [3200/16000 20%]\tLoss: 0.207908\n",
            "Train Epoch: 22 [4800/16000 30%]\tLoss: 0.184629\n",
            "Train Epoch: 22 [6400/16000 40%]\tLoss: 0.169200\n",
            "Train Epoch: 22 [8000/16000 50%]\tLoss: 0.222024\n",
            "Train Epoch: 22 [9600/16000 60%]\tLoss: 0.174121\n",
            "Train Epoch: 22 [11200/16000 70%]\tLoss: 0.154768\n",
            "Train Epoch: 22 [12800/16000 80%]\tLoss: 0.216544\n",
            "Train Epoch: 22 [14400/16000 90%]\tLoss: 0.216249\n",
            "Validation set: Average loss: 0.2036\n",
            "\n",
            "Train Epoch: 23 [0/16000 0%]\tLoss: 0.230954\n",
            "Train Epoch: 23 [1600/16000 10%]\tLoss: 0.176984\n",
            "Train Epoch: 23 [3200/16000 20%]\tLoss: 0.251192\n",
            "Train Epoch: 23 [4800/16000 30%]\tLoss: 0.191497\n",
            "Train Epoch: 23 [6400/16000 40%]\tLoss: 0.180776\n",
            "Train Epoch: 23 [8000/16000 50%]\tLoss: 0.140896\n",
            "Train Epoch: 23 [9600/16000 60%]\tLoss: 0.240421\n",
            "Train Epoch: 23 [11200/16000 70%]\tLoss: 0.204248\n",
            "Train Epoch: 23 [12800/16000 80%]\tLoss: 0.243305\n",
            "Train Epoch: 23 [14400/16000 90%]\tLoss: 0.182720\n",
            "Validation set: Average loss: 0.2044\n",
            "\n",
            "Train Epoch: 24 [0/16000 0%]\tLoss: 0.185919\n",
            "Train Epoch: 24 [1600/16000 10%]\tLoss: 0.193656\n",
            "Train Epoch: 24 [3200/16000 20%]\tLoss: 0.188026\n",
            "Train Epoch: 24 [4800/16000 30%]\tLoss: 0.204145\n",
            "Train Epoch: 24 [6400/16000 40%]\tLoss: 0.206245\n",
            "Train Epoch: 24 [8000/16000 50%]\tLoss: 0.181125\n",
            "Train Epoch: 24 [9600/16000 60%]\tLoss: 0.218990\n",
            "Train Epoch: 24 [11200/16000 70%]\tLoss: 0.216696\n",
            "Train Epoch: 24 [12800/16000 80%]\tLoss: 0.207965\n",
            "Train Epoch: 24 [14400/16000 90%]\tLoss: 0.164209\n",
            "Validation set: Average loss: 0.2033\n",
            "\n",
            "Train Epoch: 25 [0/16000 0%]\tLoss: 0.223711\n",
            "Train Epoch: 25 [1600/16000 10%]\tLoss: 0.165273\n",
            "Train Epoch: 25 [3200/16000 20%]\tLoss: 0.221187\n",
            "Train Epoch: 25 [4800/16000 30%]\tLoss: 0.178121\n",
            "Train Epoch: 25 [6400/16000 40%]\tLoss: 0.251057\n",
            "Train Epoch: 25 [8000/16000 50%]\tLoss: 0.189038\n",
            "Train Epoch: 25 [9600/16000 60%]\tLoss: 0.230664\n",
            "Train Epoch: 25 [11200/16000 70%]\tLoss: 0.191977\n",
            "Train Epoch: 25 [12800/16000 80%]\tLoss: 0.150795\n",
            "Train Epoch: 25 [14400/16000 90%]\tLoss: 0.207604\n",
            "Validation set: Average loss: 0.2034\n",
            "\n",
            "Train Epoch: 26 [0/16000 0%]\tLoss: 0.124001\n",
            "Train Epoch: 26 [1600/16000 10%]\tLoss: 0.175573\n",
            "Train Epoch: 26 [3200/16000 20%]\tLoss: 0.144749\n",
            "Train Epoch: 26 [4800/16000 30%]\tLoss: 0.223028\n",
            "Train Epoch: 26 [6400/16000 40%]\tLoss: 0.195876\n",
            "Train Epoch: 26 [8000/16000 50%]\tLoss: 0.167570\n",
            "Train Epoch: 26 [9600/16000 60%]\tLoss: 0.255883\n",
            "Train Epoch: 26 [11200/16000 70%]\tLoss: 0.227086\n",
            "Train Epoch: 26 [12800/16000 80%]\tLoss: 0.223880\n",
            "Train Epoch: 26 [14400/16000 90%]\tLoss: 0.275256\n",
            "Validation set: Average loss: 0.2024\n",
            "\n",
            "Train Epoch: 27 [0/16000 0%]\tLoss: 0.220358\n",
            "Train Epoch: 27 [1600/16000 10%]\tLoss: 0.156954\n",
            "Train Epoch: 27 [3200/16000 20%]\tLoss: 0.146018\n",
            "Train Epoch: 27 [4800/16000 30%]\tLoss: 0.161514\n",
            "Train Epoch: 27 [6400/16000 40%]\tLoss: 0.245708\n",
            "Train Epoch: 27 [8000/16000 50%]\tLoss: 0.172092\n",
            "Train Epoch: 27 [9600/16000 60%]\tLoss: 0.213982\n",
            "Train Epoch: 27 [11200/16000 70%]\tLoss: 0.174899\n",
            "Train Epoch: 27 [12800/16000 80%]\tLoss: 0.151436\n",
            "Train Epoch: 27 [14400/16000 90%]\tLoss: 0.245738\n",
            "Validation set: Average loss: 0.2013\n",
            "\n",
            "Train Epoch: 28 [0/16000 0%]\tLoss: 0.177195\n",
            "Train Epoch: 28 [1600/16000 10%]\tLoss: 0.244035\n",
            "Train Epoch: 28 [3200/16000 20%]\tLoss: 0.211942\n",
            "Train Epoch: 28 [4800/16000 30%]\tLoss: 0.141829\n",
            "Train Epoch: 28 [6400/16000 40%]\tLoss: 0.140605\n",
            "Train Epoch: 28 [8000/16000 50%]\tLoss: 0.189675\n",
            "Train Epoch: 28 [9600/16000 60%]\tLoss: 0.173889\n",
            "Train Epoch: 28 [11200/16000 70%]\tLoss: 0.208766\n",
            "Train Epoch: 28 [12800/16000 80%]\tLoss: 0.280310\n",
            "Train Epoch: 28 [14400/16000 90%]\tLoss: 0.267954\n",
            "Validation set: Average loss: 0.2017\n",
            "\n",
            "Train Epoch: 29 [0/16000 0%]\tLoss: 0.196145\n",
            "Train Epoch: 29 [1600/16000 10%]\tLoss: 0.222080\n",
            "Train Epoch: 29 [3200/16000 20%]\tLoss: 0.198229\n",
            "Train Epoch: 29 [4800/16000 30%]\tLoss: 0.167204\n",
            "Train Epoch: 29 [6400/16000 40%]\tLoss: 0.243039\n",
            "Train Epoch: 29 [8000/16000 50%]\tLoss: 0.140474\n",
            "Train Epoch: 29 [9600/16000 60%]\tLoss: 0.221247\n",
            "Train Epoch: 29 [11200/16000 70%]\tLoss: 0.220289\n",
            "Train Epoch: 29 [12800/16000 80%]\tLoss: 0.192680\n",
            "Train Epoch: 29 [14400/16000 90%]\tLoss: 0.177087\n",
            "Validation set: Average loss: 0.2006\n",
            "\n",
            "Train Epoch: 30 [0/16000 0%]\tLoss: 0.242840\n",
            "Train Epoch: 30 [1600/16000 10%]\tLoss: 0.193183\n",
            "Train Epoch: 30 [3200/16000 20%]\tLoss: 0.209583\n",
            "Train Epoch: 30 [4800/16000 30%]\tLoss: 0.211096\n",
            "Train Epoch: 30 [6400/16000 40%]\tLoss: 0.181624\n",
            "Train Epoch: 30 [8000/16000 50%]\tLoss: 0.202017\n",
            "Train Epoch: 30 [9600/16000 60%]\tLoss: 0.191408\n",
            "Train Epoch: 30 [11200/16000 70%]\tLoss: 0.139004\n",
            "Train Epoch: 30 [12800/16000 80%]\tLoss: 0.207222\n",
            "Train Epoch: 30 [14400/16000 90%]\tLoss: 0.174581\n",
            "Validation set: Average loss: 0.2007\n",
            "\n",
            "CPU times: user 15min 4s, sys: 1min 1s, total: 16min 5s\n",
            "Wall time: 16min 8s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "mpmBUjgbECMC",
        "colab_type": "code",
        "outputId": "b4c512e1-eb5f-405e-a924-5d23c89dc6e1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "loss_sim3t = train_loss\n",
        "loss_sim3v = val_loss \n",
        "\n",
        "plt.title(\"Loss of Simple CNN2 Model\")\n",
        "plt.plot(train_loss, label=\"train\")\n",
        "plt.plot(val_loss, label=\"validation\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nLKvVyqWXXsrf//53PvjgAy644AJstmNPIYuLi0lJSYltu91uIpEIxcXFlJaW4na7Y2VHjzty5AjV\n1dVMmTIlFpeioqJ6jxlE2oqSukgLpaen1/s/6pKSEtLT0wEYOnQoixcvZs2aNVxwwQXMnz+/yf0t\nvW5jcnNzYyPdj17j9ttvZ9CgQWzfvv07/47FxcWx76WlpfWSPIDP5+OOO+5g6dKlLF26lPfff5/s\n7OwG1znvvPNYuXIl1dXV9fbv27ePJUuWNDh+zJgx9O/fn9dee63Rut16662sXr2arVu31tufk5PD\nq6++yp///Gd69+7d7O84depUli1bxtKlS5k6dWq9su7du9f7b1FaWorFYsHj8ZCSkkJZWVms7PDh\nw0A0JklJSbGYLF26lI8//phJkyY1WxeR1qakLtJC48eP58033yQUClFZWclbb73FRRddxLZt25gz\nZw5+vx+Hw8GZZ56JYRiN7m/pdZty6NAhZs2axZdffhnbt2nTJg4ePHhSA7Tef/99/H4/lZWVrFy5\nknPOOade+SWXXMJbb71FVVUVAK+99hp/+ctfGlznggsuoH///tx3332x0ea5ubncddddjbbG77vv\nPp577jkqKipMy10uF3fddVe90e15eXk8+eST/PGPfyQjI6NFv+PIkSPJz89n+/btsS70o8aOHcuG\nDRtiYxRee+01xo4di81m4+yzz46Nwt+3bx+ffvopAD179iQzM5OlS5cC0WR/zz33UFlZ2aL6iLQm\njX4XMTFjxox6I7ofeeQRZsyYwf79+7n88ssxDIPJkyfXe8Z6xRVXYLfbSUpK4qGHHmLQoEGm+81+\nVmPXbczIkSN5+OGHWbBgAWVlZYTDYdLT03nqqafo2bPnd/69R44cycyZM9mzZw+TJk1i3LhxHDx4\nMFY+ceJEtm/fHhs93qdPHxYuXNjgOoZh8Nxzz/HUU09x9dVXY7PZcLlc3HjjjbFnz8fr3bs3V111\nFX/84x8brd+VV17Jn//8ZwoLC4Hoc/SKigpuueWW2DE2m63eYDizuk2aNImqqioslvrtmszMTB55\n5BF+8pOfEAgE6NWrFw8//DAA//f//l/uvvtuJkyYwIABA7j00ktj13vyySdZsGABTz/9NBaLhZtv\nvjn2iEOkLRlaT11EIHpzcd1113HVVVe1d1VE5DtS97uIiEgXoaQuIiLSRaj7XUREpItQS11ERKSL\n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\nN77zYf2Y2gAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d6544860>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "C1vfD7WbEEWD",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### c) deep_cnn"
      ]
    },
    {
      "metadata": {
        "id": "Q_O7GuVGEpjw",
        "colab_type": "code",
        "outputId": "9c414b7e-897a-4d38-f404-941152c317dc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 6388
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "model = deep_cnn(input_channels = 3).to(device)\n",
        "epoch = 30\n",
        "\n",
        "learning_rate = 0.0001 # for deep_cnn\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate) #Adam\n",
        "criterion = nn.MultiLabelSoftMarginLoss()\n",
        "\n",
        "train_loss, val_loss = [], []\n",
        "for i in range(1,1+epoch):\n",
        "    train_net(model, train_loader_2, i, train_loss)\n",
        "    validate(model, test_loader_2, val_loss)\n",
        "    torch.save(model.state_dict(), '/content/gdrive/My Drive/Image_project/Our_models/model_deepcnn_epoch'+str(i)+'.pkl')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Epoch: 1 [0/16000 0%]\tLoss: 0.778625\n",
            "Train Epoch: 1 [1600/16000 10%]\tLoss: 0.545743\n",
            "Train Epoch: 1 [3200/16000 20%]\tLoss: 0.401835\n",
            "Train Epoch: 1 [4800/16000 30%]\tLoss: 0.328048\n",
            "Train Epoch: 1 [6400/16000 40%]\tLoss: 0.311393\n",
            "Train Epoch: 1 [8000/16000 50%]\tLoss: 0.264173\n",
            "Train Epoch: 1 [9600/16000 60%]\tLoss: 0.222792\n",
            "Train Epoch: 1 [11200/16000 70%]\tLoss: 0.218435\n",
            "Train Epoch: 1 [12800/16000 80%]\tLoss: 0.191852\n",
            "Train Epoch: 1 [14400/16000 90%]\tLoss: 0.199943\n",
            "Validation set: Average loss: 0.2100\n",
            "\n",
            "Train Epoch: 2 [0/16000 0%]\tLoss: 0.136997\n",
            "Train Epoch: 2 [1600/16000 10%]\tLoss: 0.167038\n",
            "Train Epoch: 2 [3200/16000 20%]\tLoss: 0.243562\n",
            "Train Epoch: 2 [4800/16000 30%]\tLoss: 0.154369\n",
            "Train Epoch: 2 [6400/16000 40%]\tLoss: 0.186535\n",
            "Train Epoch: 2 [8000/16000 50%]\tLoss: 0.159996\n",
            "Train Epoch: 2 [9600/16000 60%]\tLoss: 0.183481\n",
            "Train Epoch: 2 [11200/16000 70%]\tLoss: 0.182117\n",
            "Train Epoch: 2 [12800/16000 80%]\tLoss: 0.221194\n",
            "Train Epoch: 2 [14400/16000 90%]\tLoss: 0.189087\n",
            "Validation set: Average loss: 0.1954\n",
            "\n",
            "Train Epoch: 3 [0/16000 0%]\tLoss: 0.166135\n",
            "Train Epoch: 3 [1600/16000 10%]\tLoss: 0.173157\n",
            "Train Epoch: 3 [3200/16000 20%]\tLoss: 0.169586\n",
            "Train Epoch: 3 [4800/16000 30%]\tLoss: 0.227666\n",
            "Train Epoch: 3 [6400/16000 40%]\tLoss: 0.201288\n",
            "Train Epoch: 3 [8000/16000 50%]\tLoss: 0.172879\n",
            "Train Epoch: 3 [9600/16000 60%]\tLoss: 0.265039\n",
            "Train Epoch: 3 [11200/16000 70%]\tLoss: 0.167608\n",
            "Train Epoch: 3 [12800/16000 80%]\tLoss: 0.256071\n",
            "Train Epoch: 3 [14400/16000 90%]\tLoss: 0.164208\n",
            "Validation set: Average loss: 0.1906\n",
            "\n",
            "Train Epoch: 4 [0/16000 0%]\tLoss: 0.230279\n",
            "Train Epoch: 4 [1600/16000 10%]\tLoss: 0.138784\n",
            "Train Epoch: 4 [3200/16000 20%]\tLoss: 0.193400\n",
            "Train Epoch: 4 [4800/16000 30%]\tLoss: 0.191219\n",
            "Train Epoch: 4 [6400/16000 40%]\tLoss: 0.190703\n",
            "Train Epoch: 4 [8000/16000 50%]\tLoss: 0.232569\n",
            "Train Epoch: 4 [9600/16000 60%]\tLoss: 0.207778\n",
            "Train Epoch: 4 [11200/16000 70%]\tLoss: 0.157689\n",
            "Train Epoch: 4 [12800/16000 80%]\tLoss: 0.159133\n",
            "Train Epoch: 4 [14400/16000 90%]\tLoss: 0.181956\n",
            "Validation set: Average loss: 0.1877\n",
            "\n",
            "Train Epoch: 5 [0/16000 0%]\tLoss: 0.122882\n",
            "Train Epoch: 5 [1600/16000 10%]\tLoss: 0.181359\n",
            "Train Epoch: 5 [3200/16000 20%]\tLoss: 0.188962\n",
            "Train Epoch: 5 [4800/16000 30%]\tLoss: 0.223827\n",
            "Train Epoch: 5 [6400/16000 40%]\tLoss: 0.158541\n",
            "Train Epoch: 5 [8000/16000 50%]\tLoss: 0.163862\n",
            "Train Epoch: 5 [9600/16000 60%]\tLoss: 0.179741\n",
            "Train Epoch: 5 [11200/16000 70%]\tLoss: 0.248846\n",
            "Train Epoch: 5 [12800/16000 80%]\tLoss: 0.143963\n",
            "Train Epoch: 5 [14400/16000 90%]\tLoss: 0.234716\n",
            "Validation set: Average loss: 0.1849\n",
            "\n",
            "Train Epoch: 6 [0/16000 0%]\tLoss: 0.204466\n",
            "Train Epoch: 6 [1600/16000 10%]\tLoss: 0.231107\n",
            "Train Epoch: 6 [3200/16000 20%]\tLoss: 0.132854\n",
            "Train Epoch: 6 [4800/16000 30%]\tLoss: 0.191039\n",
            "Train Epoch: 6 [6400/16000 40%]\tLoss: 0.199569\n",
            "Train Epoch: 6 [8000/16000 50%]\tLoss: 0.193657\n",
            "Train Epoch: 6 [9600/16000 60%]\tLoss: 0.191766\n",
            "Train Epoch: 6 [11200/16000 70%]\tLoss: 0.239866\n",
            "Train Epoch: 6 [12800/16000 80%]\tLoss: 0.164971\n",
            "Train Epoch: 6 [14400/16000 90%]\tLoss: 0.241303\n",
            "Validation set: Average loss: 0.1840\n",
            "\n",
            "Train Epoch: 7 [0/16000 0%]\tLoss: 0.166787\n",
            "Train Epoch: 7 [1600/16000 10%]\tLoss: 0.181584\n",
            "Train Epoch: 7 [3200/16000 20%]\tLoss: 0.183534\n",
            "Train Epoch: 7 [4800/16000 30%]\tLoss: 0.157861\n",
            "Train Epoch: 7 [6400/16000 40%]\tLoss: 0.155804\n",
            "Train Epoch: 7 [8000/16000 50%]\tLoss: 0.144790\n",
            "Train Epoch: 7 [9600/16000 60%]\tLoss: 0.166730\n",
            "Train Epoch: 7 [11200/16000 70%]\tLoss: 0.170159\n",
            "Train Epoch: 7 [12800/16000 80%]\tLoss: 0.153632\n",
            "Train Epoch: 7 [14400/16000 90%]\tLoss: 0.159397\n",
            "Validation set: Average loss: 0.1833\n",
            "\n",
            "Train Epoch: 8 [0/16000 0%]\tLoss: 0.169160\n",
            "Train Epoch: 8 [1600/16000 10%]\tLoss: 0.203780\n",
            "Train Epoch: 8 [3200/16000 20%]\tLoss: 0.164937\n",
            "Train Epoch: 8 [4800/16000 30%]\tLoss: 0.168648\n",
            "Train Epoch: 8 [6400/16000 40%]\tLoss: 0.159509\n",
            "Train Epoch: 8 [8000/16000 50%]\tLoss: 0.126450\n",
            "Train Epoch: 8 [9600/16000 60%]\tLoss: 0.145868\n",
            "Train Epoch: 8 [11200/16000 70%]\tLoss: 0.171067\n",
            "Train Epoch: 8 [12800/16000 80%]\tLoss: 0.185311\n",
            "Train Epoch: 8 [14400/16000 90%]\tLoss: 0.133171\n",
            "Validation set: Average loss: 0.1807\n",
            "\n",
            "Train Epoch: 9 [0/16000 0%]\tLoss: 0.172989\n",
            "Train Epoch: 9 [1600/16000 10%]\tLoss: 0.205032\n",
            "Train Epoch: 9 [3200/16000 20%]\tLoss: 0.168655\n",
            "Train Epoch: 9 [4800/16000 30%]\tLoss: 0.144415\n",
            "Train Epoch: 9 [6400/16000 40%]\tLoss: 0.146869\n",
            "Train Epoch: 9 [8000/16000 50%]\tLoss: 0.211483\n",
            "Train Epoch: 9 [9600/16000 60%]\tLoss: 0.167165\n",
            "Train Epoch: 9 [11200/16000 70%]\tLoss: 0.194043\n",
            "Train Epoch: 9 [12800/16000 80%]\tLoss: 0.217363\n",
            "Train Epoch: 9 [14400/16000 90%]\tLoss: 0.250633\n",
            "Validation set: Average loss: 0.1802\n",
            "\n",
            "Train Epoch: 10 [0/16000 0%]\tLoss: 0.181287\n",
            "Train Epoch: 10 [1600/16000 10%]\tLoss: 0.149756\n",
            "Train Epoch: 10 [3200/16000 20%]\tLoss: 0.162016\n",
            "Train Epoch: 10 [4800/16000 30%]\tLoss: 0.215234\n",
            "Train Epoch: 10 [6400/16000 40%]\tLoss: 0.144995\n",
            "Train Epoch: 10 [8000/16000 50%]\tLoss: 0.188374\n",
            "Train Epoch: 10 [9600/16000 60%]\tLoss: 0.183211\n",
            "Train Epoch: 10 [11200/16000 70%]\tLoss: 0.213895\n",
            "Train Epoch: 10 [12800/16000 80%]\tLoss: 0.206089\n",
            "Train Epoch: 10 [14400/16000 90%]\tLoss: 0.124773\n",
            "Validation set: Average loss: 0.1797\n",
            "\n",
            "Train Epoch: 11 [0/16000 0%]\tLoss: 0.126339\n",
            "Train Epoch: 11 [1600/16000 10%]\tLoss: 0.199830\n",
            "Train Epoch: 11 [3200/16000 20%]\tLoss: 0.159376\n",
            "Train Epoch: 11 [4800/16000 30%]\tLoss: 0.190871\n",
            "Train Epoch: 11 [6400/16000 40%]\tLoss: 0.129979\n",
            "Train Epoch: 11 [8000/16000 50%]\tLoss: 0.130202\n",
            "Train Epoch: 11 [9600/16000 60%]\tLoss: 0.167640\n",
            "Train Epoch: 11 [11200/16000 70%]\tLoss: 0.173170\n",
            "Train Epoch: 11 [12800/16000 80%]\tLoss: 0.225209\n",
            "Train Epoch: 11 [14400/16000 90%]\tLoss: 0.247402\n",
            "Validation set: Average loss: 0.1788\n",
            "\n",
            "Train Epoch: 12 [0/16000 0%]\tLoss: 0.140964\n",
            "Train Epoch: 12 [1600/16000 10%]\tLoss: 0.211097\n",
            "Train Epoch: 12 [3200/16000 20%]\tLoss: 0.243514\n",
            "Train Epoch: 12 [4800/16000 30%]\tLoss: 0.147412\n",
            "Train Epoch: 12 [6400/16000 40%]\tLoss: 0.186977\n",
            "Train Epoch: 12 [8000/16000 50%]\tLoss: 0.146110\n",
            "Train Epoch: 12 [9600/16000 60%]\tLoss: 0.142622\n",
            "Train Epoch: 12 [11200/16000 70%]\tLoss: 0.205810\n",
            "Train Epoch: 12 [12800/16000 80%]\tLoss: 0.170693\n",
            "Train Epoch: 12 [14400/16000 90%]\tLoss: 0.180828\n",
            "Validation set: Average loss: 0.1785\n",
            "\n",
            "Train Epoch: 13 [0/16000 0%]\tLoss: 0.159567\n",
            "Train Epoch: 13 [1600/16000 10%]\tLoss: 0.164755\n",
            "Train Epoch: 13 [3200/16000 20%]\tLoss: 0.138659\n",
            "Train Epoch: 13 [4800/16000 30%]\tLoss: 0.129983\n",
            "Train Epoch: 13 [6400/16000 40%]\tLoss: 0.161243\n",
            "Train Epoch: 13 [8000/16000 50%]\tLoss: 0.137372\n",
            "Train Epoch: 13 [9600/16000 60%]\tLoss: 0.177364\n",
            "Train Epoch: 13 [11200/16000 70%]\tLoss: 0.108319\n",
            "Train Epoch: 13 [12800/16000 80%]\tLoss: 0.139298\n",
            "Train Epoch: 13 [14400/16000 90%]\tLoss: 0.127648\n",
            "Validation set: Average loss: 0.1794\n",
            "\n",
            "Train Epoch: 14 [0/16000 0%]\tLoss: 0.136117\n",
            "Train Epoch: 14 [1600/16000 10%]\tLoss: 0.166974\n",
            "Train Epoch: 14 [3200/16000 20%]\tLoss: 0.128967\n",
            "Train Epoch: 14 [4800/16000 30%]\tLoss: 0.188910\n",
            "Train Epoch: 14 [6400/16000 40%]\tLoss: 0.167102\n",
            "Train Epoch: 14 [8000/16000 50%]\tLoss: 0.221007\n",
            "Train Epoch: 14 [9600/16000 60%]\tLoss: 0.126276\n",
            "Train Epoch: 14 [11200/16000 70%]\tLoss: 0.139063\n",
            "Train Epoch: 14 [12800/16000 80%]\tLoss: 0.144596\n",
            "Train Epoch: 14 [14400/16000 90%]\tLoss: 0.137757\n",
            "Validation set: Average loss: 0.1781\n",
            "\n",
            "Train Epoch: 15 [0/16000 0%]\tLoss: 0.110005\n",
            "Train Epoch: 15 [1600/16000 10%]\tLoss: 0.205004\n",
            "Train Epoch: 15 [3200/16000 20%]\tLoss: 0.116188\n",
            "Train Epoch: 15 [4800/16000 30%]\tLoss: 0.198977\n",
            "Train Epoch: 15 [6400/16000 40%]\tLoss: 0.117631\n",
            "Train Epoch: 15 [8000/16000 50%]\tLoss: 0.165719\n",
            "Train Epoch: 15 [9600/16000 60%]\tLoss: 0.152400\n",
            "Train Epoch: 15 [11200/16000 70%]\tLoss: 0.139421\n",
            "Train Epoch: 15 [12800/16000 80%]\tLoss: 0.160124\n",
            "Train Epoch: 15 [14400/16000 90%]\tLoss: 0.102100\n",
            "Validation set: Average loss: 0.1780\n",
            "\n",
            "Train Epoch: 16 [0/16000 0%]\tLoss: 0.166423\n",
            "Train Epoch: 16 [1600/16000 10%]\tLoss: 0.187086\n",
            "Train Epoch: 16 [3200/16000 20%]\tLoss: 0.099331\n",
            "Train Epoch: 16 [4800/16000 30%]\tLoss: 0.200791\n",
            "Train Epoch: 16 [6400/16000 40%]\tLoss: 0.105295\n",
            "Train Epoch: 16 [8000/16000 50%]\tLoss: 0.128913\n",
            "Train Epoch: 16 [9600/16000 60%]\tLoss: 0.141061\n",
            "Train Epoch: 16 [11200/16000 70%]\tLoss: 0.195260\n",
            "Train Epoch: 16 [12800/16000 80%]\tLoss: 0.174032\n",
            "Train Epoch: 16 [14400/16000 90%]\tLoss: 0.130178\n",
            "Validation set: Average loss: 0.1778\n",
            "\n",
            "Train Epoch: 17 [0/16000 0%]\tLoss: 0.153359\n",
            "Train Epoch: 17 [1600/16000 10%]\tLoss: 0.190946\n",
            "Train Epoch: 17 [3200/16000 20%]\tLoss: 0.134334\n",
            "Train Epoch: 17 [4800/16000 30%]\tLoss: 0.139157\n",
            "Train Epoch: 17 [6400/16000 40%]\tLoss: 0.122847\n",
            "Train Epoch: 17 [8000/16000 50%]\tLoss: 0.148905\n",
            "Train Epoch: 17 [9600/16000 60%]\tLoss: 0.104366\n",
            "Train Epoch: 17 [11200/16000 70%]\tLoss: 0.109076\n",
            "Train Epoch: 17 [12800/16000 80%]\tLoss: 0.128811\n",
            "Train Epoch: 17 [14400/16000 90%]\tLoss: 0.240200\n",
            "Validation set: Average loss: 0.1785\n",
            "\n",
            "Train Epoch: 18 [0/16000 0%]\tLoss: 0.138936\n",
            "Train Epoch: 18 [1600/16000 10%]\tLoss: 0.167188\n",
            "Train Epoch: 18 [3200/16000 20%]\tLoss: 0.109679\n",
            "Train Epoch: 18 [4800/16000 30%]\tLoss: 0.164966\n",
            "Train Epoch: 18 [6400/16000 40%]\tLoss: 0.109882\n",
            "Train Epoch: 18 [8000/16000 50%]\tLoss: 0.260229\n",
            "Train Epoch: 18 [9600/16000 60%]\tLoss: 0.172182\n",
            "Train Epoch: 18 [11200/16000 70%]\tLoss: 0.159044\n",
            "Train Epoch: 18 [12800/16000 80%]\tLoss: 0.140215\n",
            "Train Epoch: 18 [14400/16000 90%]\tLoss: 0.169271\n",
            "Validation set: Average loss: 0.1761\n",
            "\n",
            "Train Epoch: 19 [0/16000 0%]\tLoss: 0.117632\n",
            "Train Epoch: 19 [1600/16000 10%]\tLoss: 0.099394\n",
            "Train Epoch: 19 [3200/16000 20%]\tLoss: 0.126041\n",
            "Train Epoch: 19 [4800/16000 30%]\tLoss: 0.122213\n",
            "Train Epoch: 19 [6400/16000 40%]\tLoss: 0.108743\n",
            "Train Epoch: 19 [8000/16000 50%]\tLoss: 0.121594\n",
            "Train Epoch: 19 [9600/16000 60%]\tLoss: 0.139620\n",
            "Train Epoch: 19 [11200/16000 70%]\tLoss: 0.168478\n",
            "Train Epoch: 19 [12800/16000 80%]\tLoss: 0.146263\n",
            "Train Epoch: 19 [14400/16000 90%]\tLoss: 0.173057\n",
            "Validation set: Average loss: 0.1770\n",
            "\n",
            "Train Epoch: 20 [0/16000 0%]\tLoss: 0.100456\n",
            "Train Epoch: 20 [1600/16000 10%]\tLoss: 0.173197\n",
            "Train Epoch: 20 [3200/16000 20%]\tLoss: 0.114204\n",
            "Train Epoch: 20 [4800/16000 30%]\tLoss: 0.170433\n",
            "Train Epoch: 20 [6400/16000 40%]\tLoss: 0.178407\n",
            "Train Epoch: 20 [8000/16000 50%]\tLoss: 0.144822\n",
            "Train Epoch: 20 [9600/16000 60%]\tLoss: 0.130727\n",
            "Train Epoch: 20 [11200/16000 70%]\tLoss: 0.144785\n",
            "Train Epoch: 20 [12800/16000 80%]\tLoss: 0.183960\n",
            "Train Epoch: 20 [14400/16000 90%]\tLoss: 0.126793\n",
            "Validation set: Average loss: 0.1796\n",
            "\n",
            "Train Epoch: 21 [0/16000 0%]\tLoss: 0.099704\n",
            "Train Epoch: 21 [1600/16000 10%]\tLoss: 0.160255\n",
            "Train Epoch: 21 [3200/16000 20%]\tLoss: 0.101502\n",
            "Train Epoch: 21 [4800/16000 30%]\tLoss: 0.119881\n",
            "Train Epoch: 21 [6400/16000 40%]\tLoss: 0.210095\n",
            "Train Epoch: 21 [8000/16000 50%]\tLoss: 0.110795\n",
            "Train Epoch: 21 [9600/16000 60%]\tLoss: 0.132753\n",
            "Train Epoch: 21 [11200/16000 70%]\tLoss: 0.138061\n",
            "Train Epoch: 21 [12800/16000 80%]\tLoss: 0.148579\n",
            "Train Epoch: 21 [14400/16000 90%]\tLoss: 0.140037\n",
            "Validation set: Average loss: 0.1778\n",
            "\n",
            "Train Epoch: 22 [0/16000 0%]\tLoss: 0.119174\n",
            "Train Epoch: 22 [1600/16000 10%]\tLoss: 0.136995\n",
            "Train Epoch: 22 [3200/16000 20%]\tLoss: 0.114686\n",
            "Train Epoch: 22 [4800/16000 30%]\tLoss: 0.148904\n",
            "Train Epoch: 22 [6400/16000 40%]\tLoss: 0.086946\n",
            "Train Epoch: 22 [8000/16000 50%]\tLoss: 0.180390\n",
            "Train Epoch: 22 [9600/16000 60%]\tLoss: 0.155390\n",
            "Train Epoch: 22 [11200/16000 70%]\tLoss: 0.134120\n",
            "Train Epoch: 22 [12800/16000 80%]\tLoss: 0.147763\n",
            "Train Epoch: 22 [14400/16000 90%]\tLoss: 0.097468\n",
            "Validation set: Average loss: 0.1794\n",
            "\n",
            "Train Epoch: 23 [0/16000 0%]\tLoss: 0.213370\n",
            "Train Epoch: 23 [1600/16000 10%]\tLoss: 0.104108\n",
            "Train Epoch: 23 [3200/16000 20%]\tLoss: 0.174999\n",
            "Train Epoch: 23 [4800/16000 30%]\tLoss: 0.162179\n",
            "Train Epoch: 23 [6400/16000 40%]\tLoss: 0.121198\n",
            "Train Epoch: 23 [8000/16000 50%]\tLoss: 0.105492\n",
            "Train Epoch: 23 [9600/16000 60%]\tLoss: 0.118427\n",
            "Train Epoch: 23 [11200/16000 70%]\tLoss: 0.093287\n",
            "Train Epoch: 23 [12800/16000 80%]\tLoss: 0.128894\n",
            "Train Epoch: 23 [14400/16000 90%]\tLoss: 0.144187\n",
            "Validation set: Average loss: 0.1775\n",
            "\n",
            "Train Epoch: 24 [0/16000 0%]\tLoss: 0.133746\n",
            "Train Epoch: 24 [1600/16000 10%]\tLoss: 0.130279\n",
            "Train Epoch: 24 [3200/16000 20%]\tLoss: 0.157679\n",
            "Train Epoch: 24 [4800/16000 30%]\tLoss: 0.166258\n",
            "Train Epoch: 24 [6400/16000 40%]\tLoss: 0.134138\n",
            "Train Epoch: 24 [8000/16000 50%]\tLoss: 0.166698\n",
            "Train Epoch: 24 [9600/16000 60%]\tLoss: 0.209097\n",
            "Train Epoch: 24 [11200/16000 70%]\tLoss: 0.150591\n",
            "Train Epoch: 24 [12800/16000 80%]\tLoss: 0.105793\n",
            "Train Epoch: 24 [14400/16000 90%]\tLoss: 0.139983\n",
            "Validation set: Average loss: 0.1796\n",
            "\n",
            "Train Epoch: 25 [0/16000 0%]\tLoss: 0.118478\n",
            "Train Epoch: 25 [1600/16000 10%]\tLoss: 0.173001\n",
            "Train Epoch: 25 [3200/16000 20%]\tLoss: 0.137233\n",
            "Train Epoch: 25 [4800/16000 30%]\tLoss: 0.098298\n",
            "Train Epoch: 25 [6400/16000 40%]\tLoss: 0.122835\n",
            "Train Epoch: 25 [8000/16000 50%]\tLoss: 0.141532\n",
            "Train Epoch: 25 [9600/16000 60%]\tLoss: 0.156367\n",
            "Train Epoch: 25 [11200/16000 70%]\tLoss: 0.234993\n",
            "Train Epoch: 25 [12800/16000 80%]\tLoss: 0.183882\n",
            "Train Epoch: 25 [14400/16000 90%]\tLoss: 0.114233\n",
            "Validation set: Average loss: 0.1802\n",
            "\n",
            "Train Epoch: 26 [0/16000 0%]\tLoss: 0.171320\n",
            "Train Epoch: 26 [1600/16000 10%]\tLoss: 0.193377\n",
            "Train Epoch: 26 [3200/16000 20%]\tLoss: 0.169578\n",
            "Train Epoch: 26 [4800/16000 30%]\tLoss: 0.168370\n",
            "Train Epoch: 26 [6400/16000 40%]\tLoss: 0.149396\n",
            "Train Epoch: 26 [8000/16000 50%]\tLoss: 0.132611\n",
            "Train Epoch: 26 [9600/16000 60%]\tLoss: 0.094853\n",
            "Train Epoch: 26 [11200/16000 70%]\tLoss: 0.149322\n",
            "Train Epoch: 26 [12800/16000 80%]\tLoss: 0.122182\n",
            "Train Epoch: 26 [14400/16000 90%]\tLoss: 0.182808\n",
            "Validation set: Average loss: 0.1816\n",
            "\n",
            "Train Epoch: 27 [0/16000 0%]\tLoss: 0.175683\n",
            "Train Epoch: 27 [1600/16000 10%]\tLoss: 0.157549\n",
            "Train Epoch: 27 [3200/16000 20%]\tLoss: 0.114694\n",
            "Train Epoch: 27 [4800/16000 30%]\tLoss: 0.125183\n",
            "Train Epoch: 27 [6400/16000 40%]\tLoss: 0.132159\n",
            "Train Epoch: 27 [8000/16000 50%]\tLoss: 0.084406\n",
            "Train Epoch: 27 [9600/16000 60%]\tLoss: 0.167137\n",
            "Train Epoch: 27 [11200/16000 70%]\tLoss: 0.203701\n",
            "Train Epoch: 27 [12800/16000 80%]\tLoss: 0.134589\n",
            "Train Epoch: 27 [14400/16000 90%]\tLoss: 0.123517\n",
            "Validation set: Average loss: 0.1800\n",
            "\n",
            "Train Epoch: 28 [0/16000 0%]\tLoss: 0.144635\n",
            "Train Epoch: 28 [1600/16000 10%]\tLoss: 0.123975\n",
            "Train Epoch: 28 [3200/16000 20%]\tLoss: 0.132386\n",
            "Train Epoch: 28 [4800/16000 30%]\tLoss: 0.097238\n",
            "Train Epoch: 28 [6400/16000 40%]\tLoss: 0.160420\n",
            "Train Epoch: 28 [8000/16000 50%]\tLoss: 0.159344\n",
            "Train Epoch: 28 [9600/16000 60%]\tLoss: 0.141958\n",
            "Train Epoch: 28 [11200/16000 70%]\tLoss: 0.163320\n",
            "Train Epoch: 28 [12800/16000 80%]\tLoss: 0.190626\n",
            "Train Epoch: 28 [14400/16000 90%]\tLoss: 0.112012\n",
            "Validation set: Average loss: 0.1808\n",
            "\n",
            "Train Epoch: 29 [0/16000 0%]\tLoss: 0.116720\n",
            "Train Epoch: 29 [1600/16000 10%]\tLoss: 0.185096\n",
            "Train Epoch: 29 [3200/16000 20%]\tLoss: 0.138241\n",
            "Train Epoch: 29 [4800/16000 30%]\tLoss: 0.142094\n",
            "Train Epoch: 29 [6400/16000 40%]\tLoss: 0.120557\n",
            "Train Epoch: 29 [8000/16000 50%]\tLoss: 0.113846\n",
            "Train Epoch: 29 [9600/16000 60%]\tLoss: 0.138875\n",
            "Train Epoch: 29 [11200/16000 70%]\tLoss: 0.091685\n",
            "Train Epoch: 29 [12800/16000 80%]\tLoss: 0.083108\n",
            "Train Epoch: 29 [14400/16000 90%]\tLoss: 0.136285\n",
            "Validation set: Average loss: 0.1829\n",
            "\n",
            "Train Epoch: 30 [0/16000 0%]\tLoss: 0.132502\n",
            "Train Epoch: 30 [1600/16000 10%]\tLoss: 0.142487\n",
            "Train Epoch: 30 [3200/16000 20%]\tLoss: 0.106863\n",
            "Train Epoch: 30 [4800/16000 30%]\tLoss: 0.106240\n",
            "Train Epoch: 30 [6400/16000 40%]\tLoss: 0.131475\n",
            "Train Epoch: 30 [8000/16000 50%]\tLoss: 0.097942\n",
            "Train Epoch: 30 [9600/16000 60%]\tLoss: 0.161034\n",
            "Train Epoch: 30 [11200/16000 70%]\tLoss: 0.095203\n",
            "Train Epoch: 30 [12800/16000 80%]\tLoss: 0.142096\n",
            "Train Epoch: 30 [14400/16000 90%]\tLoss: 0.095449\n",
            "Validation set: Average loss: 0.1811\n",
            "\n",
            "CPU times: user 17min 31s, sys: 1min 36s, total: 19min 8s\n",
            "Wall time: 19min 19s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "zs9hkYLiE3PA",
        "colab_type": "code",
        "outputId": "f2521ba8-838b-440c-b295-a0ef6d807d5e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "loss_deept = train_loss\n",
        "loss_deepv = val_loss \n",
        "\n",
        "plt.title(\"Loss of Deep CNN Model\")\n",
        "plt.plot(train_loss, label=\"train\")\n",
        "plt.plot(val_loss, label=\"validation\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfsAAAFnCAYAAAChL+DqAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xl81NW9//HXd7ZkJjNJZpJMEnaI\nEJBFgWqrIIrgAlqXq1UuXrCt1dqqiN5WLfcq9lZwq7Si1WptXSq9BtO0tVqNP1u1XGQRRZQdgoSw\nZF8neybz+2PCQMoEJ5CBSXg/H488Zr7rnPmQ8Pme8z3fc4xAIBBARERE+izTyS6AiIiIRJeSvYiI\nSB+nZC8iItLHKdmLiIj0cUr2IiIifZySvYiISB+nZC/SA7KzsykuLj7ZxQBg2bJlTJo0iWefffaI\nbdnZ2Vx00UVccsklTJkyhe9///usX7/+hJWtpaWFX/ziF1x66aVccsklXHLJJfziF7+gpaUFgKee\neooxY8awZ8+eTsfNmTOHNWvWhN7PmDGDtra2TvtkZ2eH/cz77ruPMWPGUF1d3Wn9unXryM7OJi8v\nr1vfYd26dVx44YVfuV8s/U6IKNmL9DHvvvsu8+fP5wc/+EHY7b///e/Jz8/nww8/5KqrruKHP/wh\nH3/88Qkp2z333MPWrVtZvnw5+fn55OTksHXrVn7yk5+E9vF6vTz66KNHPU9zczPLli2L+HNTU1PJ\nz8/vtO6tt94iMzOze19ApJeynOwCiPRlzc3NLFq0iDVr1mAymTj//PP58Y9/jNls5tVXX2XZsmUE\nAgGcTicPP/www4cP73J9JOd94okn+OyzzygoKKC4uJg77rijy7IZhsGMGTPw+Xw88cQTvPbaa7S0\ntPDYY4+xYsUKWltbue6667j11lsB2LlzJw8++CBlZWXYbDYWL17M2LFjycvL4+233yY5OZn169cT\nHx/P008/zZAhQzp93o4dO/jwww95//33SUxMBCA5OZnFixezffv20H5XXHEF//jHP1i9ejXf+MY3\nwpZ93rx5PPHEE1xxxRW43e6v/HeYMmUKb775Jtdffz0Afr+fFStWMGHChNA++/fv5/7772fv3r1Y\nrVa+973vcdVVVwHwzDPPkJOTg9vt7lSrP1q8RGKJavYiUfTyyy9TXFzMW2+9xZ/+9CfWrVvHm2++\nic/n48knn+T111/nnXfe4aabbuKDDz7ocn2k573nnnsYN24cP/7xj4+a6A934YUXsmHDBpqamvjN\nb37Dzp07+etf/8qbb75Jfn4+77//Pu3t7dx2221ceeWV5Ofn8+CDD/LDH/4w1JT+0UcfccMNN/De\ne+8xbdo0Hn/88SM+Z+3atZx55pkkJyd3Wp+SksI555wTWjabzfzkJz9h8eLF+P3+sGXOzMzkmmuu\n4amnnoroO55xxhns27ePkpISAFatWsW4ceOw2Wyhfe6//37OPvts8vPzee6553jooYfYu3cvO3fu\n5KWXXuKPf/wjf/zjH9m2bVvomK7iJRJrlOxFouiDDz7guuuuw2KxEB8fzze/+U1WrlxJXFwchmGQ\nm5tLeXk5M2bM4Oabb+5yfaTnPRZOp5P29nbq6+t5//33mT17NjabDYfDwZVXXsm7777Lrl27qKio\n4NprrwVg4sSJeDye0P3+rKwszjzzTAAuueSSsP0AampqSElJiahM55xzDv379+f111/vcp9bbrmF\n999/nx07dnzl+QzD4JJLLuGtt94Cgk34M2fODG1vbW3lo48+Yvbs2QD079+fr3/966xevZqPP/6Y\ns846i9TUVMxmM1dccUXouK7iJRJrlOxFoqiyspKkpKTQclJSEhUVFVitVl566SU+/fRTLrnkEmbP\nns22bdu6XB/peY/FwWZrl8tFXV0dDz/8MJdeeimXXnopr7zyCo2NjdTW1tLU1MSMGTNC2yoqKkKd\n3g4vS2JiIrW1tUd8jtvtDtWsI3HvvffyzDPPUFdXF3a7w+Fg3rx5PPLIIxGd7/LLL+fNN9+kpaWF\nNWvWMGXKlNC26upqAoEALper0/eorKykpqbmiPUHdRUvkVije/YiUZSamtqpF3h1dTWpqakAnH76\n6SxdupSWlhZeeOEFFi5cyGuvvdbl+kjP2135+fmcffbZ2Gw2vF4v3/3ud5k6dWqnffbu3UtCQgLv\nvPPOEcfn5eV1KktNTU2n5H/Q2WefzcMPP0xJSQnp6emh9bW1tbz44ovMmzev0/5Dhgxh5syZPPPM\nM12W/aqrruLVV1+NqOl89OjR1NfXs3z5cs4666xOTfhutxuTydSp7NXV1aSkpNDc3NzpgqOqqir0\nvqt4icQa1exFouiCCy4gNzcXv99PQ0MDf/nLXzj//PPZtm0b8+bNo6WlBZvNxpgxYzAMo8v1kZ63\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d47825f8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "0Ans7APFKoHY",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Evaluation and Analysis"
      ]
    },
    {
      "metadata": {
        "id": "0F5Dm3bvMfSJ",
        "colab_type": "code",
        "outputId": "ec27196a-f98c-4fea-9fea-066f9b978b72",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "plt.title(\"Comparison of training loss with 3 models\")\n",
        "plt.plot(loss_sim2t, label=\"simcnn2\")\n",
        "plt.plot(loss_sim3t, label=\"simcnn3\")\n",
        "plt.plot(loss_deept, label=\"deepcnn\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d8dcfef0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "-s_yELQCNEq8",
        "colab_type": "code",
        "outputId": "6fed2025-0fa8-4818-ee47-75fb54d7272b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "plt.title(\"Comparison of validation loss with 3 models\")\n",
        "plt.plot(loss_sim2v, label=\"simcnn2\")\n",
        "plt.plot(loss_sim3v, label=\"simcnn3\")\n",
        "plt.plot(loss_deepv, label=\"deepcnn\")\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epoch\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb9d8ebc128>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "FsrH1PEPKqga",
        "colab_type": "code",
        "outputId": "0d5adce7-bf80-479b-c93e-f389c5976476",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "cell_type": "code",
      "source": [
        "treshold = 0.2\n",
        "model_sim2 = simple_cnn2_drop().to(device)\n",
        "model_sim2.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Our_models/model_simcnn2_drop_epoch30.pkl'))\n",
        "lossv_sim2, accv_sim2, precv_sim2, recv_sim2 = [], [], [], []\n",
        "evaluate(model_sim2, test_loader_2, treshold, lossv_sim2, accv_sim2, precv_sim2, recv_sim2, verbose=True)\n",
        "\n",
        "model_sim3 = simple_cnn3().to(device)\n",
        "model_sim3.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Our_models/model_simcnn3_epoch30.pkl'))\n",
        "lossv_sim3, accv_sim3, precv_sim3, recv_sim3 = [], [], [], []\n",
        "evaluate(model_sim3, test_loader_2, treshold, lossv_sim3, accv_sim3, precv_sim3, recv_sim3, verbose=True)\n",
        "\n",
        "\n",
        "model_deep = deep_cnn(input_channels = 3).to(device)\n",
        "model_deep.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Our_models/model_deepcnn_epoch15.pkl'))\n",
        "lossv_deep, accv_deep, precv_deep, recv_deep = [], [], [], []\n",
        "evaluate(model_deep, test_loader_2, treshold, lossv_deep, accv_deep, precv_deep, recv_deep, verbose=True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation set: Average loss: 0.1869, Accuracy: 89.40%, Precision: 35.58%, Recall: 56.92%\n",
            "\t\tF1 score : 43.79%\n",
            "\n",
            "Validation set: Average loss: 0.2000, Accuracy: 88.61%, Precision: 32.16%, Recall: 50.32%\n",
            "\t\tF1 score : 39.24%\n",
            "\n",
            "Validation set: Average loss: 0.1783, Accuracy: 90.01%, Precision: 37.85%, Recall: 57.75%\n",
            "\t\tF1 score : 45.73%\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "I61016nANMfd",
        "colab_type": "code",
        "outputId": "cd973cdf-bcd2-45d7-fc1a-203862f36968",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "cell_type": "code",
      "source": [
        "treshold = 0.3\n",
        "model_sim2 = simple_cnn2_drop().to(device)\n",
        "model_sim2.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Our_models/model_simcnn2_drop_epoch30.pkl'))\n",
        "lossv_sim2, accv_sim2, precv_sim2, recv_sim2 = [], [], [], []\n",
        "evaluate(model_sim2, test_loader_2, treshold, lossv_sim2, accv_sim2, precv_sim2, recv_sim2, verbose=True)\n",
        "\n",
        "model_sim3 = simple_cnn3().to(device)\n",
        "model_sim3.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Our_models/model_simcnn3_epoch30.pkl'))\n",
        "lossv_sim3, accv_sim3, precv_sim3, recv_sim3 = [], [], [], []\n",
        "evaluate(model_sim3, test_loader_2, treshold, lossv_sim3, accv_sim3, precv_sim3, recv_sim3, verbose=True)\n",
        "\n",
        "\n",
        "model_deep = deep_cnn(input_channels = 3).to(device)\n",
        "model_deep.load_state_dict(torch.load('/content/gdrive/My Drive/Image_project/Our_models/model_deepcnn_epoch15.pkl'))\n",
        "lossv_deep, accv_deep, precv_deep, recv_deep = [], [], [], []\n",
        "evaluate(model_deep, test_loader_2, treshold, lossv_deep, accv_deep, precv_deep, recv_deep, verbose=True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation set: Average loss: 0.1865, Accuracy: 91.76%, Precision: 42.87%, Recall: 40.93%\n",
            "\t\tF1 score : 41.88%\n",
            "\n",
            "Validation set: Average loss: 0.2005, Accuracy: 91.49%, Precision: 39.43%, Recall: 31.98%\n",
            "\t\tF1 score : 35.31%\n",
            "\n",
            "Validation set: Average loss: 0.1784, Accuracy: 92.19%, Precision: 45.77%, Recall: 41.60%\n",
            "\t\tF1 score : 43.58%\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "OWzKxc-a1NQE",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "As we can see from both loss plots and the validation results, the deep_cnn is better than other two CNN structures."
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Cbp_n2GnN6EV"
      },
      "cell_type": "markdown",
      "source": [
        "## Save your model\n",
        "\n",
        "It might be useful to save your model if you want to continue your work later, or use it for inference later."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "oCZPjfH_N6EY",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "torch.save(model.state_dict(), 'model.pkl')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "2aXYpGaLN6Ec"
      },
      "cell_type": "markdown",
      "source": [
        "The model file should now be visible in the \"Home\" screen of the jupyter notebooks interface.  There you should be able to select it and press \"download\".  [See more here on how to load the model back](https://github.com/pytorch/pytorch/blob/761d6799beb3afa03657a71776412a2171ee7533/docs/source/notes/serialization.rst) if you want to continue training later."
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "ncKwVsBvN6Ed"
      },
      "cell_type": "markdown",
      "source": [
        "## Download test set\n",
        "\n",
        "The testset will be made available during the last week before the deadline and can be downloaded in the same way as the training set."
      ]
    },
    {
      "metadata": {
        "id": "kVQ48Nb1INwG",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "to_test_path = 'to_test'\n",
        "dl_file = 'dl2018-image-test.zip'\n",
        "dl_url = 'https://users.aalto.fi/~mvsjober/misc/'\n",
        "\n",
        "zip_path = os.path.join(to_test_path, dl_file)\n",
        "if not os.path.isfile(zip_path):\n",
        "    download_url(dl_url + dl_file, root=to_test_path, filename=dl_file, md5=None)\n",
        "\n",
        "with zipfile.ZipFile(zip_path) as zip_f:\n",
        "    zip_f.extractall(to_test_path)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "f04wJ1xXN6Ee"
      },
      "cell_type": "markdown",
      "source": [
        "## Predict for test set\n",
        "\n",
        "You should return your predictions for the test set in a plain text file.  The text file contains one row for each test set image.  Each row contains a binary prediction for each label (separated by a single space), 1 if it's present in the image, and 0 if not. The order of the labels is as follows (alphabetic order of the label names):\n",
        "\n",
        "    baby bird car clouds dog female flower male night people portrait river sea tree\n",
        "\n",
        "An example row could like like this if your system predicts the presense of a bird and clouds:\n",
        "\n",
        "    0 1 0 1 0 0 0 0 0 0 0 0 0 0\n",
        "    \n",
        "The order of the rows should be according to the numeric order of the image numbers.  In the test set, this means that the first row refers to image `im20001.jpg`, the second to `im20002.jpg`, and so on."
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "lyQFBPVxN6Ef"
      },
      "cell_type": "markdown",
      "source": [
        "If you have the prediction output matrix prepared in `y` you can use the following function to save it to a text file."
      ]
    },
    {
      "metadata": {
        "id": "hHnY564V9UX-",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "order = ['baby', # given order, most likely different from the order constructed\n",
        " 'bird',         # automatically in the preprocessing part.\n",
        " 'car',\n",
        " 'clouds',\n",
        " 'dog',\n",
        " 'female',\n",
        " 'flower',\n",
        " 'male',\n",
        " 'night',\n",
        " 'people',\n",
        " 'portrait',\n",
        " 'river',\n",
        " 'sea',\n",
        " 'tree']\n",
        "# Permutation table (arrays' indices to permute) \n",
        "switch = [0 for _ in range(14)]\n",
        "for i in range(14):\n",
        "  searched =  order[i]\n",
        "  switch[i] = oneHotTransformer.vocabulary.index(searched)\n",
        "\n",
        "def batch_output_in_right_order(batch_pred, order_switch):\n",
        "  return batch_pred[:, order_switch]\n",
        "  \n",
        "\n",
        "# Example for one batch\n",
        "inputv, targetv = next(test_loader.__iter__())\n",
        "inputv = inputv.to(device)\n",
        "best_tresholds_as_tensor = torch.Tensor([0.2]*14).to(device)\n",
        "batch_pred = torch.sigmoid(model(inputv).to(device)) > best_tresholds_as_tensor\n",
        "\n",
        "batch_right_order = batch_output_in_right_order(batch_pred, switch)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "fydgHSqnM31Z",
        "colab_type": "code",
        "outputId": "f7096051-14ea-4a85-bbea-6e6e9a8d6dc7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        }
      },
      "cell_type": "code",
      "source": [
        "# Double check it works\n",
        "print(\"Truth: \", targetv[0])\n",
        "print(\"Labelled Truth: \", oneHotTransformer.toVocabulary(targetv[0]))\n",
        "\n",
        "ex0 = batch_right_order[0]\n",
        "\n",
        "\n",
        "print(\"-\"*10)\n",
        "print(\"new order\", order)\n",
        "#print(inputv.cpu().numpy()[0][0])\n",
        "\n",
        "\n",
        "targetv_good_order = batch_output_in_right_order(targetv, switch)\n",
        "t0 = targetv_good_order[0]\n",
        "plt.imshow(inputv.cpu().numpy()[0][0], cmap=\"gray\")\n",
        "#print(batch_output_in_right_order(batch_pred, switch))\n",
        "print(\"re ordered\", t0)\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Truth:  tensor([0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0])\n",
            "Labelled Truth:  ['female', 'portrait', 'people']\n",
            "----------\n",
            "new order ['baby', 'bird', 'car', 'clouds', 'dog', 'female', 'flower', 'male', 'night', 'people', 'portrait', 'river', 'sea', 'tree']\n",
            "re ordered tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVEAAAFNCAYAAAC5YlyiAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzsnXnclVW99i/EyJwqCT2ZR7M0KwOc\nE2c0LYecyok0M8tyyj5ZoIRNnjwplanHqcy00qRQ0WMOqOWUoCVqOWVaWVlhnTxZKqXo+wfv917X\n/du/5+6Bje9Dvev6h4e97mFNe6/rNw97/vnnn1dFRUVFxSJhqaHuQEVFRcU/M+qPaEVFRUUfqD+i\nFRUVFX2g/ohWVFRU9IH6I1pRUVHRB+qPaEVFRUUfWHpxP/CEE07Q3XffrWHDhmny5MkaM2bM4n5F\nRUVFxRKDxfojevvtt+uRRx7RtGnT9PDDD2vy5MmaNm3a4nxFRUVFxRKFxSrOz5o1S295y1skSa99\n7Wv15z//WX/9618X5ysqKioqligsVib6xz/+Ueuuu27z/5VWWkl/+MMftPzyy6fXr7HGGpo5c6be\n9ra3NZ8RQLX00ku3/pWkv/3tb61/58+f37Tx97PPPitJ+vvf/9608dlzzz3X+jeDB3ANHz689e9S\nS5Uz57nnntOcOXM0duzYAZ85bNiwnjY+y9430P1ZH7wvL3rRiySpmefllluuaeOzl7/85ZKkl73s\nZZKkL33pS/roRz/aet+f//zn5u+nnnpK0oI1laT111+/adtyyy0lSRtssIEkadSoUT3PYD1Gjx7d\n08aYX/ziF/e08S/99OtHjBihV7ziFZo9e3bT9tvf/rY1vl/96ldN2xVXXCFJrf1FX7nv8ccfb9oe\nffRRSWX+/FmsIfc9+eSTTdtDDz0kqayDfweeeeYZSdLrXvc6nXjiiTrqqKOatje96U2SpLXWWqt1\nrSStssoqrXl4xSte0bQxR/R3xRVXbNrmzZsnacFcSWXvS9Lqq68uqaztK1/5yqbt/PPPlyT96U9/\nkiS9/vWvb9r+9Kc/6eCDD9Y555wjqcy1v4/7fD//5S9/aX3m+4vvNSTL+8m+5z7e4X9zvc8Z33nW\niv9fcskl2nXXXVv3+fu4Pmvj7//5n//RQBi2OMM+jzvuOG299dYNG91vv/10wgknaM0110yv/+lP\nf6p11llncb2+oqKi4v85FisTXXnllRvmIkmPPfZYi6VE7Lvvvrrzzju10UYbNZ85u5TaTJQTIzJS\nqZeBPv30000bn3GNv4NTD2bnrLGLFT/33HN68sknGzaVMVE+c0bJM2lzRrnssstKKqwzsla/3vuy\n0korpf9K0gorrCCpsD6Y6WmnndawoieeeEJS+1Tns0033VSStPPOOzdtsCP66WwO9sG6uxTC+GB6\nca19XL5+PHP+/PlabbXVWgwR9sfa/uQnP2naHnvssZ75uOeee1p9+cUvftG0/fznP2/dN2fOnKYt\nrttgJQjmfd68eXr++edb60YfmKPDDjusaYPZbb755pIWqMfAj3/8Y0ll/l71qlc1bawNz3aW+rvf\n/U5SmVuuccyYMUNSW/IYNWqUttlmG+255549fVl55ZUl9TJ1SVpmmWUklfVjTP7ujIkC+un7Mv4G\nuMTJmtDG/++5556GrEWp1D9jPv19tPkej1isOtHNN99c11xzjSTp3nvv1corrzygKF9RUVHxr4DF\nykQ32GADrbvuutp33301bNgwffKTn1ycj6+oqKhY4rDY/USjsaILKL8RyaQiziESufgDuN7vi8pk\nRE2piAVR8SwV8ZjrM5qfGXMQFaI6QCpiQVSQ+2eIeW4EQvyJBi3/m2tcuf/Sl75UUjEc8H+pzHEm\nunEd/7oqBhFx/PjxA46Pz3wdokHk17/+ddOGWB3HIpW5Zq0QAaVixGEMvie47n//938lSePGjWva\nbrzxRknF8CMtMDL4Z/4sxM1MtcN1jNXFSJ8bqa2mQLSM10hFlGUMp59+etPGu1lnN8LdcMMNkoph\nyVVmq666qiTpne98p6T2XmB/oKpxdRhGH57105/+tGfsqAP4Vyp7e7PNNusZ30033SSp7KWXvOQl\nPc9kXnw+2RfR4ON/03dviyqX7D7WpssonbV1oUYsVVRUVPSBxc5EFwa4WrgvaXR/yVgc/zqTwfWB\nz/zkj4wpY6K0+ftcwRzvi4ahrA04o4wM1HXGsEauwSgkFWYHM8mYKP86u43MycfE++jf/fff37Rt\nv/32rf45a+HdtDnL5TrG4K45rA0sxPtCP2FE7kIUn+33wW6477TTTmvaYMHf/e53m88wGrFGPlcg\nMxLyTv71/RWNIs4a4x7K9jPPckkA9zEkAfotSauttpok6eabb+55x9vf/nZJ0ve//31J7e8I6/Tm\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb6a4d6b588>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "vQr4-NZimso8",
        "colab_type": "code",
        "outputId": "867ad769-7015-4f21-ec58-df03ba7c978c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "images_path_test = \"to_test/images/\" \n",
        "image_files_test = [(images_path_test+f) for f in os.listdir(images_path_test) \\\n",
        "                if os.path.isfile(os.path.join(images_path_test, f))]\n",
        "\n",
        "image_files_test = sorted(image_files_test)\n",
        "def to_basename(rel_path):\n",
        "  \"\"\" 'to_test/images/im20001.jpg' to '20001' \"\"\"\n",
        "  return rel_path[17:-4] # stripping 17 first chars and last 4 ones (extension of the file)\n",
        "basenames_test = [to_basename(path) for path in image_files_test]\n",
        "print(basenames_test[:10])\n",
        "\n",
        "# load dataset\n",
        "# TODO Need color and grayscale handling "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['20001', '20002', '20003', '20004', '20005', '20006', '20007', '20008', '20009', '20010']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "lfLRzPjxqz26",
        "colab_type": "code",
        "outputId": "b52185fb-89b2-454e-946e-829129567219",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        }
      },
      "cell_type": "code",
      "source": [
        "inputv, targetv = next(test_loader.__iter__())\n",
        "inputv = inputv.to(device)\n",
        "model(inputv)\n",
        "tresholds = treshold_opt.get_best_tresholds()\n",
        "tresholds_as_tensor = torch.Tensor(tresholds).to(device)\n",
        "batch_pred = torch.sigmoid(model(inputv).to(device)) > best_tresholds_as_tensor\n",
        "print(batch_pred)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensor([[0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
            "        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0]], device='cuda:0',\n",
            "       dtype=torch.uint8)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "6OyPGL_JrSUv",
        "colab_type": "code",
        "outputId": "226298b4-67b1-40c7-c61d-d4d36af41add",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        }
      },
      "cell_type": "code",
      "source": [
        "def batchprediction_to_txt(pred):\n",
        "  listpred = pred.data.tolist()\n",
        "  res = \"\"\n",
        "  for labels in listpred:\n",
        "    stringified_labels = map(str, labels)\n",
        "    res += \" \".join(stringified_labels) + \"\\n\"\n",
        "  return res\n",
        "\n",
        "\n",
        "batch_right_order = batch_output_in_right_order(batch_pred, switch)\n",
        "print(batchprediction_to_txt(batch_right_order))\n",
        "# TODO : iterate over dataset and write labels batch by batch with the above function"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 0 0 1 0 0 0 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 0 0 0 0 1 0 0 0 0\n",
            "0 0 0 0 0 0 0 1 0 1 0 0 0 0\n",
            "0 0 0 0 0 1 0 0 0 1 1 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 1 0 0 0\n",
            "0 0 0 0 0 1 0 0 0 1 1 0 0 0\n",
            "0 0 0 0 0 0 0 0 0 1 0 0 0 0\n",
            "0 0 0 0 0 0 0 0 0 1 0 0 0 0\n",
            "0 0 0 0 0 1 0 1 0 1 0 0 0 0\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "qqJTyNzYN6Eg",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "np.savetxt('results.txt', y, fmt='%d')"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}